2024-09-20 08:36:26,953:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-20 08:36:26,953:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-20 08:36:26,953:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-20 08:36:26,953:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-20 08:36:27,673:INFO:PyCaret ClassificationExperiment
2024-09-20 08:36:27,673:INFO:Logging name: clf-default-name
2024-09-20 08:36:27,673:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-20 08:36:27,673:INFO:version 3.3.2
2024-09-20 08:36:27,673:INFO:Initializing setup()
2024-09-20 08:36:27,673:INFO:self.USI: e78e
2024-09-20 08:36:27,673:INFO:self._variable_keys: {'memory', 'n_jobs_param', 'X_train', 'log_plots_param', 'fold_shuffle_param', 'X_test', 'seed', 'fix_imbalance', 'X', 'logging_param', 'gpu_param', 'data', 'fold_generator', 'y', 'y_train', 'is_multiclass', 'exp_id', 'fold_groups_param', 'pipeline', 'y_test', 'target_param', 'idx', 'html_param', 'exp_name_log', 'USI', '_ml_usecase', '_available_plots', 'gpu_n_jobs_param'}
2024-09-20 08:36:27,673:INFO:Checking environment
2024-09-20 08:36:27,673:INFO:python_version: 3.11.9
2024-09-20 08:36:27,674:INFO:python_build: ('main', 'Apr 19 2024 16:40:41')
2024-09-20 08:36:27,674:INFO:machine: AMD64
2024-09-20 08:36:27,674:INFO:platform: Windows-10-10.0.19045-SP0
2024-09-20 08:36:27,677:INFO:Memory: svmem(total=16969424896, available=9867497472, percent=41.9, used=7101927424, free=9867497472)
2024-09-20 08:36:27,677:INFO:Physical Core: 4
2024-09-20 08:36:27,677:INFO:Logical Core: 8
2024-09-20 08:36:27,677:INFO:Checking libraries
2024-09-20 08:36:27,677:INFO:System:
2024-09-20 08:36:27,678:INFO:    python: 3.11.9 | packaged by Anaconda, Inc. | (main, Apr 19 2024, 16:40:41) [MSC v.1916 64 bit (AMD64)]
2024-09-20 08:36:27,678:INFO:executable: C:\Users\joji\anaconda3\envs\myenv\python.exe
2024-09-20 08:36:27,678:INFO:   machine: Windows-10-10.0.19045-SP0
2024-09-20 08:36:27,678:INFO:PyCaret required dependencies:
2024-09-20 08:36:27,760:INFO:                 pip: 24.2
2024-09-20 08:36:27,760:INFO:          setuptools: 72.1.0
2024-09-20 08:36:27,760:INFO:             pycaret: 3.3.2
2024-09-20 08:36:27,760:INFO:             IPython: 8.26.0
2024-09-20 08:36:27,760:INFO:          ipywidgets: 8.1.5
2024-09-20 08:36:27,761:INFO:                tqdm: 4.66.5
2024-09-20 08:36:27,761:INFO:               numpy: 1.26.4
2024-09-20 08:36:27,761:INFO:              pandas: 2.1.4
2024-09-20 08:36:27,762:INFO:              jinja2: 3.1.4
2024-09-20 08:36:27,762:INFO:               scipy: 1.11.4
2024-09-20 08:36:27,762:INFO:              joblib: 1.3.2
2024-09-20 08:36:27,762:INFO:             sklearn: 1.4.2
2024-09-20 08:36:27,762:INFO:                pyod: 2.0.2
2024-09-20 08:36:27,762:INFO:            imblearn: 0.12.3
2024-09-20 08:36:27,762:INFO:   category_encoders: 2.6.3
2024-09-20 08:36:27,762:INFO:            lightgbm: 4.5.0
2024-09-20 08:36:27,762:INFO:               numba: 0.60.0
2024-09-20 08:36:27,762:INFO:            requests: 2.32.3
2024-09-20 08:36:27,763:INFO:          matplotlib: 3.7.5
2024-09-20 08:36:27,763:INFO:          scikitplot: 0.3.7
2024-09-20 08:36:27,763:INFO:         yellowbrick: 1.5
2024-09-20 08:36:27,763:INFO:              plotly: 5.24.1
2024-09-20 08:36:27,763:INFO:    plotly-resampler: Not installed
2024-09-20 08:36:27,763:INFO:             kaleido: 0.2.1
2024-09-20 08:36:27,763:INFO:           schemdraw: 0.15
2024-09-20 08:36:27,763:INFO:         statsmodels: 0.14.3
2024-09-20 08:36:27,763:INFO:              sktime: 0.26.0
2024-09-20 08:36:27,763:INFO:               tbats: 1.1.3
2024-09-20 08:36:27,763:INFO:            pmdarima: 2.0.4
2024-09-20 08:36:27,763:INFO:              psutil: 6.0.0
2024-09-20 08:36:27,763:INFO:          markupsafe: 2.1.5
2024-09-20 08:36:27,764:INFO:             pickle5: Not installed
2024-09-20 08:36:27,764:INFO:         cloudpickle: 3.0.0
2024-09-20 08:36:27,764:INFO:         deprecation: 2.1.0
2024-09-20 08:36:27,764:INFO:              xxhash: 3.5.0
2024-09-20 08:36:27,764:INFO:           wurlitzer: Not installed
2024-09-20 08:36:27,764:INFO:PyCaret optional dependencies:
2024-09-20 08:36:27,787:INFO:                shap: 0.44.1
2024-09-20 08:36:27,787:INFO:           interpret: 0.6.3
2024-09-20 08:36:27,787:INFO:                umap: 0.5.6
2024-09-20 08:36:27,787:INFO:     ydata_profiling: 4.10.0
2024-09-20 08:36:27,787:INFO:  explainerdashboard: 0.4.7
2024-09-20 08:36:27,787:INFO:             autoviz: Not installed
2024-09-20 08:36:27,787:INFO:           fairlearn: 0.7.0
2024-09-20 08:36:27,787:INFO:          deepchecks: Not installed
2024-09-20 08:36:27,788:INFO:             xgboost: Not installed
2024-09-20 08:36:27,788:INFO:            catboost: Not installed
2024-09-20 08:36:27,788:INFO:              kmodes: Not installed
2024-09-20 08:36:27,788:INFO:             mlxtend: Not installed
2024-09-20 08:36:27,788:INFO:       statsforecast: Not installed
2024-09-20 08:36:27,788:INFO:        tune_sklearn: Not installed
2024-09-20 08:36:27,788:INFO:                 ray: Not installed
2024-09-20 08:36:27,788:INFO:            hyperopt: Not installed
2024-09-20 08:36:27,788:INFO:              optuna: Not installed
2024-09-20 08:36:27,788:INFO:               skopt: Not installed
2024-09-20 08:36:27,788:INFO:              mlflow: Not installed
2024-09-20 08:36:27,789:INFO:              gradio: Not installed
2024-09-20 08:36:27,789:INFO:             fastapi: Not installed
2024-09-20 08:36:27,789:INFO:             uvicorn: Not installed
2024-09-20 08:36:27,789:INFO:              m2cgen: Not installed
2024-09-20 08:36:27,789:INFO:           evidently: Not installed
2024-09-20 08:36:27,789:INFO:               fugue: Not installed
2024-09-20 08:36:27,789:INFO:           streamlit: Not installed
2024-09-20 08:36:27,789:INFO:             prophet: Not installed
2024-09-20 08:36:27,789:INFO:None
2024-09-20 08:36:27,789:INFO:Set up data.
2024-09-20 08:36:27,818:INFO:Set up folding strategy.
2024-09-20 08:36:27,819:INFO:Set up train/test split.
2024-09-20 08:36:27,842:INFO:Set up index.
2024-09-20 08:36:27,844:INFO:Assigning column types.
2024-09-20 08:36:27,845:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-20 08:36:27,934:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-20 08:36:27,939:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-20 08:36:27,978:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-20 08:36:27,979:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-20 08:36:28,045:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-20 08:36:28,045:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-20 08:36:28,072:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-20 08:36:28,073:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-20 08:36:28,073:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-20 08:36:28,116:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-20 08:36:28,142:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-20 08:36:28,142:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-20 08:36:28,185:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-20 08:36:28,226:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-20 08:36:28,227:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-20 08:36:28,228:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-20 08:36:28,311:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-20 08:36:28,311:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-20 08:36:28,405:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-20 08:36:28,405:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-20 08:36:28,417:INFO:Preparing preprocessing pipeline...
2024-09-20 08:36:28,417:INFO:Set up label encoding.
2024-09-20 08:36:28,417:INFO:Set up simple imputation.
2024-09-20 08:36:28,417:INFO:Set up encoding of ordinal features.
2024-09-20 08:36:28,433:INFO:Set up encoding of categorical features.
2024-09-20 08:36:28,433:INFO:Set up removing outliers.
2024-09-20 08:36:28,433:INFO:Set up feature normalization.
2024-09-20 08:36:28,840:INFO:Finished creating preprocessing pipeline.
2024-09-20 08:36:28,911:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\joji\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'campaign', 'pdays', 'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              co...
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('remove_outliers',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=RemoveOutliers(method='iforest',
                                                               n_jobs=1,
                                                               random_state=123,
                                                               threshold=0.05))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=MinMaxScaler(clip=False,
                                                             copy=True,
                                                             feature_range=(0,
                                                                            1))))],
         verbose=False)
2024-09-20 08:36:28,911:INFO:Creating final display dataframe.
2024-09-20 08:36:29,683:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target           deposit
2                   Target type            Binary
3                Target mapping     no: 0, yes: 1
4           Original data shape       (11162, 16)
5        Transformed data shape       (10715, 48)
6   Transformed train set shape        (8482, 48)
7    Transformed test set shape        (2233, 48)
8              Numeric features                 6
9          Categorical features                 9
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16              Remove outliers              True
17           Outliers threshold              0.05
18                    Normalize              True
19             Normalize method            minmax
20               Fold Generator   StratifiedKFold
21                  Fold Number                10
22                     CPU Jobs                -1
23                      Use GPU             False
24               Log Experiment             False
25              Experiment Name  clf-default-name
26                          USI              e78e
2024-09-20 08:36:29,829:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-20 08:36:29,829:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-20 08:36:29,954:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-20 08:36:29,955:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-20 08:36:29,957:INFO:setup() successfully completed in 2.3s...............
2024-09-20 08:37:01,067:INFO:PyCaret ClassificationExperiment
2024-09-20 08:37:01,067:INFO:Logging name: clf-default-name
2024-09-20 08:37:01,067:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-20 08:37:01,067:INFO:version 3.3.2
2024-09-20 08:37:01,067:INFO:Initializing setup()
2024-09-20 08:37:01,067:INFO:self.USI: 441f
2024-09-20 08:37:01,067:INFO:self._variable_keys: {'memory', 'n_jobs_param', 'X_train', 'log_plots_param', 'fold_shuffle_param', 'X_test', 'seed', 'fix_imbalance', 'X', 'logging_param', 'gpu_param', 'data', 'fold_generator', 'y', 'y_train', 'is_multiclass', 'exp_id', 'fold_groups_param', 'pipeline', 'y_test', 'target_param', 'idx', 'html_param', 'exp_name_log', 'USI', '_ml_usecase', '_available_plots', 'gpu_n_jobs_param'}
2024-09-20 08:37:01,067:INFO:Checking environment
2024-09-20 08:37:01,067:INFO:python_version: 3.11.9
2024-09-20 08:37:01,067:INFO:python_build: ('main', 'Apr 19 2024 16:40:41')
2024-09-20 08:37:01,067:INFO:machine: AMD64
2024-09-20 08:37:01,067:INFO:platform: Windows-10-10.0.19045-SP0
2024-09-20 08:37:01,072:INFO:Memory: svmem(total=16969424896, available=9890246656, percent=41.7, used=7079178240, free=9890246656)
2024-09-20 08:37:01,072:INFO:Physical Core: 4
2024-09-20 08:37:01,072:INFO:Logical Core: 8
2024-09-20 08:37:01,072:INFO:Checking libraries
2024-09-20 08:37:01,072:INFO:System:
2024-09-20 08:37:01,072:INFO:    python: 3.11.9 | packaged by Anaconda, Inc. | (main, Apr 19 2024, 16:40:41) [MSC v.1916 64 bit (AMD64)]
2024-09-20 08:37:01,072:INFO:executable: C:\Users\joji\anaconda3\envs\myenv\python.exe
2024-09-20 08:37:01,072:INFO:   machine: Windows-10-10.0.19045-SP0
2024-09-20 08:37:01,072:INFO:PyCaret required dependencies:
2024-09-20 08:37:01,073:INFO:                 pip: 24.2
2024-09-20 08:37:01,073:INFO:          setuptools: 72.1.0
2024-09-20 08:37:01,073:INFO:             pycaret: 3.3.2
2024-09-20 08:37:01,073:INFO:             IPython: 8.26.0
2024-09-20 08:37:01,073:INFO:          ipywidgets: 8.1.5
2024-09-20 08:37:01,073:INFO:                tqdm: 4.66.5
2024-09-20 08:37:01,073:INFO:               numpy: 1.26.4
2024-09-20 08:37:01,073:INFO:              pandas: 2.1.4
2024-09-20 08:37:01,073:INFO:              jinja2: 3.1.4
2024-09-20 08:37:01,073:INFO:               scipy: 1.11.4
2024-09-20 08:37:01,073:INFO:              joblib: 1.3.2
2024-09-20 08:37:01,073:INFO:             sklearn: 1.4.2
2024-09-20 08:37:01,073:INFO:                pyod: 2.0.2
2024-09-20 08:37:01,073:INFO:            imblearn: 0.12.3
2024-09-20 08:37:01,073:INFO:   category_encoders: 2.6.3
2024-09-20 08:37:01,074:INFO:            lightgbm: 4.5.0
2024-09-20 08:37:01,074:INFO:               numba: 0.60.0
2024-09-20 08:37:01,074:INFO:            requests: 2.32.3
2024-09-20 08:37:01,074:INFO:          matplotlib: 3.7.5
2024-09-20 08:37:01,074:INFO:          scikitplot: 0.3.7
2024-09-20 08:37:01,074:INFO:         yellowbrick: 1.5
2024-09-20 08:37:01,074:INFO:              plotly: 5.24.1
2024-09-20 08:37:01,074:INFO:    plotly-resampler: Not installed
2024-09-20 08:37:01,074:INFO:             kaleido: 0.2.1
2024-09-20 08:37:01,074:INFO:           schemdraw: 0.15
2024-09-20 08:37:01,074:INFO:         statsmodels: 0.14.3
2024-09-20 08:37:01,074:INFO:              sktime: 0.26.0
2024-09-20 08:37:01,074:INFO:               tbats: 1.1.3
2024-09-20 08:37:01,074:INFO:            pmdarima: 2.0.4
2024-09-20 08:37:01,074:INFO:              psutil: 6.0.0
2024-09-20 08:37:01,074:INFO:          markupsafe: 2.1.5
2024-09-20 08:37:01,075:INFO:             pickle5: Not installed
2024-09-20 08:37:01,075:INFO:         cloudpickle: 3.0.0
2024-09-20 08:37:01,075:INFO:         deprecation: 2.1.0
2024-09-20 08:37:01,075:INFO:              xxhash: 3.5.0
2024-09-20 08:37:01,075:INFO:           wurlitzer: Not installed
2024-09-20 08:37:01,075:INFO:PyCaret optional dependencies:
2024-09-20 08:37:01,075:INFO:                shap: 0.44.1
2024-09-20 08:37:01,075:INFO:           interpret: 0.6.3
2024-09-20 08:37:01,075:INFO:                umap: 0.5.6
2024-09-20 08:37:01,075:INFO:     ydata_profiling: 4.10.0
2024-09-20 08:37:01,075:INFO:  explainerdashboard: 0.4.7
2024-09-20 08:37:01,075:INFO:             autoviz: Not installed
2024-09-20 08:37:01,075:INFO:           fairlearn: 0.7.0
2024-09-20 08:37:01,075:INFO:          deepchecks: Not installed
2024-09-20 08:37:01,075:INFO:             xgboost: Not installed
2024-09-20 08:37:01,076:INFO:            catboost: Not installed
2024-09-20 08:37:01,076:INFO:              kmodes: Not installed
2024-09-20 08:37:01,076:INFO:             mlxtend: Not installed
2024-09-20 08:37:01,076:INFO:       statsforecast: Not installed
2024-09-20 08:37:01,076:INFO:        tune_sklearn: Not installed
2024-09-20 08:37:01,076:INFO:                 ray: Not installed
2024-09-20 08:37:01,076:INFO:            hyperopt: Not installed
2024-09-20 08:37:01,076:INFO:              optuna: Not installed
2024-09-20 08:37:01,076:INFO:               skopt: Not installed
2024-09-20 08:37:01,076:INFO:              mlflow: Not installed
2024-09-20 08:37:01,076:INFO:              gradio: Not installed
2024-09-20 08:37:01,076:INFO:             fastapi: Not installed
2024-09-20 08:37:01,076:INFO:             uvicorn: Not installed
2024-09-20 08:37:01,076:INFO:              m2cgen: Not installed
2024-09-20 08:37:01,076:INFO:           evidently: Not installed
2024-09-20 08:37:01,076:INFO:               fugue: Not installed
2024-09-20 08:37:01,076:INFO:           streamlit: Not installed
2024-09-20 08:37:01,076:INFO:             prophet: Not installed
2024-09-20 08:37:01,076:INFO:None
2024-09-20 08:37:01,076:INFO:Set up data.
2024-09-20 08:37:01,192:INFO:Set up folding strategy.
2024-09-20 08:37:01,192:INFO:Set up train/test split.
2024-09-20 08:37:01,208:INFO:Set up index.
2024-09-20 08:37:01,208:INFO:Assigning column types.
2024-09-20 08:37:01,223:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-20 08:37:01,268:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-20 08:37:01,268:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-20 08:37:01,295:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-20 08:37:01,296:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-20 08:37:01,357:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-20 08:37:01,357:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-20 08:37:01,373:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-20 08:37:01,373:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-20 08:37:01,373:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-20 08:37:01,442:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-20 08:37:01,494:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-20 08:37:01,494:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-20 08:37:01,559:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-20 08:37:01,611:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-20 08:37:01,611:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-20 08:37:01,611:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-20 08:37:01,750:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-20 08:37:01,751:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-20 08:37:01,837:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-20 08:37:01,838:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-20 08:37:01,840:INFO:Preparing preprocessing pipeline...
2024-09-20 08:37:01,843:INFO:Set up label encoding.
2024-09-20 08:37:01,843:INFO:Set up simple imputation.
2024-09-20 08:37:01,850:INFO:Set up encoding of ordinal features.
2024-09-20 08:37:01,858:INFO:Set up encoding of categorical features.
2024-09-20 08:37:01,859:INFO:Set up feature normalization.
2024-09-20 08:37:02,201:INFO:Finished creating preprocessing pipeline.
2024-09-20 08:37:02,227:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\joji\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'campaign', 'pdays', 'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              co...
                                    transformer=OneHotEncoder(cols=['job',
                                                                    'marital',
                                                                    'education',
                                                                    'contact',
                                                                    'month',
                                                                    'poutcome'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-09-20 08:37:02,227:INFO:Creating final display dataframe.
2024-09-20 08:37:02,910:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target           deposit
2                   Target type            Binary
3                Target mapping     no: 0, yes: 1
4           Original data shape       (11162, 16)
5        Transformed data shape       (11162, 48)
6   Transformed train set shape        (8929, 48)
7    Transformed test set shape        (2233, 48)
8              Numeric features                 6
9          Categorical features                 9
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16                    Normalize              True
17             Normalize method            zscore
18               Fold Generator   StratifiedKFold
19                  Fold Number                10
20                     CPU Jobs                -1
21                      Use GPU             False
22               Log Experiment             False
23              Experiment Name  clf-default-name
24                          USI              441f
2024-09-20 08:37:03,000:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-20 08:37:03,000:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-20 08:37:03,110:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-20 08:37:03,110:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-20 08:37:03,110:INFO:setup() successfully completed in 2.05s...............
2024-09-20 08:37:10,358:INFO:Initializing compare_models()
2024-09-20 08:37:10,358:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E4EC4EE010>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=AUC, n_select=3, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001E4EC4EE010>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'AUC', 'n_select': 3, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2024-09-20 08:37:10,358:INFO:Checking exceptions
2024-09-20 08:37:10,365:INFO:Preparing display monitor
2024-09-20 08:37:10,394:INFO:Initializing Logistic Regression
2024-09-20 08:37:10,394:INFO:Total runtime is 0.0 minutes
2024-09-20 08:37:10,398:INFO:SubProcess create_model() called ==================================
2024-09-20 08:37:10,399:INFO:Initializing create_model()
2024-09-20 08:37:10,399:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E4EC4EE010>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E4F48A0E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-20 08:37:10,399:INFO:Checking exceptions
2024-09-20 08:37:10,399:INFO:Importing libraries
2024-09-20 08:37:10,399:INFO:Copying training dataset
2024-09-20 08:37:10,413:INFO:Defining folds
2024-09-20 08:37:10,414:INFO:Declaring metric variables
2024-09-20 08:37:10,420:INFO:Importing untrained model
2024-09-20 08:37:10,420:INFO:Logistic Regression Imported successfully
2024-09-20 08:37:10,429:INFO:Starting cross validation
2024-09-20 08:37:10,438:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-20 08:37:15,547:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:15,549:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:15,557:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:15,557:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:15,560:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:15,566:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:15,570:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:15,571:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:15,577:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:15,583:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:15,593:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:15,597:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:15,603:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:15,604:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:15,611:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:15,612:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:15,614:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:15,615:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:15,621:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:15,622:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:15,627:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:15,633:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:15,637:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:15,653:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:15,943:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:15,943:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:15,949:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:15,949:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:15,955:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:15,955:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:15,971:INFO:Calculating mean and std
2024-09-20 08:37:15,973:INFO:Creating metrics dataframe
2024-09-20 08:37:15,976:INFO:Uploading results into container
2024-09-20 08:37:15,977:INFO:Uploading model into container now
2024-09-20 08:37:15,978:INFO:_master_model_container: 1
2024-09-20 08:37:15,979:INFO:_display_container: 2
2024-09-20 08:37:15,980:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-20 08:37:15,980:INFO:create_model() successfully completed......................................
2024-09-20 08:37:16,087:INFO:SubProcess create_model() end ==================================
2024-09-20 08:37:16,088:INFO:Creating metrics dataframe
2024-09-20 08:37:16,094:INFO:Initializing K Neighbors Classifier
2024-09-20 08:37:16,095:INFO:Total runtime is 0.09502021471659343 minutes
2024-09-20 08:37:16,098:INFO:SubProcess create_model() called ==================================
2024-09-20 08:37:16,098:INFO:Initializing create_model()
2024-09-20 08:37:16,098:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E4EC4EE010>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E4F48A0E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-20 08:37:16,098:INFO:Checking exceptions
2024-09-20 08:37:16,098:INFO:Importing libraries
2024-09-20 08:37:16,098:INFO:Copying training dataset
2024-09-20 08:37:16,112:INFO:Defining folds
2024-09-20 08:37:16,112:INFO:Declaring metric variables
2024-09-20 08:37:16,112:INFO:Importing untrained model
2024-09-20 08:37:16,112:INFO:K Neighbors Classifier Imported successfully
2024-09-20 08:37:16,127:INFO:Starting cross validation
2024-09-20 08:37:16,130:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-20 08:37:16,783:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:16,784:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:16,790:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:16,792:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:16,793:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:16,794:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:16,794:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:16,799:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:16,801:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:16,804:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:16,805:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:16,806:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:16,806:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:16,809:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:16,810:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:16,810:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:16,811:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:16,813:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:16,817:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:16,819:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:16,821:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:16,822:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:16,829:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:16,832:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:17,117:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:17,123:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:17,126:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:17,126:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:17,131:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:17,141:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:17,152:INFO:Calculating mean and std
2024-09-20 08:37:17,153:INFO:Creating metrics dataframe
2024-09-20 08:37:17,156:INFO:Uploading results into container
2024-09-20 08:37:17,157:INFO:Uploading model into container now
2024-09-20 08:37:17,157:INFO:_master_model_container: 2
2024-09-20 08:37:17,158:INFO:_display_container: 2
2024-09-20 08:37:17,159:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-09-20 08:37:17,159:INFO:create_model() successfully completed......................................
2024-09-20 08:37:17,264:INFO:SubProcess create_model() end ==================================
2024-09-20 08:37:17,264:INFO:Creating metrics dataframe
2024-09-20 08:37:17,277:INFO:Initializing Naive Bayes
2024-09-20 08:37:17,277:INFO:Total runtime is 0.11471538543701172 minutes
2024-09-20 08:37:17,281:INFO:SubProcess create_model() called ==================================
2024-09-20 08:37:17,282:INFO:Initializing create_model()
2024-09-20 08:37:17,282:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E4EC4EE010>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E4F48A0E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-20 08:37:17,282:INFO:Checking exceptions
2024-09-20 08:37:17,282:INFO:Importing libraries
2024-09-20 08:37:17,282:INFO:Copying training dataset
2024-09-20 08:37:17,298:INFO:Defining folds
2024-09-20 08:37:17,301:INFO:Declaring metric variables
2024-09-20 08:37:17,313:INFO:Importing untrained model
2024-09-20 08:37:17,315:INFO:Naive Bayes Imported successfully
2024-09-20 08:37:17,326:INFO:Starting cross validation
2024-09-20 08:37:17,328:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-20 08:37:17,748:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:17,752:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:17,756:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:17,758:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:17,762:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:17,763:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:17,764:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:17,767:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:17,768:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:17,770:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:17,771:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:17,773:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:17,776:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:17,777:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:17,782:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:17,783:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:17,785:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:17,786:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:17,793:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:17,796:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:17,801:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:17,810:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:17,821:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:18,013:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:18,023:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:18,023:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:18,023:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:18,023:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:18,033:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:18,053:INFO:Calculating mean and std
2024-09-20 08:37:18,053:INFO:Creating metrics dataframe
2024-09-20 08:37:18,053:INFO:Uploading results into container
2024-09-20 08:37:18,053:INFO:Uploading model into container now
2024-09-20 08:37:18,053:INFO:_master_model_container: 3
2024-09-20 08:37:18,053:INFO:_display_container: 2
2024-09-20 08:37:18,053:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-09-20 08:37:18,053:INFO:create_model() successfully completed......................................
2024-09-20 08:37:18,157:INFO:SubProcess create_model() end ==================================
2024-09-20 08:37:18,157:INFO:Creating metrics dataframe
2024-09-20 08:37:18,159:INFO:Initializing Decision Tree Classifier
2024-09-20 08:37:18,159:INFO:Total runtime is 0.12941078344980875 minutes
2024-09-20 08:37:18,159:INFO:SubProcess create_model() called ==================================
2024-09-20 08:37:18,159:INFO:Initializing create_model()
2024-09-20 08:37:18,159:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E4EC4EE010>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E4F48A0E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-20 08:37:18,159:INFO:Checking exceptions
2024-09-20 08:37:18,159:INFO:Importing libraries
2024-09-20 08:37:18,159:INFO:Copying training dataset
2024-09-20 08:37:18,176:INFO:Defining folds
2024-09-20 08:37:18,176:INFO:Declaring metric variables
2024-09-20 08:37:18,181:INFO:Importing untrained model
2024-09-20 08:37:18,181:INFO:Decision Tree Classifier Imported successfully
2024-09-20 08:37:18,192:INFO:Starting cross validation
2024-09-20 08:37:18,192:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-20 08:37:18,733:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:18,737:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:18,743:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:18,744:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:18,745:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:18,747:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:18,751:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:18,753:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:18,754:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:18,756:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:18,757:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:18,758:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:18,759:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:18,762:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:18,764:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:18,764:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:18,767:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:18,772:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:18,773:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:18,775:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:18,775:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:18,779:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:18,785:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:18,793:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:19,284:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:19,284:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:19,294:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:19,294:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:19,304:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:19,304:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:19,325:INFO:Calculating mean and std
2024-09-20 08:37:19,325:INFO:Creating metrics dataframe
2024-09-20 08:37:19,325:INFO:Uploading results into container
2024-09-20 08:37:19,325:INFO:Uploading model into container now
2024-09-20 08:37:19,325:INFO:_master_model_container: 4
2024-09-20 08:37:19,325:INFO:_display_container: 2
2024-09-20 08:37:19,325:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-09-20 08:37:19,325:INFO:create_model() successfully completed......................................
2024-09-20 08:37:19,428:INFO:SubProcess create_model() end ==================================
2024-09-20 08:37:19,429:INFO:Creating metrics dataframe
2024-09-20 08:37:19,444:INFO:Initializing SVM - Linear Kernel
2024-09-20 08:37:19,444:INFO:Total runtime is 0.1508301059405009 minutes
2024-09-20 08:37:19,458:INFO:SubProcess create_model() called ==================================
2024-09-20 08:37:19,459:INFO:Initializing create_model()
2024-09-20 08:37:19,459:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E4EC4EE010>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E4F48A0E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-20 08:37:19,459:INFO:Checking exceptions
2024-09-20 08:37:19,460:INFO:Importing libraries
2024-09-20 08:37:19,460:INFO:Copying training dataset
2024-09-20 08:37:19,478:INFO:Defining folds
2024-09-20 08:37:19,479:INFO:Declaring metric variables
2024-09-20 08:37:19,479:INFO:Importing untrained model
2024-09-20 08:37:19,491:INFO:SVM - Linear Kernel Imported successfully
2024-09-20 08:37:19,498:INFO:Starting cross validation
2024-09-20 08:37:19,498:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-20 08:37:20,109:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:20,113:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:20,121:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:20,124:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:20,133:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:20,136:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:20,137:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:20,149:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:20,159:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:20,160:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:20,161:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:20,162:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:20,170:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:20,172:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:20,173:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:20,181:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:20,185:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:20,196:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:20,196:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:20,213:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:20,224:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:20,234:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:20,241:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:20,603:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:20,614:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:20,625:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:20,659:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:20,675:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:20,679:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:20,700:INFO:Calculating mean and std
2024-09-20 08:37:20,700:INFO:Creating metrics dataframe
2024-09-20 08:37:20,700:INFO:Uploading results into container
2024-09-20 08:37:20,700:INFO:Uploading model into container now
2024-09-20 08:37:20,700:INFO:_master_model_container: 5
2024-09-20 08:37:20,700:INFO:_display_container: 2
2024-09-20 08:37:20,705:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-09-20 08:37:20,706:INFO:create_model() successfully completed......................................
2024-09-20 08:37:20,822:INFO:SubProcess create_model() end ==================================
2024-09-20 08:37:20,822:INFO:Creating metrics dataframe
2024-09-20 08:37:20,838:INFO:Initializing Ridge Classifier
2024-09-20 08:37:20,838:INFO:Total runtime is 0.17406387329101564 minutes
2024-09-20 08:37:20,838:INFO:SubProcess create_model() called ==================================
2024-09-20 08:37:20,838:INFO:Initializing create_model()
2024-09-20 08:37:20,838:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E4EC4EE010>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E4F48A0E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-20 08:37:20,838:INFO:Checking exceptions
2024-09-20 08:37:20,838:INFO:Importing libraries
2024-09-20 08:37:20,838:INFO:Copying training dataset
2024-09-20 08:37:20,859:INFO:Defining folds
2024-09-20 08:37:20,859:INFO:Declaring metric variables
2024-09-20 08:37:20,859:INFO:Importing untrained model
2024-09-20 08:37:20,859:INFO:Ridge Classifier Imported successfully
2024-09-20 08:37:20,875:INFO:Starting cross validation
2024-09-20 08:37:20,875:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-20 08:37:21,338:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:21,343:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:21,343:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:21,343:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:21,349:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:21,349:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:21,349:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:21,349:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:21,349:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:21,360:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:21,360:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:21,360:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:21,360:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:21,360:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:21,360:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:21,360:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:21,369:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:21,369:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:21,369:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:21,379:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:21,379:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:21,379:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:21,382:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:21,691:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:21,702:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:21,702:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:21,702:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:21,716:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:21,725:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:21,743:INFO:Calculating mean and std
2024-09-20 08:37:21,743:INFO:Creating metrics dataframe
2024-09-20 08:37:21,743:INFO:Uploading results into container
2024-09-20 08:37:21,743:INFO:Uploading model into container now
2024-09-20 08:37:21,743:INFO:_master_model_container: 6
2024-09-20 08:37:21,743:INFO:_display_container: 2
2024-09-20 08:37:21,743:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-09-20 08:37:21,743:INFO:create_model() successfully completed......................................
2024-09-20 08:37:21,840:INFO:SubProcess create_model() end ==================================
2024-09-20 08:37:21,840:INFO:Creating metrics dataframe
2024-09-20 08:37:21,855:INFO:Initializing Random Forest Classifier
2024-09-20 08:37:21,855:INFO:Total runtime is 0.19102187156677247 minutes
2024-09-20 08:37:21,861:INFO:SubProcess create_model() called ==================================
2024-09-20 08:37:21,861:INFO:Initializing create_model()
2024-09-20 08:37:21,861:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E4EC4EE010>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E4F48A0E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-20 08:37:21,862:INFO:Checking exceptions
2024-09-20 08:37:21,862:INFO:Importing libraries
2024-09-20 08:37:21,862:INFO:Copying training dataset
2024-09-20 08:37:21,875:INFO:Defining folds
2024-09-20 08:37:21,875:INFO:Declaring metric variables
2024-09-20 08:37:21,877:INFO:Importing untrained model
2024-09-20 08:37:21,877:INFO:Random Forest Classifier Imported successfully
2024-09-20 08:37:21,891:INFO:Starting cross validation
2024-09-20 08:37:21,893:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-20 08:37:24,009:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:24,009:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:24,010:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:24,010:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:24,020:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:24,021:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:24,021:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:24,038:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:24,039:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:24,040:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:24,041:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:24,051:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:24,060:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:24,068:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:24,070:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:24,080:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:24,088:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:24,110:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:24,122:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:24,132:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:24,138:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:24,146:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:24,154:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:24,932:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:24,932:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:24,943:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:24,953:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:24,963:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:24,973:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:24,994:INFO:Calculating mean and std
2024-09-20 08:37:24,994:INFO:Creating metrics dataframe
2024-09-20 08:37:24,994:INFO:Uploading results into container
2024-09-20 08:37:24,994:INFO:Uploading model into container now
2024-09-20 08:37:24,994:INFO:_master_model_container: 7
2024-09-20 08:37:24,994:INFO:_display_container: 2
2024-09-20 08:37:24,994:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-09-20 08:37:24,994:INFO:create_model() successfully completed......................................
2024-09-20 08:37:25,105:INFO:SubProcess create_model() end ==================================
2024-09-20 08:37:25,105:INFO:Creating metrics dataframe
2024-09-20 08:37:25,130:INFO:Initializing Quadratic Discriminant Analysis
2024-09-20 08:37:25,130:INFO:Total runtime is 0.2455930511156718 minutes
2024-09-20 08:37:25,133:INFO:SubProcess create_model() called ==================================
2024-09-20 08:37:25,134:INFO:Initializing create_model()
2024-09-20 08:37:25,134:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E4EC4EE010>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E4F48A0E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-20 08:37:25,134:INFO:Checking exceptions
2024-09-20 08:37:25,134:INFO:Importing libraries
2024-09-20 08:37:25,134:INFO:Copying training dataset
2024-09-20 08:37:25,144:INFO:Defining folds
2024-09-20 08:37:25,144:INFO:Declaring metric variables
2024-09-20 08:37:25,161:INFO:Importing untrained model
2024-09-20 08:37:25,161:INFO:Quadratic Discriminant Analysis Imported successfully
2024-09-20 08:37:25,177:INFO:Starting cross validation
2024-09-20 08:37:25,179:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-20 08:37:25,554:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-20 08:37:25,554:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-20 08:37:25,557:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-20 08:37:25,572:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-20 08:37:25,572:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-20 08:37:25,578:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-20 08:37:25,578:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-20 08:37:25,580:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-20 08:37:25,655:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:25,659:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:25,666:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:25,666:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:25,666:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:25,666:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:25,666:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:25,675:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:25,675:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:25,675:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:25,675:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:25,675:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:25,675:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:25,685:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:25,685:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:25,685:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:25,685:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:25,696:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:25,696:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:25,696:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:25,696:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:25,696:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:25,706:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:25,990:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-20 08:37:26,000:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-20 08:37:26,071:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:26,071:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:26,084:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:26,086:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:26,091:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:26,091:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:26,121:INFO:Calculating mean and std
2024-09-20 08:37:26,121:INFO:Creating metrics dataframe
2024-09-20 08:37:26,121:INFO:Uploading results into container
2024-09-20 08:37:26,121:INFO:Uploading model into container now
2024-09-20 08:37:26,121:INFO:_master_model_container: 8
2024-09-20 08:37:26,121:INFO:_display_container: 2
2024-09-20 08:37:26,121:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-09-20 08:37:26,121:INFO:create_model() successfully completed......................................
2024-09-20 08:37:26,246:INFO:SubProcess create_model() end ==================================
2024-09-20 08:37:26,246:INFO:Creating metrics dataframe
2024-09-20 08:37:26,258:INFO:Initializing Ada Boost Classifier
2024-09-20 08:37:26,258:INFO:Total runtime is 0.264400593439738 minutes
2024-09-20 08:37:26,258:INFO:SubProcess create_model() called ==================================
2024-09-20 08:37:26,258:INFO:Initializing create_model()
2024-09-20 08:37:26,258:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E4EC4EE010>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E4F48A0E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-20 08:37:26,258:INFO:Checking exceptions
2024-09-20 08:37:26,258:INFO:Importing libraries
2024-09-20 08:37:26,258:INFO:Copying training dataset
2024-09-20 08:37:26,278:INFO:Defining folds
2024-09-20 08:37:26,278:INFO:Declaring metric variables
2024-09-20 08:37:26,278:INFO:Importing untrained model
2024-09-20 08:37:26,292:INFO:Ada Boost Classifier Imported successfully
2024-09-20 08:37:26,308:INFO:Starting cross validation
2024-09-20 08:37:26,309:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-20 08:37:26,645:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-20 08:37:26,660:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-20 08:37:26,660:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-20 08:37:26,668:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-20 08:37:26,677:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-20 08:37:26,679:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-20 08:37:26,690:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-20 08:37:26,692:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-20 08:37:27,381:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:27,402:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:27,411:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:27,413:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:27,414:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:27,419:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:27,420:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:27,422:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:27,425:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:27,425:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:27,429:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:27,430:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:27,432:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:27,433:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:27,435:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:27,436:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:27,441:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:27,441:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:27,445:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:27,445:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:27,445:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:27,453:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:27,455:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:27,463:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:27,710:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-20 08:37:27,741:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-20 08:37:28,321:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:28,321:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:28,331:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:28,331:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:28,342:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:28,342:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:28,362:INFO:Calculating mean and std
2024-09-20 08:37:28,362:INFO:Creating metrics dataframe
2024-09-20 08:37:28,362:INFO:Uploading results into container
2024-09-20 08:37:28,362:INFO:Uploading model into container now
2024-09-20 08:37:28,362:INFO:_master_model_container: 9
2024-09-20 08:37:28,362:INFO:_display_container: 2
2024-09-20 08:37:28,362:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-09-20 08:37:28,362:INFO:create_model() successfully completed......................................
2024-09-20 08:37:28,474:INFO:SubProcess create_model() end ==================================
2024-09-20 08:37:28,474:INFO:Creating metrics dataframe
2024-09-20 08:37:28,484:INFO:Initializing Gradient Boosting Classifier
2024-09-20 08:37:28,484:INFO:Total runtime is 0.3014971256256104 minutes
2024-09-20 08:37:28,487:INFO:SubProcess create_model() called ==================================
2024-09-20 08:37:28,488:INFO:Initializing create_model()
2024-09-20 08:37:28,488:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E4EC4EE010>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E4F48A0E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-20 08:37:28,488:INFO:Checking exceptions
2024-09-20 08:37:28,488:INFO:Importing libraries
2024-09-20 08:37:28,488:INFO:Copying training dataset
2024-09-20 08:37:28,496:INFO:Defining folds
2024-09-20 08:37:28,496:INFO:Declaring metric variables
2024-09-20 08:37:28,501:INFO:Importing untrained model
2024-09-20 08:37:28,501:INFO:Gradient Boosting Classifier Imported successfully
2024-09-20 08:37:28,508:INFO:Starting cross validation
2024-09-20 08:37:28,508:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-20 08:37:30,561:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:30,562:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:30,563:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:30,565:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:30,573:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:30,574:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:30,575:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:30,583:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:30,583:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:30,585:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:30,586:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:30,610:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:30,610:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:30,620:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:30,630:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:30,635:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:30,636:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:30,642:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:30,646:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:30,657:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:30,660:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:30,670:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:30,681:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:32,569:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:32,580:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:32,591:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:32,591:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:32,609:INFO:Calculating mean and std
2024-09-20 08:37:32,609:INFO:Creating metrics dataframe
2024-09-20 08:37:32,616:INFO:Uploading results into container
2024-09-20 08:37:32,617:INFO:Uploading model into container now
2024-09-20 08:37:32,617:INFO:_master_model_container: 10
2024-09-20 08:37:32,618:INFO:_display_container: 2
2024-09-20 08:37:32,619:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-09-20 08:37:32,619:INFO:create_model() successfully completed......................................
2024-09-20 08:37:32,724:INFO:SubProcess create_model() end ==================================
2024-09-20 08:37:32,724:INFO:Creating metrics dataframe
2024-09-20 08:37:32,740:INFO:Initializing Linear Discriminant Analysis
2024-09-20 08:37:32,740:INFO:Total runtime is 0.3724376956621806 minutes
2024-09-20 08:37:32,740:INFO:SubProcess create_model() called ==================================
2024-09-20 08:37:32,740:INFO:Initializing create_model()
2024-09-20 08:37:32,740:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E4EC4EE010>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E4F48A0E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-20 08:37:32,740:INFO:Checking exceptions
2024-09-20 08:37:32,740:INFO:Importing libraries
2024-09-20 08:37:32,740:INFO:Copying training dataset
2024-09-20 08:37:32,759:INFO:Defining folds
2024-09-20 08:37:32,760:INFO:Declaring metric variables
2024-09-20 08:37:32,763:INFO:Importing untrained model
2024-09-20 08:37:32,763:INFO:Linear Discriminant Analysis Imported successfully
2024-09-20 08:37:32,777:INFO:Starting cross validation
2024-09-20 08:37:32,777:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-20 08:37:33,285:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:33,285:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:33,285:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:33,285:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:33,285:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:33,295:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:33,295:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:33,295:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:33,295:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:33,295:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:33,295:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:33,295:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:33,305:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:33,305:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:33,305:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:33,305:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:33,305:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:33,305:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:33,305:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:33,315:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:33,317:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:33,317:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:33,698:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:33,699:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:33,699:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:33,709:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:33,719:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:33,719:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:33,739:INFO:Calculating mean and std
2024-09-20 08:37:33,739:INFO:Creating metrics dataframe
2024-09-20 08:37:33,739:INFO:Uploading results into container
2024-09-20 08:37:33,739:INFO:Uploading model into container now
2024-09-20 08:37:33,739:INFO:_master_model_container: 11
2024-09-20 08:37:33,739:INFO:_display_container: 2
2024-09-20 08:37:33,739:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-09-20 08:37:33,739:INFO:create_model() successfully completed......................................
2024-09-20 08:37:33,857:INFO:SubProcess create_model() end ==================================
2024-09-20 08:37:33,857:INFO:Creating metrics dataframe
2024-09-20 08:37:33,874:INFO:Initializing Extra Trees Classifier
2024-09-20 08:37:33,874:INFO:Total runtime is 0.39133816957473755 minutes
2024-09-20 08:37:33,879:INFO:SubProcess create_model() called ==================================
2024-09-20 08:37:33,880:INFO:Initializing create_model()
2024-09-20 08:37:33,880:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E4EC4EE010>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E4F48A0E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-20 08:37:33,880:INFO:Checking exceptions
2024-09-20 08:37:33,880:INFO:Importing libraries
2024-09-20 08:37:33,881:INFO:Copying training dataset
2024-09-20 08:37:33,890:INFO:Defining folds
2024-09-20 08:37:33,891:INFO:Declaring metric variables
2024-09-20 08:37:33,893:INFO:Importing untrained model
2024-09-20 08:37:33,893:INFO:Extra Trees Classifier Imported successfully
2024-09-20 08:37:33,900:INFO:Starting cross validation
2024-09-20 08:37:33,909:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-20 08:37:36,042:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:36,046:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:36,047:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:36,053:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:36,059:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:36,060:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:36,062:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:36,071:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:36,075:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:36,076:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:36,104:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:36,141:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:36,150:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:36,155:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:36,159:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:36,160:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:36,165:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:36,171:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:36,175:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:36,180:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:36,186:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:36,194:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:36,203:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:37,100:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:37,111:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:37,111:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:37,121:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:37,131:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:37,141:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:37,161:INFO:Calculating mean and std
2024-09-20 08:37:37,163:INFO:Creating metrics dataframe
2024-09-20 08:37:37,166:INFO:Uploading results into container
2024-09-20 08:37:37,166:INFO:Uploading model into container now
2024-09-20 08:37:37,167:INFO:_master_model_container: 12
2024-09-20 08:37:37,167:INFO:_display_container: 2
2024-09-20 08:37:37,168:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-09-20 08:37:37,168:INFO:create_model() successfully completed......................................
2024-09-20 08:37:37,283:INFO:SubProcess create_model() end ==================================
2024-09-20 08:37:37,283:INFO:Creating metrics dataframe
2024-09-20 08:37:37,307:INFO:Initializing Light Gradient Boosting Machine
2024-09-20 08:37:37,308:INFO:Total runtime is 0.44856658776601155 minutes
2024-09-20 08:37:37,312:INFO:SubProcess create_model() called ==================================
2024-09-20 08:37:37,313:INFO:Initializing create_model()
2024-09-20 08:37:37,313:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E4EC4EE010>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E4F48A0E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-20 08:37:37,313:INFO:Checking exceptions
2024-09-20 08:37:37,313:INFO:Importing libraries
2024-09-20 08:37:37,313:INFO:Copying training dataset
2024-09-20 08:37:37,329:INFO:Defining folds
2024-09-20 08:37:37,329:INFO:Declaring metric variables
2024-09-20 08:37:37,329:INFO:Importing untrained model
2024-09-20 08:37:37,338:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-20 08:37:37,347:INFO:Starting cross validation
2024-09-20 08:37:37,347:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-20 08:37:38,532:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:38,542:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:38,543:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:38,547:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:38,547:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:38,558:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:38,563:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:38,565:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:38,576:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:38,578:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:38,593:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:38,601:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:38,694:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:38,709:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:38,714:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:38,735:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:38,745:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:38,759:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:38,925:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:38,931:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:38,940:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:38,945:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:38,951:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:38,962:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:39,242:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:39,242:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:39,252:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:39,255:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:39,262:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:39,265:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:39,283:INFO:Calculating mean and std
2024-09-20 08:37:39,285:INFO:Creating metrics dataframe
2024-09-20 08:37:39,285:INFO:Uploading results into container
2024-09-20 08:37:39,285:INFO:Uploading model into container now
2024-09-20 08:37:39,285:INFO:_master_model_container: 13
2024-09-20 08:37:39,285:INFO:_display_container: 2
2024-09-20 08:37:39,290:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-20 08:37:39,290:INFO:create_model() successfully completed......................................
2024-09-20 08:37:39,390:INFO:SubProcess create_model() end ==================================
2024-09-20 08:37:39,390:INFO:Creating metrics dataframe
2024-09-20 08:37:39,411:INFO:Initializing Dummy Classifier
2024-09-20 08:37:39,412:INFO:Total runtime is 0.48363937934239704 minutes
2024-09-20 08:37:39,416:INFO:SubProcess create_model() called ==================================
2024-09-20 08:37:39,417:INFO:Initializing create_model()
2024-09-20 08:37:39,417:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E4EC4EE010>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E4F48A0E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-20 08:37:39,417:INFO:Checking exceptions
2024-09-20 08:37:39,417:INFO:Importing libraries
2024-09-20 08:37:39,417:INFO:Copying training dataset
2024-09-20 08:37:39,431:INFO:Defining folds
2024-09-20 08:37:39,433:INFO:Declaring metric variables
2024-09-20 08:37:39,441:INFO:Importing untrained model
2024-09-20 08:37:39,445:INFO:Dummy Classifier Imported successfully
2024-09-20 08:37:39,445:INFO:Starting cross validation
2024-09-20 08:37:39,460:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-20 08:37:39,974:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:39,975:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:39,976:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:39,984:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:39,984:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:39,984:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:39,992:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:39,993:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-20 08:37:39,993:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-20 08:37:39,993:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:39,993:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-20 08:37:39,993:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:39,993:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:40,001:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:40,001:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:40,001:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-20 08:37:40,001:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:40,001:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:40,001:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:40,010:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:40,010:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:40,010:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:40,017:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:40,017:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:40,017:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-20 08:37:40,021:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-20 08:37:40,021:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-20 08:37:40,024:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-20 08:37:40,025:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:40,026:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:40,026:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:40,026:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:40,330:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:40,341:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:40,341:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:40,341:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-20 08:37:40,351:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:40,351:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:40,361:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-20 08:37:40,361:WARNING:C:\Users\joji\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-20 08:37:40,381:INFO:Calculating mean and std
2024-09-20 08:37:40,381:INFO:Creating metrics dataframe
2024-09-20 08:37:40,381:INFO:Uploading results into container
2024-09-20 08:37:40,381:INFO:Uploading model into container now
2024-09-20 08:37:40,381:INFO:_master_model_container: 14
2024-09-20 08:37:40,381:INFO:_display_container: 2
2024-09-20 08:37:40,381:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-09-20 08:37:40,381:INFO:create_model() successfully completed......................................
2024-09-20 08:37:40,479:INFO:SubProcess create_model() end ==================================
2024-09-20 08:37:40,480:INFO:Creating metrics dataframe
2024-09-20 08:37:40,525:INFO:Initializing create_model()
2024-09-20 08:37:40,526:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E4EC4EE010>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-20 08:37:40,526:INFO:Checking exceptions
2024-09-20 08:37:40,529:INFO:Importing libraries
2024-09-20 08:37:40,529:INFO:Copying training dataset
2024-09-20 08:37:40,541:INFO:Defining folds
2024-09-20 08:37:40,541:INFO:Declaring metric variables
2024-09-20 08:37:40,542:INFO:Importing untrained model
2024-09-20 08:37:40,542:INFO:Declaring custom model
2024-09-20 08:37:40,542:INFO:Gradient Boosting Classifier Imported successfully
2024-09-20 08:37:40,542:INFO:Cross validation set to False
2024-09-20 08:37:40,542:INFO:Fitting Model
2024-09-20 08:37:42,154:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-09-20 08:37:42,154:INFO:create_model() successfully completed......................................
2024-09-20 08:37:42,248:INFO:Initializing create_model()
2024-09-20 08:37:42,248:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E4EC4EE010>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-20 08:37:42,255:INFO:Checking exceptions
2024-09-20 08:37:42,257:INFO:Importing libraries
2024-09-20 08:37:42,257:INFO:Copying training dataset
2024-09-20 08:37:42,257:INFO:Defining folds
2024-09-20 08:37:42,273:INFO:Declaring metric variables
2024-09-20 08:37:42,274:INFO:Importing untrained model
2024-09-20 08:37:42,274:INFO:Declaring custom model
2024-09-20 08:37:42,274:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-20 08:37:42,274:INFO:Cross validation set to False
2024-09-20 08:37:42,274:INFO:Fitting Model
2024-09-20 08:37:42,502:INFO:[LightGBM] [Info] Number of positive: 4231, number of negative: 4698
2024-09-20 08:37:42,502:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001148 seconds.
2024-09-20 08:37:42,502:INFO:You can set `force_row_wise=true` to remove the overhead.
2024-09-20 08:37:42,502:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2024-09-20 08:37:42,502:INFO:[LightGBM] [Info] Total Bins 790
2024-09-20 08:37:42,502:INFO:[LightGBM] [Info] Number of data points in the train set: 8929, number of used features: 47
2024-09-20 08:37:42,502:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.473849 -> initscore=-0.104699
2024-09-20 08:37:42,502:INFO:[LightGBM] [Info] Start training from score -0.104699
2024-09-20 08:37:42,578:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-20 08:37:42,578:INFO:create_model() successfully completed......................................
2024-09-20 08:37:42,689:INFO:Initializing create_model()
2024-09-20 08:37:42,689:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E4EC4EE010>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-20 08:37:42,689:INFO:Checking exceptions
2024-09-20 08:37:42,705:INFO:Importing libraries
2024-09-20 08:37:42,705:INFO:Copying training dataset
2024-09-20 08:37:42,710:INFO:Defining folds
2024-09-20 08:37:42,710:INFO:Declaring metric variables
2024-09-20 08:37:42,710:INFO:Importing untrained model
2024-09-20 08:37:42,710:INFO:Declaring custom model
2024-09-20 08:37:42,710:INFO:Random Forest Classifier Imported successfully
2024-09-20 08:37:42,710:INFO:Cross validation set to False
2024-09-20 08:37:42,710:INFO:Fitting Model
2024-09-20 08:37:43,264:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-09-20 08:37:43,264:INFO:create_model() successfully completed......................................
2024-09-20 08:37:43,394:INFO:_master_model_container: 14
2024-09-20 08:37:43,394:INFO:_display_container: 2
2024-09-20 08:37:43,394:INFO:[GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)]
2024-09-20 08:37:43,394:INFO:compare_models() successfully completed......................................
2024-09-20 08:37:49,597:INFO:Initializing get_config()
2024-09-20 08:37:49,597:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E4EC4EE010>, variable=X_train_transformed)
2024-09-20 08:37:49,676:INFO:Variable: X_train returned as             age  job_management  job_housemaid  job_self-employed  \
6270   0.060709        1.840575      -0.159308          -0.194663   
10963 -0.191067       -0.543309       6.277158          -0.194663   
9909   0.144635       -0.543309      -0.159308           5.137078   
2143  -1.366022       -0.543309      -0.159308          -0.194663   
4869   2.662397       -0.543309      -0.159308          -0.194663   
...         ...             ...            ...                ...   
3011   1.403516        1.840575      -0.159308          -0.194663   
10609 -1.282097       -0.543309      -0.159308          -0.194663   
7504  -0.694619       -0.543309      -0.159308          -0.194663   
8795   0.648187       -0.543309      -0.159308          -0.194663   
9250   0.480336        1.840575      -0.159308          -0.194663   

       job_student  job_retired  job_admin.  job_blue-collar  job_services  \
6270     -0.180920    -0.275287   -0.369376        -0.456886     -0.299277   
10963    -0.180920    -0.275287   -0.369376        -0.456886     -0.299277   
9909     -0.180920    -0.275287   -0.369376        -0.456886     -0.299277   
2143      5.527317    -0.275287   -0.369376        -0.456886     -0.299277   
4869     -0.180920     3.632568   -0.369376        -0.456886     -0.299277   
...            ...          ...         ...              ...           ...   
3011     -0.180920    -0.275287   -0.369376        -0.456886     -0.299277   
10609     5.527317    -0.275287   -0.369376        -0.456886     -0.299277   
7504     -0.180920    -0.275287    2.707266        -0.456886     -0.299277   
8795     -0.180920    -0.275287   -0.369376        -0.456886     -0.299277   
9250     -0.180920    -0.275287   -0.369376        -0.456886     -0.299277   

       job_technician  ...  month_oct  month_sep  month_dec  campaign  \
6270        -0.446642  ...  -0.191857  -0.172838  -0.099768 -0.016578   
10963       -0.446642  ...  -0.191857  -0.172838  -0.099768  0.584163   
9909        -0.446642  ...  -0.191857  -0.172838  -0.099768 -0.863274   
2143        -0.446642  ...  -0.191857  -0.172838  -0.099768 -0.016578   
4869        -0.446642  ...  -0.191857  -0.172838  -0.099768 -0.863274   
...               ...  ...        ...        ...        ...       ...   
3011        -0.446642  ...  -0.191857  -0.172838  10.023268 -0.863274   
10609       -0.446642  ...  -0.191857  -0.172838  -0.099768 -0.016578   
7504        -0.446642  ...  -0.191857  -0.172838  -0.099768  0.584163   
8795         2.238927  ...  -0.191857  -0.172838  -0.099768  1.050134   
9250        -0.446642  ...  -0.191857  -0.172838  -0.099768 -0.016578   

          pdays  previous  poutcome_unknown  poutcome_failure  \
6270  -0.573829 -0.519928          0.580756         -0.355133   
10963 -0.573829 -0.519928          0.580756         -0.355133   
9909  -0.573829 -0.519928          0.580756         -0.355133   
2143  -0.573829 -0.519928          0.580756         -0.355133   
4869  -0.573829 -0.519928          0.580756         -0.355133   
...         ...       ...               ...               ...   
3011   1.750123  1.740854         -1.721894         -0.355133   
10609 -0.573829 -0.519928          0.580756         -0.355133   
7504   2.052437  1.740854         -1.721894         -0.355133   
8795  -0.573829 -0.519928          0.580756         -0.355133   
9250  -0.573829 -0.519928          0.580756         -0.355133   

       poutcome_success  poutcome_other  
6270          -0.322038       -0.220220  
10963         -0.322038       -0.220220  
9909          -0.322038       -0.220220  
2143          -0.322038       -0.220220  
4869          -0.322038       -0.220220  
...                 ...             ...  
3011           3.105226       -0.220220  
10609         -0.322038       -0.220220  
7504          -0.322038        4.540909  
8795          -0.322038       -0.220220  
9250          -0.322038       -0.220220  

[8929 rows x 47 columns]
2024-09-20 08:37:49,676:INFO:get_config() successfully completed......................................
2024-09-20 08:37:49,676:INFO:Initializing get_config()
2024-09-20 08:37:49,676:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E4EC4EE010>, variable=y_train_transformed)
2024-09-20 08:37:49,707:INFO:Variable: y_train returned as 6270     0
10963    0
9909     0
2143     1
4869     1
        ..
3011     1
10609    0
7504     0
8795     0
9250     0
Name: deposit, Length: 8929, dtype: int32
2024-09-20 08:37:49,707:INFO:get_config() successfully completed......................................
2024-09-20 08:37:49,707:INFO:Initializing get_config()
2024-09-20 08:37:49,707:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E4EC4EE010>, variable=X_test_transformed)
2024-09-20 08:37:49,738:INFO:Variable: X_test returned as            age  job_management  job_housemaid  job_self-employed  job_student  \
8368 -1.198172       -0.543309      -0.159308          -0.194663     -0.18092   
9300  1.571366       -0.543309      -0.159308          -0.194663     -0.18092   
5254  1.739217        1.840575      -0.159308          -0.194663     -0.18092   
1581  1.823143       -0.543309      -0.159308          -0.194663     -0.18092   
9123 -0.778545       -0.543309      -0.159308          -0.194663     -0.18092   
...        ...             ...            ...                ...          ...   
6546 -0.107141       -0.543309      -0.159308          -0.194663     -0.18092   
242   0.396411       -0.543309      -0.159308          -0.194663     -0.18092   
6928 -0.274992       -0.543309      -0.159308          -0.194663     -0.18092   
142  -0.274992       -0.543309      -0.159308          -0.194663     -0.18092   
4632 -0.610694       -0.543309      -0.159308          -0.194663     -0.18092   

      job_retired  job_admin.  job_blue-collar  job_services  job_technician  \
8368    -0.275287   -0.369376        -0.456886      3.341384       -0.446642   
9300     3.632568   -0.369376        -0.456886     -0.299277       -0.446642   
5254    -0.275287   -0.369376        -0.456886     -0.299277       -0.446642   
1581     3.632568   -0.369376        -0.456886     -0.299277       -0.446642   
9123    -0.275287   -0.369376        -0.456886     -0.299277        2.238927   
...           ...         ...              ...           ...             ...   
6546    -0.275287   -0.369376        -0.456886      3.341384       -0.446642   
242     -0.275287    2.707266        -0.456886     -0.299277       -0.446642   
6928    -0.275287   -0.369376         2.188728     -0.299277       -0.446642   
142     -0.275287    2.707266        -0.456886     -0.299277       -0.446642   
4632    -0.275287   -0.369376        -0.456886     -0.299277        2.238927   

      ...  month_oct  month_sep  month_dec  campaign     pdays  previous  \
8368  ...  -0.191857  -0.172838  -0.099768  1.050134 -0.573829 -0.519928   
9300  ...  -0.191857  -0.172838  -0.099768 -0.863274  1.419175  1.740854   
5254  ...  -0.191857   5.785750  -0.099768 -0.863274  1.940454  1.740854   
1581  ...  -0.191857  -0.172838  -0.099768  1.050134 -0.573829 -0.519928   
9123  ...  -0.191857  -0.172838  -0.099768  0.584163 -0.573829 -0.519928   
...   ...        ...        ...        ...       ...       ...       ...   
6546  ...  -0.191857  -0.172838  -0.099768 -0.016578 -0.573829 -0.519928   
242   ...  -0.191857  -0.172838  -0.099768 -0.016578 -0.573829 -0.519928   
6928  ...  -0.191857  -0.172838  -0.099768 -0.016578 -0.573829 -0.519928   
142   ...  -0.191857  -0.172838  -0.099768 -0.016578 -0.573829 -0.519928   
4632  ...  -0.191857  -0.172838  -0.099768 -0.863274  1.224576  0.610463   

      poutcome_unknown  poutcome_failure  poutcome_success  poutcome_other  
8368          0.580756         -0.355133         -0.322038       -0.220220  
9300         -1.721894         -0.355133         -0.322038        4.540909  
5254         -1.721894         -0.355133         -0.322038        4.540909  
1581          0.580756         -0.355133         -0.322038       -0.220220  
9123          0.580756         -0.355133         -0.322038       -0.220220  
...                ...               ...               ...             ...  
6546          0.580756         -0.355133         -0.322038       -0.220220  
242           0.580756         -0.355133         -0.322038       -0.220220  
6928          0.580756         -0.355133         -0.322038       -0.220220  
142           0.580756         -0.355133         -0.322038       -0.220220  
4632         -1.721894         -0.355133         -0.322038        4.540909  

[2233 rows x 47 columns]
2024-09-20 08:37:49,738:INFO:get_config() successfully completed......................................
2024-09-20 08:37:49,738:INFO:Initializing get_config()
2024-09-20 08:37:49,738:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E4EC4EE010>, variable=y_test_transformed)
2024-09-20 08:37:49,770:INFO:Variable: y_test returned as 8368    0
9300    0
5254    1
1581    1
9123    0
       ..
6546    0
242     1
6928    0
142     1
4632    1
Name: deposit, Length: 2233, dtype: int32
2024-09-20 08:37:49,770:INFO:get_config() successfully completed......................................
