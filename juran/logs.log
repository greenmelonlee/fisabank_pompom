2024-09-19 15:13:42,674:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-19 15:13:42,674:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-19 15:13:42,674:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-19 15:13:42,674:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-19 15:18:20,100:INFO:PyCaret ClassificationExperiment
2024-09-19 15:18:20,101:INFO:Logging name: clf-default-name
2024-09-19 15:18:20,101:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-19 15:18:20,101:INFO:version 3.3.2
2024-09-19 15:18:20,101:INFO:Initializing setup()
2024-09-19 15:18:20,101:INFO:self.USI: 8d47
2024-09-19 15:18:20,101:INFO:self._variable_keys: {'n_jobs_param', 'data', 'X_train', 'seed', 'X', 'fold_groups_param', 'memory', 'fold_shuffle_param', 'gpu_param', 'X_test', 'idx', 'fix_imbalance', '_available_plots', 'y_train', 'y_test', '_ml_usecase', 'fold_generator', 'logging_param', 'log_plots_param', 'exp_name_log', 'is_multiclass', 'exp_id', 'target_param', 'gpu_n_jobs_param', 'y', 'USI', 'pipeline', 'html_param'}
2024-09-19 15:18:20,101:INFO:Checking environment
2024-09-19 15:18:20,101:INFO:python_version: 3.11.9
2024-09-19 15:18:20,101:INFO:python_build: ('main', 'Apr 19 2024 16:40:41')
2024-09-19 15:18:20,101:INFO:machine: AMD64
2024-09-19 15:18:20,101:INFO:platform: Windows-10-10.0.19045-SP0
2024-09-19 15:18:20,106:INFO:Memory: svmem(total=16969424896, available=5270126592, percent=68.9, used=11699298304, free=5270126592)
2024-09-19 15:18:20,106:INFO:Physical Core: 4
2024-09-19 15:18:20,106:INFO:Logical Core: 8
2024-09-19 15:18:20,106:INFO:Checking libraries
2024-09-19 15:18:20,106:INFO:System:
2024-09-19 15:18:20,106:INFO:    python: 3.11.9 | packaged by Anaconda, Inc. | (main, Apr 19 2024, 16:40:41) [MSC v.1916 64 bit (AMD64)]
2024-09-19 15:18:20,106:INFO:executable: C:\Users\juran\anaconda3\envs\myenv\python.exe
2024-09-19 15:18:20,107:INFO:   machine: Windows-10-10.0.19045-SP0
2024-09-19 15:18:20,107:INFO:PyCaret required dependencies:
2024-09-19 15:18:20,146:INFO:                 pip: 24.2
2024-09-19 15:18:20,146:INFO:          setuptools: 72.1.0
2024-09-19 15:18:20,146:INFO:             pycaret: 3.3.2
2024-09-19 15:18:20,146:INFO:             IPython: 8.26.0
2024-09-19 15:18:20,146:INFO:          ipywidgets: 8.1.5
2024-09-19 15:18:20,147:INFO:                tqdm: 4.66.5
2024-09-19 15:18:20,147:INFO:               numpy: 1.26.4
2024-09-19 15:18:20,147:INFO:              pandas: 1.5.3
2024-09-19 15:18:20,147:INFO:              jinja2: 3.1.4
2024-09-19 15:18:20,147:INFO:               scipy: 1.11.4
2024-09-19 15:18:20,147:INFO:              joblib: 1.3.2
2024-09-19 15:18:20,147:INFO:             sklearn: 1.4.2
2024-09-19 15:18:20,147:INFO:                pyod: 2.0.2
2024-09-19 15:18:20,147:INFO:            imblearn: 0.12.3
2024-09-19 15:18:20,147:INFO:   category_encoders: 2.6.3
2024-09-19 15:18:20,147:INFO:            lightgbm: 4.5.0
2024-09-19 15:18:20,148:INFO:               numba: 0.60.0
2024-09-19 15:18:20,148:INFO:            requests: 2.32.3
2024-09-19 15:18:20,148:INFO:          matplotlib: 3.7.5
2024-09-19 15:18:20,148:INFO:          scikitplot: 0.3.7
2024-09-19 15:18:20,148:INFO:         yellowbrick: 1.5
2024-09-19 15:18:20,148:INFO:              plotly: 5.24.1
2024-09-19 15:18:20,148:INFO:    plotly-resampler: Not installed
2024-09-19 15:18:20,148:INFO:             kaleido: 0.2.1
2024-09-19 15:18:20,148:INFO:           schemdraw: 0.15
2024-09-19 15:18:20,148:INFO:         statsmodels: 0.14.3
2024-09-19 15:18:20,148:INFO:              sktime: 0.26.0
2024-09-19 15:18:20,148:INFO:               tbats: 1.1.3
2024-09-19 15:18:20,148:INFO:            pmdarima: 2.0.4
2024-09-19 15:18:20,148:INFO:              psutil: 6.0.0
2024-09-19 15:18:20,148:INFO:          markupsafe: 2.1.5
2024-09-19 15:18:20,148:INFO:             pickle5: Not installed
2024-09-19 15:18:20,148:INFO:         cloudpickle: 3.0.0
2024-09-19 15:18:20,148:INFO:         deprecation: 2.1.0
2024-09-19 15:18:20,148:INFO:              xxhash: 3.5.0
2024-09-19 15:18:20,148:INFO:           wurlitzer: Not installed
2024-09-19 15:18:20,148:INFO:PyCaret optional dependencies:
2024-09-19 15:18:20,162:INFO:                shap: Not installed
2024-09-19 15:18:20,162:INFO:           interpret: Not installed
2024-09-19 15:18:20,162:INFO:                umap: Not installed
2024-09-19 15:18:20,162:INFO:     ydata_profiling: Not installed
2024-09-19 15:18:20,162:INFO:  explainerdashboard: Not installed
2024-09-19 15:18:20,162:INFO:             autoviz: Not installed
2024-09-19 15:18:20,162:INFO:           fairlearn: Not installed
2024-09-19 15:18:20,162:INFO:          deepchecks: Not installed
2024-09-19 15:18:20,162:INFO:             xgboost: Not installed
2024-09-19 15:18:20,162:INFO:            catboost: Not installed
2024-09-19 15:18:20,162:INFO:              kmodes: Not installed
2024-09-19 15:18:20,162:INFO:             mlxtend: Not installed
2024-09-19 15:18:20,162:INFO:       statsforecast: Not installed
2024-09-19 15:18:20,162:INFO:        tune_sklearn: Not installed
2024-09-19 15:18:20,162:INFO:                 ray: Not installed
2024-09-19 15:18:20,162:INFO:            hyperopt: Not installed
2024-09-19 15:18:20,162:INFO:              optuna: Not installed
2024-09-19 15:18:20,162:INFO:               skopt: Not installed
2024-09-19 15:18:20,162:INFO:              mlflow: Not installed
2024-09-19 15:18:20,162:INFO:              gradio: Not installed
2024-09-19 15:18:20,162:INFO:             fastapi: Not installed
2024-09-19 15:18:20,162:INFO:             uvicorn: Not installed
2024-09-19 15:18:20,162:INFO:              m2cgen: Not installed
2024-09-19 15:18:20,162:INFO:           evidently: Not installed
2024-09-19 15:18:20,162:INFO:               fugue: Not installed
2024-09-19 15:18:20,162:INFO:           streamlit: Not installed
2024-09-19 15:18:20,162:INFO:             prophet: Not installed
2024-09-19 15:18:20,162:INFO:None
2024-09-19 15:18:20,162:INFO:Set up data.
2024-09-19 15:18:20,191:INFO:Set up folding strategy.
2024-09-19 15:18:20,192:INFO:Set up train/test split.
2024-09-19 15:18:20,228:INFO:Set up index.
2024-09-19 15:18:20,229:INFO:Assigning column types.
2024-09-19 15:18:20,234:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-19 15:18:20,291:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-19 15:18:20,291:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 15:18:20,353:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:18:20,353:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:18:20,408:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-19 15:18:20,408:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 15:18:20,441:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:18:20,441:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:18:20,441:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-19 15:18:20,508:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 15:18:20,556:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:18:20,556:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:18:20,608:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 15:18:20,642:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:18:20,642:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:18:20,642:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-19 15:18:20,767:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:18:20,767:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:18:20,908:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:18:20,908:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:18:20,908:INFO:Preparing preprocessing pipeline...
2024-09-19 15:18:20,908:INFO:Set up label encoding.
2024-09-19 15:18:20,908:INFO:Set up simple imputation.
2024-09-19 15:18:20,908:INFO:Set up encoding of ordinal features.
2024-09-19 15:18:20,925:INFO:Set up encoding of categorical features.
2024-09-19 15:18:21,219:INFO:Finished creating preprocessing pipeline.
2024-09-19 15:18:21,275:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\juran\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indica...
                                                               verbose=0))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['job', 'marital', 'education',
                                             'contact', 'month', 'poutcome'],
                                    transformer=OneHotEncoder(cols=['job',
                                                                    'marital',
                                                                    'education',
                                                                    'contact',
                                                                    'month',
                                                                    'poutcome'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False)
2024-09-19 15:18:21,275:INFO:Creating final display dataframe.
2024-09-19 15:18:21,957:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target           deposit
2                   Target type            Binary
3                Target mapping     no: 0, yes: 1
4           Original data shape       (11162, 17)
5        Transformed data shape       (11162, 49)
6   Transformed train set shape        (7813, 49)
7    Transformed test set shape        (3349, 49)
8              Numeric features                 7
9          Categorical features                 9
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16               Fold Generator   StratifiedKFold
17                  Fold Number                10
18                     CPU Jobs                -1
19                      Use GPU             False
20               Log Experiment             False
21              Experiment Name  clf-default-name
22                          USI              8d47
2024-09-19 15:18:22,087:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:18:22,089:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:18:22,239:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:18:22,239:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:18:22,241:INFO:setup() successfully completed in 2.14s...............
2024-09-19 15:27:42,140:INFO:Initializing get_config()
2024-09-19 15:27:42,141:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253CCDB7A90>, variable=X_transformed)
2024-09-19 15:27:42,330:INFO:Variable: X returned as         age  job_retired  job_technician  job_blue-collar  job_admin.  ...  previous  poutcome_unknown  poutcome_success  poutcome_failure  poutcome_other
6148   43.0          1.0             0.0              0.0         0.0  ...       0.0               1.0               0.0               0.0             0.0
7340   52.0          0.0             1.0              0.0         0.0  ...       0.0               1.0               0.0               0.0             0.0
4830   28.0          0.0             0.0              1.0         0.0  ...       1.0               0.0               1.0               0.0             0.0
3347   35.0          0.0             0.0              0.0         1.0  ...       0.0               1.0               0.0               0.0             0.0
5290   45.0          0.0             0.0              0.0         1.0  ...       0.0               1.0               0.0               0.0             0.0
...     ...          ...             ...              ...         ...  ...       ...               ...               ...               ...             ...
507    30.0          0.0             0.0              0.0         1.0  ...       0.0               1.0               0.0               0.0             0.0
1068   41.0          0.0             0.0              0.0         0.0  ...       0.0               1.0               0.0               0.0             0.0
4875   53.0          0.0             0.0              0.0         0.0  ...       0.0               1.0               0.0               0.0             0.0
10304  57.0          0.0             0.0              0.0         0.0  ...       0.0               1.0               0.0               0.0             0.0
1210   39.0          0.0             0.0              0.0         0.0  ...       0.0               1.0               0.0               0.0             0.0

[11162 rows x 48 columns]
2024-09-19 15:27:42,330:INFO:get_config() successfully completed......................................
2024-09-19 15:27:56,785:INFO:Initializing get_config()
2024-09-19 15:27:56,785:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253CCDB7A90>, variable=X_transformed)
2024-09-19 15:27:56,908:INFO:Variable: X returned as         age  job_retired  job_technician  job_blue-collar  job_admin.  ...  previous  poutcome_unknown  poutcome_success  poutcome_failure  poutcome_other
6148   43.0          1.0             0.0              0.0         0.0  ...       0.0               1.0               0.0               0.0             0.0
7340   52.0          0.0             1.0              0.0         0.0  ...       0.0               1.0               0.0               0.0             0.0
4830   28.0          0.0             0.0              1.0         0.0  ...       1.0               0.0               1.0               0.0             0.0
3347   35.0          0.0             0.0              0.0         1.0  ...       0.0               1.0               0.0               0.0             0.0
5290   45.0          0.0             0.0              0.0         1.0  ...       0.0               1.0               0.0               0.0             0.0
...     ...          ...             ...              ...         ...  ...       ...               ...               ...               ...             ...
507    30.0          0.0             0.0              0.0         1.0  ...       0.0               1.0               0.0               0.0             0.0
1068   41.0          0.0             0.0              0.0         0.0  ...       0.0               1.0               0.0               0.0             0.0
4875   53.0          0.0             0.0              0.0         0.0  ...       0.0               1.0               0.0               0.0             0.0
10304  57.0          0.0             0.0              0.0         0.0  ...       0.0               1.0               0.0               0.0             0.0
1210   39.0          0.0             0.0              0.0         0.0  ...       0.0               1.0               0.0               0.0             0.0

[11162 rows x 48 columns]
2024-09-19 15:27:56,908:INFO:get_config() successfully completed......................................
2024-09-19 15:28:00,528:INFO:Initializing get_config()
2024-09-19 15:28:00,528:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253CCDB7A90>, variable=X_transformed)
2024-09-19 15:28:00,673:INFO:Variable: X returned as         age  job_retired  job_technician  job_blue-collar  job_admin.  ...  previous  poutcome_unknown  poutcome_success  poutcome_failure  poutcome_other
6148   43.0          1.0             0.0              0.0         0.0  ...       0.0               1.0               0.0               0.0             0.0
7340   52.0          0.0             1.0              0.0         0.0  ...       0.0               1.0               0.0               0.0             0.0
4830   28.0          0.0             0.0              1.0         0.0  ...       1.0               0.0               1.0               0.0             0.0
3347   35.0          0.0             0.0              0.0         1.0  ...       0.0               1.0               0.0               0.0             0.0
5290   45.0          0.0             0.0              0.0         1.0  ...       0.0               1.0               0.0               0.0             0.0
...     ...          ...             ...              ...         ...  ...       ...               ...               ...               ...             ...
507    30.0          0.0             0.0              0.0         1.0  ...       0.0               1.0               0.0               0.0             0.0
1068   41.0          0.0             0.0              0.0         0.0  ...       0.0               1.0               0.0               0.0             0.0
4875   53.0          0.0             0.0              0.0         0.0  ...       0.0               1.0               0.0               0.0             0.0
10304  57.0          0.0             0.0              0.0         0.0  ...       0.0               1.0               0.0               0.0             0.0
1210   39.0          0.0             0.0              0.0         0.0  ...       0.0               1.0               0.0               0.0             0.0

[11162 rows x 48 columns]
2024-09-19 15:28:00,673:INFO:get_config() successfully completed......................................
2024-09-19 15:28:49,173:INFO:PyCaret ClassificationExperiment
2024-09-19 15:28:49,173:INFO:Logging name: clf-default-name
2024-09-19 15:28:49,173:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-19 15:28:49,173:INFO:version 3.3.2
2024-09-19 15:28:49,173:INFO:Initializing setup()
2024-09-19 15:28:49,173:INFO:self.USI: f41f
2024-09-19 15:28:49,173:INFO:self._variable_keys: {'n_jobs_param', 'data', 'X_train', 'seed', 'X', 'fold_groups_param', 'memory', 'fold_shuffle_param', 'gpu_param', 'X_test', 'idx', 'fix_imbalance', '_available_plots', 'y_train', 'y_test', '_ml_usecase', 'fold_generator', 'logging_param', 'log_plots_param', 'exp_name_log', 'is_multiclass', 'exp_id', 'target_param', 'gpu_n_jobs_param', 'y', 'USI', 'pipeline', 'html_param'}
2024-09-19 15:28:49,174:INFO:Checking environment
2024-09-19 15:28:49,174:INFO:python_version: 3.11.9
2024-09-19 15:28:49,174:INFO:python_build: ('main', 'Apr 19 2024 16:40:41')
2024-09-19 15:28:49,174:INFO:machine: AMD64
2024-09-19 15:28:49,174:INFO:platform: Windows-10-10.0.19045-SP0
2024-09-19 15:28:49,178:INFO:Memory: svmem(total=16969424896, available=5260263424, percent=69.0, used=11709161472, free=5260263424)
2024-09-19 15:28:49,179:INFO:Physical Core: 4
2024-09-19 15:28:49,179:INFO:Logical Core: 8
2024-09-19 15:28:49,179:INFO:Checking libraries
2024-09-19 15:28:49,179:INFO:System:
2024-09-19 15:28:49,179:INFO:    python: 3.11.9 | packaged by Anaconda, Inc. | (main, Apr 19 2024, 16:40:41) [MSC v.1916 64 bit (AMD64)]
2024-09-19 15:28:49,179:INFO:executable: C:\Users\juran\anaconda3\envs\myenv\python.exe
2024-09-19 15:28:49,179:INFO:   machine: Windows-10-10.0.19045-SP0
2024-09-19 15:28:49,179:INFO:PyCaret required dependencies:
2024-09-19 15:28:49,179:INFO:                 pip: 24.2
2024-09-19 15:28:49,179:INFO:          setuptools: 72.1.0
2024-09-19 15:28:49,179:INFO:             pycaret: 3.3.2
2024-09-19 15:28:49,179:INFO:             IPython: 8.26.0
2024-09-19 15:28:49,179:INFO:          ipywidgets: 8.1.5
2024-09-19 15:28:49,179:INFO:                tqdm: 4.66.5
2024-09-19 15:28:49,179:INFO:               numpy: 1.26.4
2024-09-19 15:28:49,179:INFO:              pandas: 1.5.3
2024-09-19 15:28:49,179:INFO:              jinja2: 3.1.4
2024-09-19 15:28:49,179:INFO:               scipy: 1.11.4
2024-09-19 15:28:49,179:INFO:              joblib: 1.3.2
2024-09-19 15:28:49,179:INFO:             sklearn: 1.4.2
2024-09-19 15:28:49,179:INFO:                pyod: 2.0.2
2024-09-19 15:28:49,179:INFO:            imblearn: 0.12.3
2024-09-19 15:28:49,179:INFO:   category_encoders: 2.6.3
2024-09-19 15:28:49,179:INFO:            lightgbm: 4.5.0
2024-09-19 15:28:49,179:INFO:               numba: 0.60.0
2024-09-19 15:28:49,179:INFO:            requests: 2.32.3
2024-09-19 15:28:49,179:INFO:          matplotlib: 3.7.5
2024-09-19 15:28:49,179:INFO:          scikitplot: 0.3.7
2024-09-19 15:28:49,179:INFO:         yellowbrick: 1.5
2024-09-19 15:28:49,179:INFO:              plotly: 5.24.1
2024-09-19 15:28:49,179:INFO:    plotly-resampler: Not installed
2024-09-19 15:28:49,179:INFO:             kaleido: 0.2.1
2024-09-19 15:28:49,179:INFO:           schemdraw: 0.15
2024-09-19 15:28:49,179:INFO:         statsmodels: 0.14.3
2024-09-19 15:28:49,179:INFO:              sktime: 0.26.0
2024-09-19 15:28:49,179:INFO:               tbats: 1.1.3
2024-09-19 15:28:49,179:INFO:            pmdarima: 2.0.4
2024-09-19 15:28:49,179:INFO:              psutil: 6.0.0
2024-09-19 15:28:49,179:INFO:          markupsafe: 2.1.5
2024-09-19 15:28:49,179:INFO:             pickle5: Not installed
2024-09-19 15:28:49,179:INFO:         cloudpickle: 3.0.0
2024-09-19 15:28:49,179:INFO:         deprecation: 2.1.0
2024-09-19 15:28:49,179:INFO:              xxhash: 3.5.0
2024-09-19 15:28:49,179:INFO:           wurlitzer: Not installed
2024-09-19 15:28:49,179:INFO:PyCaret optional dependencies:
2024-09-19 15:28:49,179:INFO:                shap: Not installed
2024-09-19 15:28:49,179:INFO:           interpret: Not installed
2024-09-19 15:28:49,179:INFO:                umap: Not installed
2024-09-19 15:28:49,179:INFO:     ydata_profiling: Not installed
2024-09-19 15:28:49,179:INFO:  explainerdashboard: Not installed
2024-09-19 15:28:49,179:INFO:             autoviz: Not installed
2024-09-19 15:28:49,179:INFO:           fairlearn: Not installed
2024-09-19 15:28:49,179:INFO:          deepchecks: Not installed
2024-09-19 15:28:49,179:INFO:             xgboost: Not installed
2024-09-19 15:28:49,179:INFO:            catboost: Not installed
2024-09-19 15:28:49,179:INFO:              kmodes: Not installed
2024-09-19 15:28:49,179:INFO:             mlxtend: Not installed
2024-09-19 15:28:49,179:INFO:       statsforecast: Not installed
2024-09-19 15:28:49,179:INFO:        tune_sklearn: Not installed
2024-09-19 15:28:49,179:INFO:                 ray: Not installed
2024-09-19 15:28:49,179:INFO:            hyperopt: Not installed
2024-09-19 15:28:49,179:INFO:              optuna: Not installed
2024-09-19 15:28:49,179:INFO:               skopt: Not installed
2024-09-19 15:28:49,179:INFO:              mlflow: Not installed
2024-09-19 15:28:49,179:INFO:              gradio: Not installed
2024-09-19 15:28:49,179:INFO:             fastapi: Not installed
2024-09-19 15:28:49,179:INFO:             uvicorn: Not installed
2024-09-19 15:28:49,179:INFO:              m2cgen: Not installed
2024-09-19 15:28:49,179:INFO:           evidently: Not installed
2024-09-19 15:28:49,179:INFO:               fugue: Not installed
2024-09-19 15:28:49,179:INFO:           streamlit: Not installed
2024-09-19 15:28:49,179:INFO:             prophet: Not installed
2024-09-19 15:28:49,179:INFO:None
2024-09-19 15:28:49,179:INFO:Set up data.
2024-09-19 15:28:49,204:INFO:Set up folding strategy.
2024-09-19 15:28:49,204:INFO:Set up train/test split.
2024-09-19 15:28:49,221:INFO:Set up index.
2024-09-19 15:28:49,222:INFO:Assigning column types.
2024-09-19 15:28:49,224:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-19 15:28:49,286:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-19 15:28:49,286:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 15:28:49,333:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:28:49,333:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:28:49,406:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-19 15:28:49,408:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 15:28:49,436:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:28:49,436:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:28:49,436:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-19 15:28:49,483:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 15:28:49,515:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:28:49,515:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:28:49,618:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 15:28:49,649:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:28:49,649:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:28:49,649:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-19 15:28:49,762:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:28:49,762:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:28:49,886:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:28:49,887:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:28:49,887:INFO:Preparing preprocessing pipeline...
2024-09-19 15:28:49,889:INFO:Set up label encoding.
2024-09-19 15:28:49,889:INFO:Set up simple imputation.
2024-09-19 15:28:49,896:INFO:Set up encoding of ordinal features.
2024-09-19 15:28:49,900:INFO:Set up encoding of categorical features.
2024-09-19 15:28:50,229:INFO:Finished creating preprocessing pipeline.
2024-09-19 15:28:50,299:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\juran\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indica...
                                                               verbose=0))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['job', 'marital', 'education',
                                             'contact', 'month', 'poutcome'],
                                    transformer=OneHotEncoder(cols=['job',
                                                                    'marital',
                                                                    'education',
                                                                    'contact',
                                                                    'month',
                                                                    'poutcome'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False)
2024-09-19 15:28:50,299:INFO:Creating final display dataframe.
2024-09-19 15:28:50,952:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target           deposit
2                   Target type            Binary
3                Target mapping     no: 0, yes: 1
4           Original data shape       (11162, 17)
5        Transformed data shape       (11162, 49)
6   Transformed train set shape        (8929, 49)
7    Transformed test set shape        (2233, 49)
8              Numeric features                 7
9          Categorical features                 9
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16               Fold Generator   StratifiedKFold
17                  Fold Number                10
18                     CPU Jobs                -1
19                      Use GPU             False
20               Log Experiment             False
21              Experiment Name  clf-default-name
22                          USI              f41f
2024-09-19 15:28:51,078:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:28:51,079:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:28:51,229:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:28:51,230:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:28:51,235:INFO:setup() successfully completed in 2.07s...............
2024-09-19 15:30:05,421:INFO:PyCaret ClassificationExperiment
2024-09-19 15:30:05,421:INFO:Logging name: clf-default-name
2024-09-19 15:30:05,421:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-19 15:30:05,421:INFO:version 3.3.2
2024-09-19 15:30:05,421:INFO:Initializing setup()
2024-09-19 15:30:05,421:INFO:self.USI: 4e6b
2024-09-19 15:30:05,421:INFO:self._variable_keys: {'n_jobs_param', 'data', 'X_train', 'seed', 'X', 'fold_groups_param', 'memory', 'fold_shuffle_param', 'gpu_param', 'X_test', 'idx', 'fix_imbalance', '_available_plots', 'y_train', 'y_test', '_ml_usecase', 'fold_generator', 'logging_param', 'log_plots_param', 'exp_name_log', 'is_multiclass', 'exp_id', 'target_param', 'gpu_n_jobs_param', 'y', 'USI', 'pipeline', 'html_param'}
2024-09-19 15:30:05,422:INFO:Checking environment
2024-09-19 15:30:05,422:INFO:python_version: 3.11.9
2024-09-19 15:30:05,422:INFO:python_build: ('main', 'Apr 19 2024 16:40:41')
2024-09-19 15:30:05,422:INFO:machine: AMD64
2024-09-19 15:30:05,422:INFO:platform: Windows-10-10.0.19045-SP0
2024-09-19 15:30:05,423:INFO:Memory: svmem(total=16969424896, available=5352386560, percent=68.5, used=11617038336, free=5352386560)
2024-09-19 15:30:05,423:INFO:Physical Core: 4
2024-09-19 15:30:05,423:INFO:Logical Core: 8
2024-09-19 15:30:05,423:INFO:Checking libraries
2024-09-19 15:30:05,423:INFO:System:
2024-09-19 15:30:05,423:INFO:    python: 3.11.9 | packaged by Anaconda, Inc. | (main, Apr 19 2024, 16:40:41) [MSC v.1916 64 bit (AMD64)]
2024-09-19 15:30:05,423:INFO:executable: C:\Users\juran\anaconda3\envs\myenv\python.exe
2024-09-19 15:30:05,423:INFO:   machine: Windows-10-10.0.19045-SP0
2024-09-19 15:30:05,423:INFO:PyCaret required dependencies:
2024-09-19 15:30:05,423:INFO:                 pip: 24.2
2024-09-19 15:30:05,423:INFO:          setuptools: 72.1.0
2024-09-19 15:30:05,423:INFO:             pycaret: 3.3.2
2024-09-19 15:30:05,423:INFO:             IPython: 8.26.0
2024-09-19 15:30:05,423:INFO:          ipywidgets: 8.1.5
2024-09-19 15:30:05,423:INFO:                tqdm: 4.66.5
2024-09-19 15:30:05,423:INFO:               numpy: 1.26.4
2024-09-19 15:30:05,423:INFO:              pandas: 1.5.3
2024-09-19 15:30:05,423:INFO:              jinja2: 3.1.4
2024-09-19 15:30:05,423:INFO:               scipy: 1.11.4
2024-09-19 15:30:05,423:INFO:              joblib: 1.3.2
2024-09-19 15:30:05,423:INFO:             sklearn: 1.4.2
2024-09-19 15:30:05,423:INFO:                pyod: 2.0.2
2024-09-19 15:30:05,423:INFO:            imblearn: 0.12.3
2024-09-19 15:30:05,423:INFO:   category_encoders: 2.6.3
2024-09-19 15:30:05,423:INFO:            lightgbm: 4.5.0
2024-09-19 15:30:05,423:INFO:               numba: 0.60.0
2024-09-19 15:30:05,423:INFO:            requests: 2.32.3
2024-09-19 15:30:05,423:INFO:          matplotlib: 3.7.5
2024-09-19 15:30:05,423:INFO:          scikitplot: 0.3.7
2024-09-19 15:30:05,423:INFO:         yellowbrick: 1.5
2024-09-19 15:30:05,423:INFO:              plotly: 5.24.1
2024-09-19 15:30:05,423:INFO:    plotly-resampler: Not installed
2024-09-19 15:30:05,423:INFO:             kaleido: 0.2.1
2024-09-19 15:30:05,423:INFO:           schemdraw: 0.15
2024-09-19 15:30:05,423:INFO:         statsmodels: 0.14.3
2024-09-19 15:30:05,423:INFO:              sktime: 0.26.0
2024-09-19 15:30:05,423:INFO:               tbats: 1.1.3
2024-09-19 15:30:05,423:INFO:            pmdarima: 2.0.4
2024-09-19 15:30:05,423:INFO:              psutil: 6.0.0
2024-09-19 15:30:05,423:INFO:          markupsafe: 2.1.5
2024-09-19 15:30:05,423:INFO:             pickle5: Not installed
2024-09-19 15:30:05,423:INFO:         cloudpickle: 3.0.0
2024-09-19 15:30:05,423:INFO:         deprecation: 2.1.0
2024-09-19 15:30:05,423:INFO:              xxhash: 3.5.0
2024-09-19 15:30:05,423:INFO:           wurlitzer: Not installed
2024-09-19 15:30:05,423:INFO:PyCaret optional dependencies:
2024-09-19 15:30:05,423:INFO:                shap: Not installed
2024-09-19 15:30:05,423:INFO:           interpret: Not installed
2024-09-19 15:30:05,423:INFO:                umap: Not installed
2024-09-19 15:30:05,423:INFO:     ydata_profiling: Not installed
2024-09-19 15:30:05,423:INFO:  explainerdashboard: Not installed
2024-09-19 15:30:05,423:INFO:             autoviz: Not installed
2024-09-19 15:30:05,423:INFO:           fairlearn: Not installed
2024-09-19 15:30:05,423:INFO:          deepchecks: Not installed
2024-09-19 15:30:05,423:INFO:             xgboost: Not installed
2024-09-19 15:30:05,423:INFO:            catboost: Not installed
2024-09-19 15:30:05,423:INFO:              kmodes: Not installed
2024-09-19 15:30:05,423:INFO:             mlxtend: Not installed
2024-09-19 15:30:05,423:INFO:       statsforecast: Not installed
2024-09-19 15:30:05,423:INFO:        tune_sklearn: Not installed
2024-09-19 15:30:05,423:INFO:                 ray: Not installed
2024-09-19 15:30:05,423:INFO:            hyperopt: Not installed
2024-09-19 15:30:05,423:INFO:              optuna: Not installed
2024-09-19 15:30:05,423:INFO:               skopt: Not installed
2024-09-19 15:30:05,423:INFO:              mlflow: Not installed
2024-09-19 15:30:05,423:INFO:              gradio: Not installed
2024-09-19 15:30:05,423:INFO:             fastapi: Not installed
2024-09-19 15:30:05,423:INFO:             uvicorn: Not installed
2024-09-19 15:30:05,423:INFO:              m2cgen: Not installed
2024-09-19 15:30:05,423:INFO:           evidently: Not installed
2024-09-19 15:30:05,423:INFO:               fugue: Not installed
2024-09-19 15:30:05,423:INFO:           streamlit: Not installed
2024-09-19 15:30:05,423:INFO:             prophet: Not installed
2024-09-19 15:30:05,423:INFO:None
2024-09-19 15:30:05,423:INFO:Set up data.
2024-09-19 15:30:05,455:INFO:Set up folding strategy.
2024-09-19 15:30:05,455:INFO:Set up train/test split.
2024-09-19 15:30:05,482:INFO:Set up index.
2024-09-19 15:30:05,482:INFO:Assigning column types.
2024-09-19 15:30:05,486:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-19 15:30:05,554:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-19 15:30:05,555:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 15:30:05,582:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:30:05,582:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:30:05,615:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-19 15:30:05,615:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 15:30:05,647:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:30:05,647:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:30:05,647:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-19 15:30:05,715:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 15:30:05,746:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:30:05,746:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:30:05,824:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 15:30:05,840:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:30:05,840:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:30:05,840:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-19 15:30:05,918:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:30:05,918:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:30:05,987:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:30:05,987:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:30:05,987:INFO:Preparing preprocessing pipeline...
2024-09-19 15:30:05,987:INFO:Set up label encoding.
2024-09-19 15:30:05,987:INFO:Set up simple imputation.
2024-09-19 15:30:06,002:INFO:Set up encoding of ordinal features.
2024-09-19 15:30:06,005:INFO:Set up encoding of categorical features.
2024-09-19 15:30:06,006:INFO:Set up feature normalization.
2024-09-19 15:30:06,378:INFO:Finished creating preprocessing pipeline.
2024-09-19 15:30:06,413:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\juran\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indica...
                                    transformer=OneHotEncoder(cols=['job',
                                                                    'marital',
                                                                    'education',
                                                                    'contact',
                                                                    'month',
                                                                    'poutcome'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-09-19 15:30:06,413:INFO:Creating final display dataframe.
2024-09-19 15:30:07,001:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target           deposit
2                   Target type            Binary
3                Target mapping     no: 0, yes: 1
4           Original data shape       (11162, 17)
5        Transformed data shape       (11162, 49)
6   Transformed train set shape        (8929, 49)
7    Transformed test set shape        (2233, 49)
8              Numeric features                 7
9          Categorical features                 9
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16                    Normalize              True
17             Normalize method            zscore
18               Fold Generator   StratifiedKFold
19                  Fold Number                10
20                     CPU Jobs                -1
21                      Use GPU             False
22               Log Experiment             False
23              Experiment Name  clf-default-name
24                          USI              4e6b
2024-09-19 15:30:07,088:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:30:07,088:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:30:07,188:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:30:07,188:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:30:07,191:INFO:setup() successfully completed in 1.77s...............
2024-09-19 15:33:20,733:INFO:PyCaret ClassificationExperiment
2024-09-19 15:33:20,733:INFO:Logging name: clf-default-name
2024-09-19 15:33:20,733:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-19 15:33:20,733:INFO:version 3.3.2
2024-09-19 15:33:20,733:INFO:Initializing setup()
2024-09-19 15:33:20,733:INFO:self.USI: 5218
2024-09-19 15:33:20,733:INFO:self._variable_keys: {'n_jobs_param', 'data', 'X_train', 'seed', 'X', 'fold_groups_param', 'memory', 'fold_shuffle_param', 'gpu_param', 'X_test', 'idx', 'fix_imbalance', '_available_plots', 'y_train', 'y_test', '_ml_usecase', 'fold_generator', 'logging_param', 'log_plots_param', 'exp_name_log', 'is_multiclass', 'exp_id', 'target_param', 'gpu_n_jobs_param', 'y', 'USI', 'pipeline', 'html_param'}
2024-09-19 15:33:20,734:INFO:Checking environment
2024-09-19 15:33:20,734:INFO:python_version: 3.11.9
2024-09-19 15:33:20,734:INFO:python_build: ('main', 'Apr 19 2024 16:40:41')
2024-09-19 15:33:20,734:INFO:machine: AMD64
2024-09-19 15:33:20,734:INFO:platform: Windows-10-10.0.19045-SP0
2024-09-19 15:33:20,738:INFO:Memory: svmem(total=16969424896, available=5352206336, percent=68.5, used=11617218560, free=5352206336)
2024-09-19 15:33:20,738:INFO:Physical Core: 4
2024-09-19 15:33:20,738:INFO:Logical Core: 8
2024-09-19 15:33:20,739:INFO:Checking libraries
2024-09-19 15:33:20,739:INFO:System:
2024-09-19 15:33:20,739:INFO:    python: 3.11.9 | packaged by Anaconda, Inc. | (main, Apr 19 2024, 16:40:41) [MSC v.1916 64 bit (AMD64)]
2024-09-19 15:33:20,739:INFO:executable: C:\Users\juran\anaconda3\envs\myenv\python.exe
2024-09-19 15:33:20,739:INFO:   machine: Windows-10-10.0.19045-SP0
2024-09-19 15:33:20,740:INFO:PyCaret required dependencies:
2024-09-19 15:33:20,740:INFO:                 pip: 24.2
2024-09-19 15:33:20,740:INFO:          setuptools: 72.1.0
2024-09-19 15:33:20,740:INFO:             pycaret: 3.3.2
2024-09-19 15:33:20,740:INFO:             IPython: 8.26.0
2024-09-19 15:33:20,740:INFO:          ipywidgets: 8.1.5
2024-09-19 15:33:20,740:INFO:                tqdm: 4.66.5
2024-09-19 15:33:20,740:INFO:               numpy: 1.26.4
2024-09-19 15:33:20,740:INFO:              pandas: 1.5.3
2024-09-19 15:33:20,740:INFO:              jinja2: 3.1.4
2024-09-19 15:33:20,741:INFO:               scipy: 1.11.4
2024-09-19 15:33:20,741:INFO:              joblib: 1.3.2
2024-09-19 15:33:20,741:INFO:             sklearn: 1.4.2
2024-09-19 15:33:20,741:INFO:                pyod: 2.0.2
2024-09-19 15:33:20,741:INFO:            imblearn: 0.12.3
2024-09-19 15:33:20,741:INFO:   category_encoders: 2.6.3
2024-09-19 15:33:20,741:INFO:            lightgbm: 4.5.0
2024-09-19 15:33:20,741:INFO:               numba: 0.60.0
2024-09-19 15:33:20,741:INFO:            requests: 2.32.3
2024-09-19 15:33:20,741:INFO:          matplotlib: 3.7.5
2024-09-19 15:33:20,742:INFO:          scikitplot: 0.3.7
2024-09-19 15:33:20,742:INFO:         yellowbrick: 1.5
2024-09-19 15:33:20,742:INFO:              plotly: 5.24.1
2024-09-19 15:33:20,742:INFO:    plotly-resampler: Not installed
2024-09-19 15:33:20,742:INFO:             kaleido: 0.2.1
2024-09-19 15:33:20,742:INFO:           schemdraw: 0.15
2024-09-19 15:33:20,742:INFO:         statsmodels: 0.14.3
2024-09-19 15:33:20,742:INFO:              sktime: 0.26.0
2024-09-19 15:33:20,742:INFO:               tbats: 1.1.3
2024-09-19 15:33:20,742:INFO:            pmdarima: 2.0.4
2024-09-19 15:33:20,742:INFO:              psutil: 6.0.0
2024-09-19 15:33:20,742:INFO:          markupsafe: 2.1.5
2024-09-19 15:33:20,742:INFO:             pickle5: Not installed
2024-09-19 15:33:20,742:INFO:         cloudpickle: 3.0.0
2024-09-19 15:33:20,742:INFO:         deprecation: 2.1.0
2024-09-19 15:33:20,742:INFO:              xxhash: 3.5.0
2024-09-19 15:33:20,742:INFO:           wurlitzer: Not installed
2024-09-19 15:33:20,742:INFO:PyCaret optional dependencies:
2024-09-19 15:33:20,743:INFO:                shap: Not installed
2024-09-19 15:33:20,743:INFO:           interpret: Not installed
2024-09-19 15:33:20,743:INFO:                umap: Not installed
2024-09-19 15:33:20,743:INFO:     ydata_profiling: Not installed
2024-09-19 15:33:20,743:INFO:  explainerdashboard: Not installed
2024-09-19 15:33:20,743:INFO:             autoviz: Not installed
2024-09-19 15:33:20,743:INFO:           fairlearn: Not installed
2024-09-19 15:33:20,743:INFO:          deepchecks: Not installed
2024-09-19 15:33:20,743:INFO:             xgboost: Not installed
2024-09-19 15:33:20,743:INFO:            catboost: Not installed
2024-09-19 15:33:20,743:INFO:              kmodes: Not installed
2024-09-19 15:33:20,743:INFO:             mlxtend: Not installed
2024-09-19 15:33:20,743:INFO:       statsforecast: Not installed
2024-09-19 15:33:20,743:INFO:        tune_sklearn: Not installed
2024-09-19 15:33:20,743:INFO:                 ray: Not installed
2024-09-19 15:33:20,743:INFO:            hyperopt: Not installed
2024-09-19 15:33:20,744:INFO:              optuna: Not installed
2024-09-19 15:33:20,744:INFO:               skopt: Not installed
2024-09-19 15:33:20,744:INFO:              mlflow: Not installed
2024-09-19 15:33:20,744:INFO:              gradio: Not installed
2024-09-19 15:33:20,744:INFO:             fastapi: Not installed
2024-09-19 15:33:20,744:INFO:             uvicorn: Not installed
2024-09-19 15:33:20,744:INFO:              m2cgen: Not installed
2024-09-19 15:33:20,744:INFO:           evidently: Not installed
2024-09-19 15:33:20,744:INFO:               fugue: Not installed
2024-09-19 15:33:20,744:INFO:           streamlit: Not installed
2024-09-19 15:33:20,744:INFO:             prophet: Not installed
2024-09-19 15:33:20,744:INFO:None
2024-09-19 15:33:20,744:INFO:Set up data.
2024-09-19 15:33:20,767:INFO:Set up folding strategy.
2024-09-19 15:33:20,767:INFO:Set up train/test split.
2024-09-19 15:33:20,778:INFO:Set up index.
2024-09-19 15:33:20,778:INFO:Assigning column types.
2024-09-19 15:33:20,778:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-19 15:33:20,821:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-19 15:33:20,821:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 15:33:20,868:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:33:20,884:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:33:20,915:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-19 15:33:20,931:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 15:33:20,988:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:33:20,988:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:33:20,988:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-19 15:33:21,034:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 15:33:21,066:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:33:21,066:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:33:21,113:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 15:33:21,129:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:33:21,129:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:33:21,129:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-19 15:33:21,234:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:33:21,234:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:33:21,338:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:33:21,338:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:33:21,339:INFO:Preparing preprocessing pipeline...
2024-09-19 15:33:21,340:INFO:Set up label encoding.
2024-09-19 15:33:21,340:INFO:Set up simple imputation.
2024-09-19 15:33:21,345:INFO:Set up encoding of ordinal features.
2024-09-19 15:33:21,348:INFO:Set up encoding of categorical features.
2024-09-19 15:33:21,348:INFO:Set up feature normalization.
2024-09-19 15:33:21,620:INFO:Finished creating preprocessing pipeline.
2024-09-19 15:33:21,653:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\juran\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indica...
                                    transformer=OneHotEncoder(cols=['job',
                                                                    'marital',
                                                                    'education',
                                                                    'contact',
                                                                    'month',
                                                                    'poutcome'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-09-19 15:33:21,653:INFO:Creating final display dataframe.
2024-09-19 15:33:22,043:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target           deposit
2                   Target type            Binary
3                Target mapping     no: 0, yes: 1
4           Original data shape       (11162, 17)
5        Transformed data shape       (11162, 49)
6   Transformed train set shape        (8929, 49)
7    Transformed test set shape        (2233, 49)
8              Numeric features                 7
9          Categorical features                 9
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16                    Normalize              True
17             Normalize method            zscore
18               Fold Generator   StratifiedKFold
19                  Fold Number                10
20                     CPU Jobs                -1
21                      Use GPU             False
22               Log Experiment             False
23              Experiment Name  clf-default-name
24                          USI              5218
2024-09-19 15:33:22,139:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:33:22,139:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:33:22,248:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:33:22,248:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:33:22,249:INFO:setup() successfully completed in 1.52s...............
2024-09-19 15:47:07,633:INFO:PyCaret ClassificationExperiment
2024-09-19 15:47:07,633:INFO:Logging name: clf-default-name
2024-09-19 15:47:07,633:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-19 15:47:07,633:INFO:version 3.3.2
2024-09-19 15:47:07,633:INFO:Initializing setup()
2024-09-19 15:47:07,633:INFO:self.USI: bebc
2024-09-19 15:47:07,633:INFO:self._variable_keys: {'n_jobs_param', 'data', 'X_train', 'seed', 'X', 'fold_groups_param', 'memory', 'fold_shuffle_param', 'gpu_param', 'X_test', 'idx', 'fix_imbalance', '_available_plots', 'y_train', 'y_test', '_ml_usecase', 'fold_generator', 'logging_param', 'log_plots_param', 'exp_name_log', 'is_multiclass', 'exp_id', 'target_param', 'gpu_n_jobs_param', 'y', 'USI', 'pipeline', 'html_param'}
2024-09-19 15:47:07,633:INFO:Checking environment
2024-09-19 15:47:07,633:INFO:python_version: 3.11.9
2024-09-19 15:47:07,633:INFO:python_build: ('main', 'Apr 19 2024 16:40:41')
2024-09-19 15:47:07,633:INFO:machine: AMD64
2024-09-19 15:47:07,633:INFO:platform: Windows-10-10.0.19045-SP0
2024-09-19 15:47:07,640:INFO:Memory: svmem(total=16969424896, available=5063737344, percent=70.2, used=11905687552, free=5063737344)
2024-09-19 15:47:07,640:INFO:Physical Core: 4
2024-09-19 15:47:07,640:INFO:Logical Core: 8
2024-09-19 15:47:07,640:INFO:Checking libraries
2024-09-19 15:47:07,640:INFO:System:
2024-09-19 15:47:07,640:INFO:    python: 3.11.9 | packaged by Anaconda, Inc. | (main, Apr 19 2024, 16:40:41) [MSC v.1916 64 bit (AMD64)]
2024-09-19 15:47:07,640:INFO:executable: C:\Users\juran\anaconda3\envs\myenv\python.exe
2024-09-19 15:47:07,640:INFO:   machine: Windows-10-10.0.19045-SP0
2024-09-19 15:47:07,640:INFO:PyCaret required dependencies:
2024-09-19 15:47:07,640:INFO:                 pip: 24.2
2024-09-19 15:47:07,640:INFO:          setuptools: 72.1.0
2024-09-19 15:47:07,640:INFO:             pycaret: 3.3.2
2024-09-19 15:47:07,640:INFO:             IPython: 8.26.0
2024-09-19 15:47:07,640:INFO:          ipywidgets: 8.1.5
2024-09-19 15:47:07,640:INFO:                tqdm: 4.66.5
2024-09-19 15:47:07,641:INFO:               numpy: 1.26.4
2024-09-19 15:47:07,641:INFO:              pandas: 1.5.3
2024-09-19 15:47:07,641:INFO:              jinja2: 3.1.4
2024-09-19 15:47:07,641:INFO:               scipy: 1.11.4
2024-09-19 15:47:07,641:INFO:              joblib: 1.3.2
2024-09-19 15:47:07,641:INFO:             sklearn: 1.4.2
2024-09-19 15:47:07,641:INFO:                pyod: 2.0.2
2024-09-19 15:47:07,641:INFO:            imblearn: 0.12.3
2024-09-19 15:47:07,641:INFO:   category_encoders: 2.6.3
2024-09-19 15:47:07,641:INFO:            lightgbm: 4.5.0
2024-09-19 15:47:07,641:INFO:               numba: 0.60.0
2024-09-19 15:47:07,641:INFO:            requests: 2.32.3
2024-09-19 15:47:07,641:INFO:          matplotlib: 3.7.5
2024-09-19 15:47:07,641:INFO:          scikitplot: 0.3.7
2024-09-19 15:47:07,642:INFO:         yellowbrick: 1.5
2024-09-19 15:47:07,642:INFO:              plotly: 5.24.1
2024-09-19 15:47:07,642:INFO:    plotly-resampler: Not installed
2024-09-19 15:47:07,642:INFO:             kaleido: 0.2.1
2024-09-19 15:47:07,642:INFO:           schemdraw: 0.15
2024-09-19 15:47:07,642:INFO:         statsmodels: 0.14.3
2024-09-19 15:47:07,642:INFO:              sktime: 0.26.0
2024-09-19 15:47:07,642:INFO:               tbats: 1.1.3
2024-09-19 15:47:07,642:INFO:            pmdarima: 2.0.4
2024-09-19 15:47:07,642:INFO:              psutil: 6.0.0
2024-09-19 15:47:07,642:INFO:          markupsafe: 2.1.5
2024-09-19 15:47:07,642:INFO:             pickle5: Not installed
2024-09-19 15:47:07,642:INFO:         cloudpickle: 3.0.0
2024-09-19 15:47:07,642:INFO:         deprecation: 2.1.0
2024-09-19 15:47:07,642:INFO:              xxhash: 3.5.0
2024-09-19 15:47:07,642:INFO:           wurlitzer: Not installed
2024-09-19 15:47:07,642:INFO:PyCaret optional dependencies:
2024-09-19 15:47:07,642:INFO:                shap: Not installed
2024-09-19 15:47:07,642:INFO:           interpret: Not installed
2024-09-19 15:47:07,642:INFO:                umap: Not installed
2024-09-19 15:47:07,642:INFO:     ydata_profiling: Not installed
2024-09-19 15:47:07,642:INFO:  explainerdashboard: Not installed
2024-09-19 15:47:07,642:INFO:             autoviz: Not installed
2024-09-19 15:47:07,642:INFO:           fairlearn: Not installed
2024-09-19 15:47:07,642:INFO:          deepchecks: Not installed
2024-09-19 15:47:07,642:INFO:             xgboost: Not installed
2024-09-19 15:47:07,642:INFO:            catboost: Not installed
2024-09-19 15:47:07,642:INFO:              kmodes: Not installed
2024-09-19 15:47:07,642:INFO:             mlxtend: Not installed
2024-09-19 15:47:07,642:INFO:       statsforecast: Not installed
2024-09-19 15:47:07,642:INFO:        tune_sklearn: Not installed
2024-09-19 15:47:07,642:INFO:                 ray: Not installed
2024-09-19 15:47:07,642:INFO:            hyperopt: Not installed
2024-09-19 15:47:07,642:INFO:              optuna: Not installed
2024-09-19 15:47:07,642:INFO:               skopt: Not installed
2024-09-19 15:47:07,642:INFO:              mlflow: Not installed
2024-09-19 15:47:07,642:INFO:              gradio: Not installed
2024-09-19 15:47:07,642:INFO:             fastapi: Not installed
2024-09-19 15:47:07,642:INFO:             uvicorn: Not installed
2024-09-19 15:47:07,642:INFO:              m2cgen: Not installed
2024-09-19 15:47:07,642:INFO:           evidently: Not installed
2024-09-19 15:47:07,642:INFO:               fugue: Not installed
2024-09-19 15:47:07,642:INFO:           streamlit: Not installed
2024-09-19 15:47:07,642:INFO:             prophet: Not installed
2024-09-19 15:47:07,642:INFO:None
2024-09-19 15:47:07,642:INFO:Set up data.
2024-09-19 15:47:07,666:INFO:Set up folding strategy.
2024-09-19 15:47:07,666:INFO:Set up train/test split.
2024-09-19 15:47:07,679:INFO:Set up index.
2024-09-19 15:47:07,679:INFO:Assigning column types.
2024-09-19 15:47:07,682:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-19 15:47:07,768:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-19 15:47:07,768:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 15:47:07,799:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:47:07,799:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:47:07,846:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-19 15:47:07,846:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 15:47:07,904:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:47:07,904:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:47:07,904:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-19 15:47:07,967:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 15:47:08,014:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:47:08,014:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:47:08,092:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 15:47:08,123:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:47:08,123:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:47:08,123:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-19 15:47:08,185:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:47:08,185:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:47:08,300:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:47:08,300:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:47:08,303:INFO:Preparing preprocessing pipeline...
2024-09-19 15:47:08,305:INFO:Set up label encoding.
2024-09-19 15:47:08,306:INFO:Set up simple imputation.
2024-09-19 15:47:08,317:INFO:Set up encoding of ordinal features.
2024-09-19 15:47:08,327:INFO:Set up encoding of categorical features.
2024-09-19 15:47:08,763:INFO:Finished creating preprocessing pipeline.
2024-09-19 15:47:08,797:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\juran\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indica...
                                                               verbose=0))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['job', 'marital', 'education',
                                             'contact', 'month', 'poutcome'],
                                    transformer=OneHotEncoder(cols=['job',
                                                                    'marital',
                                                                    'education',
                                                                    'contact',
                                                                    'month',
                                                                    'poutcome'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False)
2024-09-19 15:47:08,797:INFO:Creating final display dataframe.
2024-09-19 15:47:08,928:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target           deposit
2                   Target type            Binary
3                Target mapping     no: 0, yes: 1
4           Original data shape       (11162, 17)
5        Transformed data shape       (11162, 49)
6   Transformed train set shape        (7813, 49)
7    Transformed test set shape        (3349, 49)
8              Numeric features                 7
9          Categorical features                 9
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16               Fold Generator   StratifiedKFold
17                  Fold Number                10
18                     CPU Jobs                -1
19                      Use GPU             False
20               Log Experiment             False
21              Experiment Name  clf-default-name
22                          USI              bebc
2024-09-19 15:47:09,060:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:47:09,061:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:47:09,193:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:47:09,193:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:47:09,194:INFO:setup() successfully completed in 1.57s...............
2024-09-19 15:47:19,508:INFO:Initializing compare_models()
2024-09-19 15:47:19,508:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2024-09-19 15:47:19,508:INFO:Checking exceptions
2024-09-19 15:47:19,514:INFO:Preparing display monitor
2024-09-19 15:47:19,546:INFO:Initializing Logistic Regression
2024-09-19 15:47:19,546:INFO:Total runtime is 0.0 minutes
2024-09-19 15:47:19,547:INFO:SubProcess create_model() called ==================================
2024-09-19 15:47:19,547:INFO:Initializing create_model()
2024-09-19 15:47:19,547:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253CE28E750>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:47:19,547:INFO:Checking exceptions
2024-09-19 15:47:19,547:INFO:Importing libraries
2024-09-19 15:47:19,547:INFO:Copying training dataset
2024-09-19 15:47:19,557:INFO:Defining folds
2024-09-19 15:47:19,557:INFO:Declaring metric variables
2024-09-19 15:47:19,561:INFO:Importing untrained model
2024-09-19 15:47:19,562:INFO:Logistic Regression Imported successfully
2024-09-19 15:47:19,572:INFO:Starting cross validation
2024-09-19 15:47:19,574:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:47:24,882:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:24,895:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:24,911:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:24,911:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:24,916:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:24,927:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:24,927:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:24,937:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:24,937:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:24,948:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:24,957:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:24,957:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:24,979:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:24,988:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:24,988:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:25,008:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:25,029:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:25,040:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:25,127:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:25,139:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:25,151:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:25,161:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:25,171:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:25,178:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:25,362:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:25,372:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:25,372:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:25,386:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:25,386:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:25,394:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:25,403:INFO:Calculating mean and std
2024-09-19 15:47:25,404:INFO:Creating metrics dataframe
2024-09-19 15:47:25,408:INFO:Uploading results into container
2024-09-19 15:47:25,409:INFO:Uploading model into container now
2024-09-19 15:47:25,410:INFO:_master_model_container: 1
2024-09-19 15:47:25,410:INFO:_display_container: 2
2024-09-19 15:47:25,410:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-19 15:47:25,410:INFO:create_model() successfully completed......................................
2024-09-19 15:47:25,770:INFO:SubProcess create_model() end ==================================
2024-09-19 15:47:25,770:INFO:Creating metrics dataframe
2024-09-19 15:47:25,787:INFO:Initializing K Neighbors Classifier
2024-09-19 15:47:25,787:INFO:Total runtime is 0.10402244726816813 minutes
2024-09-19 15:47:25,787:INFO:SubProcess create_model() called ==================================
2024-09-19 15:47:25,787:INFO:Initializing create_model()
2024-09-19 15:47:25,787:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253CE28E750>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:47:25,787:INFO:Checking exceptions
2024-09-19 15:47:25,787:INFO:Importing libraries
2024-09-19 15:47:25,787:INFO:Copying training dataset
2024-09-19 15:47:25,805:INFO:Defining folds
2024-09-19 15:47:25,805:INFO:Declaring metric variables
2024-09-19 15:47:25,820:INFO:Importing untrained model
2024-09-19 15:47:25,821:INFO:K Neighbors Classifier Imported successfully
2024-09-19 15:47:25,821:INFO:Starting cross validation
2024-09-19 15:47:25,838:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:47:26,542:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:26,544:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:26,554:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:26,554:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:26,554:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:26,554:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:26,570:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:26,574:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:26,574:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:26,587:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:26,587:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:26,607:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:26,613:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:26,626:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:26,631:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:26,647:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:26,655:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:26,657:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:26,657:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:26,663:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:26,663:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:26,667:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:26,671:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:26,671:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:26,970:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:26,970:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:26,970:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:26,978:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:26,978:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:26,978:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:26,999:INFO:Calculating mean and std
2024-09-19 15:47:26,999:INFO:Creating metrics dataframe
2024-09-19 15:47:27,004:INFO:Uploading results into container
2024-09-19 15:47:27,004:INFO:Uploading model into container now
2024-09-19 15:47:27,004:INFO:_master_model_container: 2
2024-09-19 15:47:27,004:INFO:_display_container: 2
2024-09-19 15:47:27,004:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-09-19 15:47:27,004:INFO:create_model() successfully completed......................................
2024-09-19 15:47:27,303:INFO:SubProcess create_model() end ==================================
2024-09-19 15:47:27,303:INFO:Creating metrics dataframe
2024-09-19 15:47:27,322:INFO:Initializing Naive Bayes
2024-09-19 15:47:27,322:INFO:Total runtime is 0.12960145076115925 minutes
2024-09-19 15:47:27,325:INFO:SubProcess create_model() called ==================================
2024-09-19 15:47:27,325:INFO:Initializing create_model()
2024-09-19 15:47:27,325:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253CE28E750>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:47:27,325:INFO:Checking exceptions
2024-09-19 15:47:27,325:INFO:Importing libraries
2024-09-19 15:47:27,325:INFO:Copying training dataset
2024-09-19 15:47:27,334:INFO:Defining folds
2024-09-19 15:47:27,334:INFO:Declaring metric variables
2024-09-19 15:47:27,339:INFO:Importing untrained model
2024-09-19 15:47:27,343:INFO:Naive Bayes Imported successfully
2024-09-19 15:47:27,355:INFO:Starting cross validation
2024-09-19 15:47:27,357:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:47:27,863:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:27,866:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:27,875:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:27,877:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:27,879:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:27,882:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:27,886:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:27,889:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:27,889:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:27,894:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:27,896:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:27,908:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:27,977:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:27,982:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:27,984:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:27,988:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:27,993:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:27,995:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:28,000:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:28,001:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:28,005:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:28,049:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:28,061:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:28,073:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:28,302:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:28,312:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:28,317:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:28,323:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:28,325:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:28,338:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:28,354:INFO:Calculating mean and std
2024-09-19 15:47:28,354:INFO:Creating metrics dataframe
2024-09-19 15:47:28,357:INFO:Uploading results into container
2024-09-19 15:47:28,357:INFO:Uploading model into container now
2024-09-19 15:47:28,358:INFO:_master_model_container: 3
2024-09-19 15:47:28,358:INFO:_display_container: 2
2024-09-19 15:47:28,358:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-09-19 15:47:28,358:INFO:create_model() successfully completed......................................
2024-09-19 15:47:28,685:INFO:SubProcess create_model() end ==================================
2024-09-19 15:47:28,686:INFO:Creating metrics dataframe
2024-09-19 15:47:28,696:INFO:Initializing Decision Tree Classifier
2024-09-19 15:47:28,696:INFO:Total runtime is 0.1525039513905843 minutes
2024-09-19 15:47:28,700:INFO:SubProcess create_model() called ==================================
2024-09-19 15:47:28,700:INFO:Initializing create_model()
2024-09-19 15:47:28,700:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253CE28E750>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:47:28,700:INFO:Checking exceptions
2024-09-19 15:47:28,701:INFO:Importing libraries
2024-09-19 15:47:28,701:INFO:Copying training dataset
2024-09-19 15:47:28,712:INFO:Defining folds
2024-09-19 15:47:28,712:INFO:Declaring metric variables
2024-09-19 15:47:28,716:INFO:Importing untrained model
2024-09-19 15:47:28,721:INFO:Decision Tree Classifier Imported successfully
2024-09-19 15:47:28,727:INFO:Starting cross validation
2024-09-19 15:47:28,731:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:47:29,333:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:29,343:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:29,344:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:29,351:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:29,354:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:29,357:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:29,362:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:29,365:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:29,367:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:29,372:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:29,381:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:29,387:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:29,391:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:29,398:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:29,420:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:29,467:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:29,477:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:29,482:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:29,489:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:29,489:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:29,494:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:29,498:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:29,504:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:29,509:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:29,900:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:29,916:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:29,928:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:29,939:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:29,953:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:29,970:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:29,993:INFO:Calculating mean and std
2024-09-19 15:47:29,993:INFO:Creating metrics dataframe
2024-09-19 15:47:29,993:INFO:Uploading results into container
2024-09-19 15:47:29,993:INFO:Uploading model into container now
2024-09-19 15:47:29,993:INFO:_master_model_container: 4
2024-09-19 15:47:29,993:INFO:_display_container: 2
2024-09-19 15:47:29,993:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-09-19 15:47:29,993:INFO:create_model() successfully completed......................................
2024-09-19 15:47:30,344:INFO:SubProcess create_model() end ==================================
2024-09-19 15:47:30,345:INFO:Creating metrics dataframe
2024-09-19 15:47:30,364:INFO:Initializing SVM - Linear Kernel
2024-09-19 15:47:30,365:INFO:Total runtime is 0.18033106724421183 minutes
2024-09-19 15:47:30,370:INFO:SubProcess create_model() called ==================================
2024-09-19 15:47:30,371:INFO:Initializing create_model()
2024-09-19 15:47:30,371:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253CE28E750>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:47:30,371:INFO:Checking exceptions
2024-09-19 15:47:30,371:INFO:Importing libraries
2024-09-19 15:47:30,371:INFO:Copying training dataset
2024-09-19 15:47:30,380:INFO:Defining folds
2024-09-19 15:47:30,380:INFO:Declaring metric variables
2024-09-19 15:47:30,383:INFO:Importing untrained model
2024-09-19 15:47:30,389:INFO:SVM - Linear Kernel Imported successfully
2024-09-19 15:47:30,399:INFO:Starting cross validation
2024-09-19 15:47:30,403:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:47:31,095:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:31,101:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:31,104:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:31,107:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:31,112:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:31,117:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:31,120:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:31,128:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:31,130:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:31,165:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:31,179:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:31,194:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:31,201:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:31,211:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:31,214:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:31,224:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:31,227:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:31,228:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:31,236:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:31,240:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:31,249:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:31,250:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:31,263:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:31,277:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:31,767:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:31,770:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:31,775:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:31,778:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:31,788:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:31,790:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:31,816:INFO:Calculating mean and std
2024-09-19 15:47:31,817:INFO:Creating metrics dataframe
2024-09-19 15:47:31,822:INFO:Uploading results into container
2024-09-19 15:47:31,823:INFO:Uploading model into container now
2024-09-19 15:47:31,824:INFO:_master_model_container: 5
2024-09-19 15:47:31,824:INFO:_display_container: 2
2024-09-19 15:47:31,825:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-09-19 15:47:31,825:INFO:create_model() successfully completed......................................
2024-09-19 15:47:32,201:INFO:SubProcess create_model() end ==================================
2024-09-19 15:47:32,201:INFO:Creating metrics dataframe
2024-09-19 15:47:32,227:INFO:Initializing Ridge Classifier
2024-09-19 15:47:32,227:INFO:Total runtime is 0.21135695377985636 minutes
2024-09-19 15:47:32,231:INFO:SubProcess create_model() called ==================================
2024-09-19 15:47:32,232:INFO:Initializing create_model()
2024-09-19 15:47:32,232:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253CE28E750>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:47:32,232:INFO:Checking exceptions
2024-09-19 15:47:32,232:INFO:Importing libraries
2024-09-19 15:47:32,232:INFO:Copying training dataset
2024-09-19 15:47:32,242:INFO:Defining folds
2024-09-19 15:47:32,242:INFO:Declaring metric variables
2024-09-19 15:47:32,247:INFO:Importing untrained model
2024-09-19 15:47:32,252:INFO:Ridge Classifier Imported successfully
2024-09-19 15:47:32,262:INFO:Starting cross validation
2024-09-19 15:47:32,264:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:47:32,792:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:32,794:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:32,801:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:32,805:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:32,807:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:32,812:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:32,816:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:32,817:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:32,825:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:32,849:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:32,854:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:32,861:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:32,865:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:32,871:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:32,878:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:32,904:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:32,914:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:32,915:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:32,925:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:32,929:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:32,939:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:32,946:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:32,955:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:32,966:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:33,243:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:33,258:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:33,264:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:33,277:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:33,287:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:33,303:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:33,327:INFO:Calculating mean and std
2024-09-19 15:47:33,327:INFO:Creating metrics dataframe
2024-09-19 15:47:33,327:INFO:Uploading results into container
2024-09-19 15:47:33,327:INFO:Uploading model into container now
2024-09-19 15:47:33,337:INFO:_master_model_container: 6
2024-09-19 15:47:33,337:INFO:_display_container: 2
2024-09-19 15:47:33,337:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-09-19 15:47:33,337:INFO:create_model() successfully completed......................................
2024-09-19 15:47:33,637:INFO:SubProcess create_model() end ==================================
2024-09-19 15:47:33,638:INFO:Creating metrics dataframe
2024-09-19 15:47:33,650:INFO:Initializing Random Forest Classifier
2024-09-19 15:47:33,650:INFO:Total runtime is 0.23507785002390544 minutes
2024-09-19 15:47:33,654:INFO:SubProcess create_model() called ==================================
2024-09-19 15:47:33,654:INFO:Initializing create_model()
2024-09-19 15:47:33,654:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253CE28E750>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:47:33,654:INFO:Checking exceptions
2024-09-19 15:47:33,654:INFO:Importing libraries
2024-09-19 15:47:33,654:INFO:Copying training dataset
2024-09-19 15:47:33,663:INFO:Defining folds
2024-09-19 15:47:33,663:INFO:Declaring metric variables
2024-09-19 15:47:33,668:INFO:Importing untrained model
2024-09-19 15:47:33,673:INFO:Random Forest Classifier Imported successfully
2024-09-19 15:47:33,683:INFO:Starting cross validation
2024-09-19 15:47:33,686:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:47:35,742:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:35,743:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:35,743:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:35,753:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:35,754:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:35,754:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:35,767:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:35,770:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:35,771:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:35,842:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:35,847:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:35,853:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:35,854:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:35,858:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:35,858:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:35,865:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:35,867:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:35,870:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:35,872:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:35,880:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:35,881:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:35,890:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:35,900:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:36,770:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:36,786:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:36,793:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:36,802:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:36,806:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:36,817:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:36,842:INFO:Calculating mean and std
2024-09-19 15:47:36,842:INFO:Creating metrics dataframe
2024-09-19 15:47:36,842:INFO:Uploading results into container
2024-09-19 15:47:36,842:INFO:Uploading model into container now
2024-09-19 15:47:36,842:INFO:_master_model_container: 7
2024-09-19 15:47:36,842:INFO:_display_container: 2
2024-09-19 15:47:36,842:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-09-19 15:47:36,842:INFO:create_model() successfully completed......................................
2024-09-19 15:47:37,126:INFO:SubProcess create_model() end ==================================
2024-09-19 15:47:37,126:INFO:Creating metrics dataframe
2024-09-19 15:47:37,142:INFO:Initializing Quadratic Discriminant Analysis
2024-09-19 15:47:37,142:INFO:Total runtime is 0.29326714674631754 minutes
2024-09-19 15:47:37,142:INFO:SubProcess create_model() called ==================================
2024-09-19 15:47:37,142:INFO:Initializing create_model()
2024-09-19 15:47:37,142:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253CE28E750>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:47:37,142:INFO:Checking exceptions
2024-09-19 15:47:37,142:INFO:Importing libraries
2024-09-19 15:47:37,142:INFO:Copying training dataset
2024-09-19 15:47:37,156:INFO:Defining folds
2024-09-19 15:47:37,156:INFO:Declaring metric variables
2024-09-19 15:47:37,159:INFO:Importing untrained model
2024-09-19 15:47:37,163:INFO:Quadratic Discriminant Analysis Imported successfully
2024-09-19 15:47:37,172:INFO:Starting cross validation
2024-09-19 15:47:37,174:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:47:37,545:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:47:37,548:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:47:37,555:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:47:37,555:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:47:37,560:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:47:37,563:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:47:37,563:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:47:37,653:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:37,653:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:37,654:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:37,657:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:37,657:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:37,657:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:37,657:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:37,663:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:37,664:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:37,664:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:37,664:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:37,667:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:37,670:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:37,670:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:37,670:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:37,670:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:37,670:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:37,670:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:37,677:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:37,677:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:37,677:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:37,677:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:37,677:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:38,036:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:47:38,045:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:47:38,123:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:38,129:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:38,129:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:38,139:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:38,139:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:38,154:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:38,170:INFO:Calculating mean and std
2024-09-19 15:47:38,171:INFO:Creating metrics dataframe
2024-09-19 15:47:38,174:INFO:Uploading results into container
2024-09-19 15:47:38,175:INFO:Uploading model into container now
2024-09-19 15:47:38,175:INFO:_master_model_container: 8
2024-09-19 15:47:38,175:INFO:_display_container: 2
2024-09-19 15:47:38,175:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-09-19 15:47:38,175:INFO:create_model() successfully completed......................................
2024-09-19 15:47:38,469:INFO:SubProcess create_model() end ==================================
2024-09-19 15:47:38,469:INFO:Creating metrics dataframe
2024-09-19 15:47:38,474:INFO:Initializing Ada Boost Classifier
2024-09-19 15:47:38,474:INFO:Total runtime is 0.3154697378476461 minutes
2024-09-19 15:47:38,474:INFO:SubProcess create_model() called ==================================
2024-09-19 15:47:38,474:INFO:Initializing create_model()
2024-09-19 15:47:38,474:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253CE28E750>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:47:38,474:INFO:Checking exceptions
2024-09-19 15:47:38,474:INFO:Importing libraries
2024-09-19 15:47:38,474:INFO:Copying training dataset
2024-09-19 15:47:38,491:INFO:Defining folds
2024-09-19 15:47:38,491:INFO:Declaring metric variables
2024-09-19 15:47:38,495:INFO:Importing untrained model
2024-09-19 15:47:38,496:INFO:Ada Boost Classifier Imported successfully
2024-09-19 15:47:38,523:INFO:Starting cross validation
2024-09-19 15:47:38,526:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:47:38,873:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:47:38,875:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:47:38,877:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:47:38,880:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:47:38,893:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:47:38,916:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:47:39,653:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:39,653:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:39,653:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:39,653:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:39,653:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:39,662:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:39,662:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:39,669:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:39,669:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:39,669:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:39,669:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:39,669:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:39,669:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:39,669:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:39,669:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:39,669:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:39,669:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:39,687:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:39,687:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:39,700:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:39,701:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:39,711:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:39,717:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:39,727:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:39,945:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:47:39,966:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:47:40,715:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:40,738:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:40,753:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:40,763:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:40,773:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:40,787:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:40,814:INFO:Calculating mean and std
2024-09-19 15:47:40,814:INFO:Creating metrics dataframe
2024-09-19 15:47:40,821:INFO:Uploading results into container
2024-09-19 15:47:40,822:INFO:Uploading model into container now
2024-09-19 15:47:40,822:INFO:_master_model_container: 9
2024-09-19 15:47:40,823:INFO:_display_container: 2
2024-09-19 15:47:40,823:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-09-19 15:47:40,824:INFO:create_model() successfully completed......................................
2024-09-19 15:47:41,087:INFO:SubProcess create_model() end ==================================
2024-09-19 15:47:41,087:INFO:Creating metrics dataframe
2024-09-19 15:47:41,112:INFO:Initializing Gradient Boosting Classifier
2024-09-19 15:47:41,112:INFO:Total runtime is 0.35944624344507853 minutes
2024-09-19 15:47:41,119:INFO:SubProcess create_model() called ==================================
2024-09-19 15:47:41,120:INFO:Initializing create_model()
2024-09-19 15:47:41,120:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253CE28E750>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:47:41,120:INFO:Checking exceptions
2024-09-19 15:47:41,120:INFO:Importing libraries
2024-09-19 15:47:41,120:INFO:Copying training dataset
2024-09-19 15:47:41,127:INFO:Defining folds
2024-09-19 15:47:41,127:INFO:Declaring metric variables
2024-09-19 15:47:41,135:INFO:Importing untrained model
2024-09-19 15:47:41,140:INFO:Gradient Boosting Classifier Imported successfully
2024-09-19 15:47:41,147:INFO:Starting cross validation
2024-09-19 15:47:41,150:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:47:43,615:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:43,621:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:43,627:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:43,632:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:43,638:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:43,639:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:43,643:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:43,649:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:43,665:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:43,748:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:43,767:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:43,779:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:43,893:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:43,904:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:43,916:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:44,005:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:44,016:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:44,027:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:44,035:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:44,046:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:44,056:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:44,082:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:44,091:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:44,099:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:46,037:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:46,044:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:46,054:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:46,086:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:46,095:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:46,105:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:46,126:INFO:Calculating mean and std
2024-09-19 15:47:46,126:INFO:Creating metrics dataframe
2024-09-19 15:47:46,126:INFO:Uploading results into container
2024-09-19 15:47:46,135:INFO:Uploading model into container now
2024-09-19 15:47:46,136:INFO:_master_model_container: 10
2024-09-19 15:47:46,136:INFO:_display_container: 2
2024-09-19 15:47:46,136:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-09-19 15:47:46,136:INFO:create_model() successfully completed......................................
2024-09-19 15:47:46,406:INFO:SubProcess create_model() end ==================================
2024-09-19 15:47:46,406:INFO:Creating metrics dataframe
2024-09-19 15:47:46,425:INFO:Initializing Linear Discriminant Analysis
2024-09-19 15:47:46,425:INFO:Total runtime is 0.44798251390457156 minutes
2024-09-19 15:47:46,425:INFO:SubProcess create_model() called ==================================
2024-09-19 15:47:46,425:INFO:Initializing create_model()
2024-09-19 15:47:46,425:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253CE28E750>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:47:46,425:INFO:Checking exceptions
2024-09-19 15:47:46,425:INFO:Importing libraries
2024-09-19 15:47:46,425:INFO:Copying training dataset
2024-09-19 15:47:46,443:INFO:Defining folds
2024-09-19 15:47:46,443:INFO:Declaring metric variables
2024-09-19 15:47:46,452:INFO:Importing untrained model
2024-09-19 15:47:46,456:INFO:Linear Discriminant Analysis Imported successfully
2024-09-19 15:47:46,456:INFO:Starting cross validation
2024-09-19 15:47:46,456:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:47:46,952:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:46,964:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:46,965:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:46,970:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:46,972:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:46,974:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:46,975:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:46,976:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:46,977:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:46,982:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:46,982:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:46,983:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:46,986:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:46,986:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:46,986:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:46,986:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:46,993:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:46,993:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:46,993:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:46,993:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:46,993:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:46,993:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:47,003:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:47,010:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:47,345:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:47,356:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:47,361:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:47,368:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:47,371:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:47,382:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:47,397:INFO:Calculating mean and std
2024-09-19 15:47:47,398:INFO:Creating metrics dataframe
2024-09-19 15:47:47,401:INFO:Uploading results into container
2024-09-19 15:47:47,402:INFO:Uploading model into container now
2024-09-19 15:47:47,402:INFO:_master_model_container: 11
2024-09-19 15:47:47,402:INFO:_display_container: 2
2024-09-19 15:47:47,402:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-09-19 15:47:47,402:INFO:create_model() successfully completed......................................
2024-09-19 15:47:47,706:INFO:SubProcess create_model() end ==================================
2024-09-19 15:47:47,706:INFO:Creating metrics dataframe
2024-09-19 15:47:47,733:INFO:Initializing Extra Trees Classifier
2024-09-19 15:47:47,733:INFO:Total runtime is 0.46979887088139854 minutes
2024-09-19 15:47:47,738:INFO:SubProcess create_model() called ==================================
2024-09-19 15:47:47,738:INFO:Initializing create_model()
2024-09-19 15:47:47,738:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253CE28E750>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:47:47,738:INFO:Checking exceptions
2024-09-19 15:47:47,738:INFO:Importing libraries
2024-09-19 15:47:47,738:INFO:Copying training dataset
2024-09-19 15:47:47,754:INFO:Defining folds
2024-09-19 15:47:47,754:INFO:Declaring metric variables
2024-09-19 15:47:47,754:INFO:Importing untrained model
2024-09-19 15:47:47,754:INFO:Extra Trees Classifier Imported successfully
2024-09-19 15:47:47,772:INFO:Starting cross validation
2024-09-19 15:47:47,784:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:47:49,780:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:49,781:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:49,791:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:49,792:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:49,792:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:49,796:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:49,803:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:49,803:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:49,803:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:49,808:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:49,808:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:49,816:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:49,818:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:49,821:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:49,821:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:49,832:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:49,834:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:49,854:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:49,899:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:49,900:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:49,910:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:49,911:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:49,920:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:49,921:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:50,715:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:50,723:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:50,723:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:50,733:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:50,733:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:50,733:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:50,763:INFO:Calculating mean and std
2024-09-19 15:47:50,763:INFO:Creating metrics dataframe
2024-09-19 15:47:50,763:INFO:Uploading results into container
2024-09-19 15:47:50,763:INFO:Uploading model into container now
2024-09-19 15:47:50,763:INFO:_master_model_container: 12
2024-09-19 15:47:50,763:INFO:_display_container: 2
2024-09-19 15:47:50,763:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-09-19 15:47:50,763:INFO:create_model() successfully completed......................................
2024-09-19 15:47:51,153:INFO:SubProcess create_model() end ==================================
2024-09-19 15:47:51,153:INFO:Creating metrics dataframe
2024-09-19 15:47:51,174:INFO:Initializing Light Gradient Boosting Machine
2024-09-19 15:47:51,175:INFO:Total runtime is 0.5271594564119975 minutes
2024-09-19 15:47:51,179:INFO:SubProcess create_model() called ==================================
2024-09-19 15:47:51,179:INFO:Initializing create_model()
2024-09-19 15:47:51,179:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253CE28E750>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:47:51,180:INFO:Checking exceptions
2024-09-19 15:47:51,180:INFO:Importing libraries
2024-09-19 15:47:51,180:INFO:Copying training dataset
2024-09-19 15:47:51,204:INFO:Defining folds
2024-09-19 15:47:51,205:INFO:Declaring metric variables
2024-09-19 15:47:51,217:INFO:Importing untrained model
2024-09-19 15:47:51,223:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-19 15:47:51,234:INFO:Starting cross validation
2024-09-19 15:47:51,237:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:47:52,902:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:52,909:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:52,911:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:52,911:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:52,920:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:52,922:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:52,922:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:52,930:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:52,940:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:52,945:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:52,950:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:52,961:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:53,115:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:53,128:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:53,147:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:53,177:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:53,193:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:53,205:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:53,348:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:53,361:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:53,372:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:53,561:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:53,571:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:53,580:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:53,771:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:53,780:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:53,791:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:53,799:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:53,808:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:53,815:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:53,842:INFO:Calculating mean and std
2024-09-19 15:47:53,843:INFO:Creating metrics dataframe
2024-09-19 15:47:53,847:INFO:Uploading results into container
2024-09-19 15:47:53,848:INFO:Uploading model into container now
2024-09-19 15:47:53,849:INFO:_master_model_container: 13
2024-09-19 15:47:53,849:INFO:_display_container: 2
2024-09-19 15:47:53,850:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-19 15:47:53,850:INFO:create_model() successfully completed......................................
2024-09-19 15:47:54,209:INFO:SubProcess create_model() end ==================================
2024-09-19 15:47:54,209:INFO:Creating metrics dataframe
2024-09-19 15:47:54,239:INFO:Initializing Dummy Classifier
2024-09-19 15:47:54,239:INFO:Total runtime is 0.5782283465067546 minutes
2024-09-19 15:47:54,243:INFO:SubProcess create_model() called ==================================
2024-09-19 15:47:54,243:INFO:Initializing create_model()
2024-09-19 15:47:54,243:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253CE28E750>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:47:54,243:INFO:Checking exceptions
2024-09-19 15:47:54,243:INFO:Importing libraries
2024-09-19 15:47:54,243:INFO:Copying training dataset
2024-09-19 15:47:54,255:INFO:Defining folds
2024-09-19 15:47:54,256:INFO:Declaring metric variables
2024-09-19 15:47:54,268:INFO:Importing untrained model
2024-09-19 15:47:54,276:INFO:Dummy Classifier Imported successfully
2024-09-19 15:47:54,287:INFO:Starting cross validation
2024-09-19 15:47:54,290:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:47:54,765:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:54,776:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:54,777:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:54,781:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:47:54,786:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:54,789:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:54,794:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:54,798:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:54,800:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:47:54,805:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:47:54,808:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:54,809:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:54,821:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:54,832:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:54,839:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:47:54,844:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:54,882:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:54,897:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:54,902:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:54,904:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:47:54,909:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:54,912:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:54,918:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:54,918:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:47:54,924:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:54,928:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:54,931:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:47:54,935:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:54,952:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:54,963:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:54,971:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:47:54,975:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:55,225:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:55,241:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:55,241:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:55,245:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:47:55,245:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:55,253:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:55,258:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:47:55,258:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:55,287:INFO:Calculating mean and std
2024-09-19 15:47:55,288:INFO:Creating metrics dataframe
2024-09-19 15:47:55,292:INFO:Uploading results into container
2024-09-19 15:47:55,292:INFO:Uploading model into container now
2024-09-19 15:47:55,292:INFO:_master_model_container: 14
2024-09-19 15:47:55,292:INFO:_display_container: 2
2024-09-19 15:47:55,292:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-09-19 15:47:55,292:INFO:create_model() successfully completed......................................
2024-09-19 15:47:55,591:INFO:SubProcess create_model() end ==================================
2024-09-19 15:47:55,591:INFO:Creating metrics dataframe
2024-09-19 15:47:55,644:INFO:Initializing create_model()
2024-09-19 15:47:55,645:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:47:55,645:INFO:Checking exceptions
2024-09-19 15:47:55,647:INFO:Importing libraries
2024-09-19 15:47:55,647:INFO:Copying training dataset
2024-09-19 15:47:55,659:INFO:Defining folds
2024-09-19 15:47:55,659:INFO:Declaring metric variables
2024-09-19 15:47:55,659:INFO:Importing untrained model
2024-09-19 15:47:55,659:INFO:Declaring custom model
2024-09-19 15:47:55,661:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-19 15:47:55,663:INFO:Cross validation set to False
2024-09-19 15:47:55,664:INFO:Fitting Model
2024-09-19 15:47:56,015:INFO:[LightGBM] [Info] Number of positive: 4231, number of negative: 4698
2024-09-19 15:47:56,019:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001005 seconds.
2024-09-19 15:47:56,019:INFO:You can set `force_row_wise=true` to remove the overhead.
2024-09-19 15:47:56,019:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2024-09-19 15:47:56,020:INFO:[LightGBM] [Info] Total Bins 1045
2024-09-19 15:47:56,022:INFO:[LightGBM] [Info] Number of data points in the train set: 8929, number of used features: 48
2024-09-19 15:47:56,023:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.473849 -> initscore=-0.104699
2024-09-19 15:47:56,023:INFO:[LightGBM] [Info] Start training from score -0.104699
2024-09-19 15:47:56,156:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-19 15:47:56,156:INFO:create_model() successfully completed......................................
2024-09-19 15:47:56,534:INFO:_master_model_container: 14
2024-09-19 15:47:56,534:INFO:_display_container: 2
2024-09-19 15:47:56,535:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-19 15:47:56,535:INFO:compare_models() successfully completed......................................
2024-09-19 15:47:56,669:INFO:Initializing compare_models()
2024-09-19 15:47:56,669:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D31D24D0>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000253D31D24D0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2024-09-19 15:47:56,669:INFO:Checking exceptions
2024-09-19 15:47:56,674:INFO:Preparing display monitor
2024-09-19 15:47:56,709:INFO:Initializing Logistic Regression
2024-09-19 15:47:56,709:INFO:Total runtime is 8.388360341389973e-06 minutes
2024-09-19 15:47:56,712:INFO:SubProcess create_model() called ==================================
2024-09-19 15:47:56,712:INFO:Initializing create_model()
2024-09-19 15:47:56,712:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D31D24D0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:47:56,712:INFO:Checking exceptions
2024-09-19 15:47:56,712:INFO:Importing libraries
2024-09-19 15:47:56,712:INFO:Copying training dataset
2024-09-19 15:47:56,724:INFO:Defining folds
2024-09-19 15:47:56,724:INFO:Declaring metric variables
2024-09-19 15:47:56,724:INFO:Importing untrained model
2024-09-19 15:47:56,734:INFO:Logistic Regression Imported successfully
2024-09-19 15:47:56,752:INFO:Starting cross validation
2024-09-19 15:47:56,753:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:47:58,506:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-09-19 15:47:58,536:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-09-19 15:47:58,567:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-09-19 15:47:58,678:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:58,682:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:58,693:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:58,704:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:58,726:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:58,733:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:58,738:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:58,746:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:58,779:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:59,028:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-09-19 15:47:59,047:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-09-19 15:47:59,058:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-09-19 15:47:59,129:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:59,136:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-09-19 15:47:59,142:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:59,153:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:59,157:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:59,164:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:59,166:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:59,172:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-09-19 15:47:59,175:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:59,186:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:59,187:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:59,242:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:59,253:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:59,264:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:59,273:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:59,279:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:47:59,288:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:00,169:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-09-19 15:48:00,191:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-09-19 15:48:00,262:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:00,273:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:00,273:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:00,286:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:00,290:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:00,299:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:00,325:INFO:Calculating mean and std
2024-09-19 15:48:00,325:INFO:Creating metrics dataframe
2024-09-19 15:48:00,325:INFO:Uploading results into container
2024-09-19 15:48:00,325:INFO:Uploading model into container now
2024-09-19 15:48:00,325:INFO:_master_model_container: 1
2024-09-19 15:48:00,325:INFO:_display_container: 2
2024-09-19 15:48:00,335:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-19 15:48:00,335:INFO:create_model() successfully completed......................................
2024-09-19 15:48:00,652:INFO:SubProcess create_model() end ==================================
2024-09-19 15:48:00,652:INFO:Creating metrics dataframe
2024-09-19 15:48:00,652:INFO:Initializing K Neighbors Classifier
2024-09-19 15:48:00,652:INFO:Total runtime is 0.0657198190689087 minutes
2024-09-19 15:48:00,670:INFO:SubProcess create_model() called ==================================
2024-09-19 15:48:00,670:INFO:Initializing create_model()
2024-09-19 15:48:00,670:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D31D24D0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:48:00,670:INFO:Checking exceptions
2024-09-19 15:48:00,670:INFO:Importing libraries
2024-09-19 15:48:00,670:INFO:Copying training dataset
2024-09-19 15:48:00,670:INFO:Defining folds
2024-09-19 15:48:00,670:INFO:Declaring metric variables
2024-09-19 15:48:00,670:INFO:Importing untrained model
2024-09-19 15:48:00,687:INFO:K Neighbors Classifier Imported successfully
2024-09-19 15:48:00,687:INFO:Starting cross validation
2024-09-19 15:48:00,687:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:48:01,258:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:01,272:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:01,272:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:01,272:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:01,272:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:01,272:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:01,279:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:01,279:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:01,279:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:01,288:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:01,288:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:01,289:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:01,289:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:01,289:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:01,289:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:01,289:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:01,289:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:01,306:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:01,308:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:01,310:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:01,319:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:01,326:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:01,868:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:01,871:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:01,871:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:01,881:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:01,885:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:01,885:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:01,912:INFO:Calculating mean and std
2024-09-19 15:48:01,912:INFO:Creating metrics dataframe
2024-09-19 15:48:01,919:INFO:Uploading results into container
2024-09-19 15:48:01,920:INFO:Uploading model into container now
2024-09-19 15:48:01,920:INFO:_master_model_container: 2
2024-09-19 15:48:01,921:INFO:_display_container: 2
2024-09-19 15:48:01,922:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-09-19 15:48:01,922:INFO:create_model() successfully completed......................................
2024-09-19 15:48:02,234:INFO:SubProcess create_model() end ==================================
2024-09-19 15:48:02,235:INFO:Creating metrics dataframe
2024-09-19 15:48:02,235:INFO:Initializing Naive Bayes
2024-09-19 15:48:02,235:INFO:Total runtime is 0.09209798574447632 minutes
2024-09-19 15:48:02,235:INFO:SubProcess create_model() called ==================================
2024-09-19 15:48:02,235:INFO:Initializing create_model()
2024-09-19 15:48:02,235:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D31D24D0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:48:02,235:INFO:Checking exceptions
2024-09-19 15:48:02,235:INFO:Importing libraries
2024-09-19 15:48:02,235:INFO:Copying training dataset
2024-09-19 15:48:02,252:INFO:Defining folds
2024-09-19 15:48:02,252:INFO:Declaring metric variables
2024-09-19 15:48:02,252:INFO:Importing untrained model
2024-09-19 15:48:02,268:INFO:Naive Bayes Imported successfully
2024-09-19 15:48:02,270:INFO:Starting cross validation
2024-09-19 15:48:02,270:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:48:02,703:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:02,707:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:02,711:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:02,711:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:02,722:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:02,722:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:02,722:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:02,722:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:02,722:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:02,727:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:02,728:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:02,731:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:02,731:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:02,731:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:02,731:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:02,737:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:02,739:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:02,741:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:02,741:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:02,743:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:02,764:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:02,773:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:02,774:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:03,157:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:03,169:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:03,169:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:03,178:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:03,178:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:03,188:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:03,219:INFO:Calculating mean and std
2024-09-19 15:48:03,219:INFO:Creating metrics dataframe
2024-09-19 15:48:03,219:INFO:Uploading results into container
2024-09-19 15:48:03,219:INFO:Uploading model into container now
2024-09-19 15:48:03,219:INFO:_master_model_container: 3
2024-09-19 15:48:03,219:INFO:_display_container: 2
2024-09-19 15:48:03,219:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-09-19 15:48:03,219:INFO:create_model() successfully completed......................................
2024-09-19 15:48:03,519:INFO:SubProcess create_model() end ==================================
2024-09-19 15:48:03,519:INFO:Creating metrics dataframe
2024-09-19 15:48:03,537:INFO:Initializing Decision Tree Classifier
2024-09-19 15:48:03,537:INFO:Total runtime is 0.1138062079747518 minutes
2024-09-19 15:48:03,537:INFO:SubProcess create_model() called ==================================
2024-09-19 15:48:03,537:INFO:Initializing create_model()
2024-09-19 15:48:03,537:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D31D24D0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:48:03,537:INFO:Checking exceptions
2024-09-19 15:48:03,537:INFO:Importing libraries
2024-09-19 15:48:03,537:INFO:Copying training dataset
2024-09-19 15:48:03,552:INFO:Defining folds
2024-09-19 15:48:03,552:INFO:Declaring metric variables
2024-09-19 15:48:03,552:INFO:Importing untrained model
2024-09-19 15:48:03,568:INFO:Decision Tree Classifier Imported successfully
2024-09-19 15:48:03,568:INFO:Starting cross validation
2024-09-19 15:48:03,568:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:48:04,088:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:04,094:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:04,099:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:04,103:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:04,106:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:04,110:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:04,113:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:04,115:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:04,116:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:04,124:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:04,125:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:04,141:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:04,164:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:04,165:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:04,176:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:04,178:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:04,187:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:04,194:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:04,203:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:04,214:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:04,218:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:04,220:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:04,228:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:04,238:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:04,634:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:04,637:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:04,640:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:04,648:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:04,658:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:04,658:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:04,688:INFO:Calculating mean and std
2024-09-19 15:48:04,688:INFO:Creating metrics dataframe
2024-09-19 15:48:04,688:INFO:Uploading results into container
2024-09-19 15:48:04,688:INFO:Uploading model into container now
2024-09-19 15:48:04,688:INFO:_master_model_container: 4
2024-09-19 15:48:04,688:INFO:_display_container: 2
2024-09-19 15:48:04,688:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-09-19 15:48:04,688:INFO:create_model() successfully completed......................................
2024-09-19 15:48:05,000:INFO:SubProcess create_model() end ==================================
2024-09-19 15:48:05,000:INFO:Creating metrics dataframe
2024-09-19 15:48:05,011:INFO:Initializing SVM - Linear Kernel
2024-09-19 15:48:05,011:INFO:Total runtime is 0.13836699724197388 minutes
2024-09-19 15:48:05,015:INFO:SubProcess create_model() called ==================================
2024-09-19 15:48:05,016:INFO:Initializing create_model()
2024-09-19 15:48:05,016:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D31D24D0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:48:05,016:INFO:Checking exceptions
2024-09-19 15:48:05,016:INFO:Importing libraries
2024-09-19 15:48:05,016:INFO:Copying training dataset
2024-09-19 15:48:05,024:INFO:Defining folds
2024-09-19 15:48:05,024:INFO:Declaring metric variables
2024-09-19 15:48:05,028:INFO:Importing untrained model
2024-09-19 15:48:05,032:INFO:SVM - Linear Kernel Imported successfully
2024-09-19 15:48:05,035:INFO:Starting cross validation
2024-09-19 15:48:05,035:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:48:05,543:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:05,554:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:05,554:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:05,565:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:05,565:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:05,575:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:05,576:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:05,590:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:05,590:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:05,597:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:05,601:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:05,605:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:05,609:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:05,615:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:05,618:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:05,627:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:05,627:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:05,627:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:05,636:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:05,638:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:05,639:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:05,643:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:05,644:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:06,028:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:06,042:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:06,054:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:06,064:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:06,074:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:06,087:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:06,110:INFO:Calculating mean and std
2024-09-19 15:48:06,111:INFO:Creating metrics dataframe
2024-09-19 15:48:06,114:INFO:Uploading results into container
2024-09-19 15:48:06,116:INFO:Uploading model into container now
2024-09-19 15:48:06,116:INFO:_master_model_container: 5
2024-09-19 15:48:06,116:INFO:_display_container: 2
2024-09-19 15:48:06,117:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-09-19 15:48:06,118:INFO:create_model() successfully completed......................................
2024-09-19 15:48:06,423:INFO:SubProcess create_model() end ==================================
2024-09-19 15:48:06,423:INFO:Creating metrics dataframe
2024-09-19 15:48:06,455:INFO:Initializing Ridge Classifier
2024-09-19 15:48:06,455:INFO:Total runtime is 0.16243676741917928 minutes
2024-09-19 15:48:06,461:INFO:SubProcess create_model() called ==================================
2024-09-19 15:48:06,461:INFO:Initializing create_model()
2024-09-19 15:48:06,462:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D31D24D0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:48:06,462:INFO:Checking exceptions
2024-09-19 15:48:06,462:INFO:Importing libraries
2024-09-19 15:48:06,462:INFO:Copying training dataset
2024-09-19 15:48:06,480:INFO:Defining folds
2024-09-19 15:48:06,481:INFO:Declaring metric variables
2024-09-19 15:48:06,487:INFO:Importing untrained model
2024-09-19 15:48:06,493:INFO:Ridge Classifier Imported successfully
2024-09-19 15:48:06,501:INFO:Starting cross validation
2024-09-19 15:48:06,504:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:48:06,944:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:06,949:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:06,954:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:06,958:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:06,958:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:06,964:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:06,970:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:06,971:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:06,986:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:07,006:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:07,012:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:07,016:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:07,022:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:07,026:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:07,032:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:07,034:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:07,035:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:07,045:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:07,045:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:07,053:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:07,056:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:07,058:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:07,068:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:07,074:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:07,386:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:07,409:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:07,409:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:07,426:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:07,427:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:07,437:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:07,458:INFO:Calculating mean and std
2024-09-19 15:48:07,458:INFO:Creating metrics dataframe
2024-09-19 15:48:07,458:INFO:Uploading results into container
2024-09-19 15:48:07,458:INFO:Uploading model into container now
2024-09-19 15:48:07,458:INFO:_master_model_container: 6
2024-09-19 15:48:07,458:INFO:_display_container: 2
2024-09-19 15:48:07,458:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-09-19 15:48:07,458:INFO:create_model() successfully completed......................................
2024-09-19 15:48:07,752:INFO:SubProcess create_model() end ==================================
2024-09-19 15:48:07,752:INFO:Creating metrics dataframe
2024-09-19 15:48:07,785:INFO:Initializing Random Forest Classifier
2024-09-19 15:48:07,785:INFO:Total runtime is 0.1845973292986552 minutes
2024-09-19 15:48:07,785:INFO:SubProcess create_model() called ==================================
2024-09-19 15:48:07,785:INFO:Initializing create_model()
2024-09-19 15:48:07,785:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D31D24D0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:48:07,785:INFO:Checking exceptions
2024-09-19 15:48:07,785:INFO:Importing libraries
2024-09-19 15:48:07,785:INFO:Copying training dataset
2024-09-19 15:48:07,793:INFO:Defining folds
2024-09-19 15:48:07,793:INFO:Declaring metric variables
2024-09-19 15:48:07,802:INFO:Importing untrained model
2024-09-19 15:48:07,803:INFO:Random Forest Classifier Imported successfully
2024-09-19 15:48:07,803:INFO:Starting cross validation
2024-09-19 15:48:07,803:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:48:09,622:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:09,623:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:09,628:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:09,632:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:09,632:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:09,639:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:09,654:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:09,655:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:09,658:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:09,711:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:09,718:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:09,728:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:09,729:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:09,739:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:09,741:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:09,744:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:09,751:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:09,758:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:09,760:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:09,760:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:09,767:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:09,768:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:09,774:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:09,774:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:10,486:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:10,487:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:10,490:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:10,490:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:10,503:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:10,503:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:10,517:INFO:Calculating mean and std
2024-09-19 15:48:10,519:INFO:Creating metrics dataframe
2024-09-19 15:48:10,523:INFO:Uploading results into container
2024-09-19 15:48:10,523:INFO:Uploading model into container now
2024-09-19 15:48:10,525:INFO:_master_model_container: 7
2024-09-19 15:48:10,525:INFO:_display_container: 2
2024-09-19 15:48:10,526:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-09-19 15:48:10,526:INFO:create_model() successfully completed......................................
2024-09-19 15:48:10,839:INFO:SubProcess create_model() end ==================================
2024-09-19 15:48:10,839:INFO:Creating metrics dataframe
2024-09-19 15:48:10,845:INFO:Initializing Quadratic Discriminant Analysis
2024-09-19 15:48:10,845:INFO:Total runtime is 0.23560261726379395 minutes
2024-09-19 15:48:10,854:INFO:SubProcess create_model() called ==================================
2024-09-19 15:48:10,855:INFO:Initializing create_model()
2024-09-19 15:48:10,855:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D31D24D0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:48:10,855:INFO:Checking exceptions
2024-09-19 15:48:10,855:INFO:Importing libraries
2024-09-19 15:48:10,855:INFO:Copying training dataset
2024-09-19 15:48:10,865:INFO:Defining folds
2024-09-19 15:48:10,865:INFO:Declaring metric variables
2024-09-19 15:48:10,869:INFO:Importing untrained model
2024-09-19 15:48:10,874:INFO:Quadratic Discriminant Analysis Imported successfully
2024-09-19 15:48:10,883:INFO:Starting cross validation
2024-09-19 15:48:10,885:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:48:11,226:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:48:11,255:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:48:11,271:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:48:11,287:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:48:11,303:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:48:11,322:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:48:11,331:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:48:11,341:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:11,353:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:11,354:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:48:11,362:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:11,362:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:11,374:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:11,377:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:11,384:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:11,389:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:11,389:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:11,399:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:11,399:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:11,410:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:11,424:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:11,431:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:11,436:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:11,442:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:11,445:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:11,448:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:11,452:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:11,459:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:11,460:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:11,471:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:11,474:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:11,485:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:11,651:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:48:11,671:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:48:11,759:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:11,769:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:11,772:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:11,774:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:11,784:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:11,790:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:11,816:INFO:Calculating mean and std
2024-09-19 15:48:11,817:INFO:Creating metrics dataframe
2024-09-19 15:48:11,822:INFO:Uploading results into container
2024-09-19 15:48:11,823:INFO:Uploading model into container now
2024-09-19 15:48:11,823:INFO:_master_model_container: 8
2024-09-19 15:48:11,823:INFO:_display_container: 2
2024-09-19 15:48:11,823:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-09-19 15:48:11,823:INFO:create_model() successfully completed......................................
2024-09-19 15:48:12,151:INFO:SubProcess create_model() end ==================================
2024-09-19 15:48:12,151:INFO:Creating metrics dataframe
2024-09-19 15:48:12,185:INFO:Initializing Ada Boost Classifier
2024-09-19 15:48:12,185:INFO:Total runtime is 0.2579257845878601 minutes
2024-09-19 15:48:12,185:INFO:SubProcess create_model() called ==================================
2024-09-19 15:48:12,201:INFO:Initializing create_model()
2024-09-19 15:48:12,201:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D31D24D0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:48:12,201:INFO:Checking exceptions
2024-09-19 15:48:12,201:INFO:Importing libraries
2024-09-19 15:48:12,201:INFO:Copying training dataset
2024-09-19 15:48:12,218:INFO:Defining folds
2024-09-19 15:48:12,218:INFO:Declaring metric variables
2024-09-19 15:48:12,218:INFO:Importing untrained model
2024-09-19 15:48:12,218:INFO:Ada Boost Classifier Imported successfully
2024-09-19 15:48:12,236:INFO:Starting cross validation
2024-09-19 15:48:12,236:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:48:12,586:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:48:12,586:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:48:12,592:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:48:12,592:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:48:12,606:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:48:12,623:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:48:12,623:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:48:12,623:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:48:13,323:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:13,325:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:13,334:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:13,335:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:13,336:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:13,342:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:13,345:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:13,346:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:13,346:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:13,351:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:13,355:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:13,359:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:13,377:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:13,391:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:13,403:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:13,410:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:13,410:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:13,417:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:13,420:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:13,421:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:13,421:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:13,421:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:13,430:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:13,437:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:13,611:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:48:13,627:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:48:14,403:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:14,407:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:14,417:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:14,420:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:14,420:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:14,428:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:14,448:INFO:Calculating mean and std
2024-09-19 15:48:14,448:INFO:Creating metrics dataframe
2024-09-19 15:48:14,453:INFO:Uploading results into container
2024-09-19 15:48:14,453:INFO:Uploading model into container now
2024-09-19 15:48:14,453:INFO:_master_model_container: 9
2024-09-19 15:48:14,453:INFO:_display_container: 2
2024-09-19 15:48:14,453:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-09-19 15:48:14,453:INFO:create_model() successfully completed......................................
2024-09-19 15:48:14,737:INFO:SubProcess create_model() end ==================================
2024-09-19 15:48:14,737:INFO:Creating metrics dataframe
2024-09-19 15:48:14,753:INFO:Initializing Gradient Boosting Classifier
2024-09-19 15:48:14,753:INFO:Total runtime is 0.3007305304209391 minutes
2024-09-19 15:48:14,753:INFO:SubProcess create_model() called ==================================
2024-09-19 15:48:14,753:INFO:Initializing create_model()
2024-09-19 15:48:14,753:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D31D24D0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:48:14,753:INFO:Checking exceptions
2024-09-19 15:48:14,753:INFO:Importing libraries
2024-09-19 15:48:14,753:INFO:Copying training dataset
2024-09-19 15:48:14,767:INFO:Defining folds
2024-09-19 15:48:14,768:INFO:Declaring metric variables
2024-09-19 15:48:14,771:INFO:Importing untrained model
2024-09-19 15:48:14,771:INFO:Gradient Boosting Classifier Imported successfully
2024-09-19 15:48:14,785:INFO:Starting cross validation
2024-09-19 15:48:14,786:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:48:16,871:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:16,880:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:16,884:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:16,887:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:16,890:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:16,890:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:16,890:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:16,890:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:16,904:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:16,905:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:16,905:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:16,911:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:16,969:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:16,973:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:16,987:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:16,987:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:16,993:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:17,000:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:17,005:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:17,010:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:17,012:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:17,015:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:17,023:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:17,027:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:18,764:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:18,767:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:18,774:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:18,774:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:18,784:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:18,791:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:18,806:INFO:Calculating mean and std
2024-09-19 15:48:18,807:INFO:Creating metrics dataframe
2024-09-19 15:48:18,807:INFO:Uploading results into container
2024-09-19 15:48:18,807:INFO:Uploading model into container now
2024-09-19 15:48:18,807:INFO:_master_model_container: 10
2024-09-19 15:48:18,807:INFO:_display_container: 2
2024-09-19 15:48:18,807:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-09-19 15:48:18,807:INFO:create_model() successfully completed......................................
2024-09-19 15:48:19,118:INFO:SubProcess create_model() end ==================================
2024-09-19 15:48:19,118:INFO:Creating metrics dataframe
2024-09-19 15:48:19,151:INFO:Initializing Linear Discriminant Analysis
2024-09-19 15:48:19,151:INFO:Total runtime is 0.3740270415941874 minutes
2024-09-19 15:48:19,151:INFO:SubProcess create_model() called ==================================
2024-09-19 15:48:19,151:INFO:Initializing create_model()
2024-09-19 15:48:19,151:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D31D24D0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:48:19,151:INFO:Checking exceptions
2024-09-19 15:48:19,151:INFO:Importing libraries
2024-09-19 15:48:19,151:INFO:Copying training dataset
2024-09-19 15:48:19,168:INFO:Defining folds
2024-09-19 15:48:19,168:INFO:Declaring metric variables
2024-09-19 15:48:19,168:INFO:Importing untrained model
2024-09-19 15:48:19,168:INFO:Linear Discriminant Analysis Imported successfully
2024-09-19 15:48:19,185:INFO:Starting cross validation
2024-09-19 15:48:19,185:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:48:19,638:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:19,646:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:19,650:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:19,653:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:19,653:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:19,656:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:19,656:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:19,656:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:19,656:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:19,656:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:19,656:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:19,656:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:19,667:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:19,669:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:19,674:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:19,674:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:19,674:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:19,677:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:19,679:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:19,680:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:19,686:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:19,687:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:19,689:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:19,696:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:20,031:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:20,034:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:20,041:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:20,041:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:20,041:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:20,062:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:20,092:INFO:Calculating mean and std
2024-09-19 15:48:20,092:INFO:Creating metrics dataframe
2024-09-19 15:48:20,092:INFO:Uploading results into container
2024-09-19 15:48:20,101:INFO:Uploading model into container now
2024-09-19 15:48:20,101:INFO:_master_model_container: 11
2024-09-19 15:48:20,101:INFO:_display_container: 2
2024-09-19 15:48:20,102:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-09-19 15:48:20,102:INFO:create_model() successfully completed......................................
2024-09-19 15:48:20,417:INFO:SubProcess create_model() end ==================================
2024-09-19 15:48:20,417:INFO:Creating metrics dataframe
2024-09-19 15:48:20,443:INFO:Initializing Extra Trees Classifier
2024-09-19 15:48:20,443:INFO:Total runtime is 0.3955687681833903 minutes
2024-09-19 15:48:20,446:INFO:SubProcess create_model() called ==================================
2024-09-19 15:48:20,447:INFO:Initializing create_model()
2024-09-19 15:48:20,447:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D31D24D0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:48:20,447:INFO:Checking exceptions
2024-09-19 15:48:20,447:INFO:Importing libraries
2024-09-19 15:48:20,447:INFO:Copying training dataset
2024-09-19 15:48:20,458:INFO:Defining folds
2024-09-19 15:48:20,458:INFO:Declaring metric variables
2024-09-19 15:48:20,462:INFO:Importing untrained model
2024-09-19 15:48:20,467:INFO:Extra Trees Classifier Imported successfully
2024-09-19 15:48:20,467:INFO:Starting cross validation
2024-09-19 15:48:20,467:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:48:22,397:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:22,397:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:22,397:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:22,397:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:22,401:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:22,407:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:22,407:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:22,407:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:22,407:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:22,411:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:22,417:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:22,418:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:22,421:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:22,423:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:22,425:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:22,508:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:22,508:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:22,513:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:22,518:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:22,521:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:22,528:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:22,528:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:22,533:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:23,254:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:23,263:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:23,275:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:23,277:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:23,297:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:23,306:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:23,320:INFO:Calculating mean and std
2024-09-19 15:48:23,323:INFO:Creating metrics dataframe
2024-09-19 15:48:23,332:INFO:Uploading results into container
2024-09-19 15:48:23,333:INFO:Uploading model into container now
2024-09-19 15:48:23,333:INFO:_master_model_container: 12
2024-09-19 15:48:23,333:INFO:_display_container: 2
2024-09-19 15:48:23,334:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-09-19 15:48:23,334:INFO:create_model() successfully completed......................................
2024-09-19 15:48:23,711:INFO:SubProcess create_model() end ==================================
2024-09-19 15:48:23,712:INFO:Creating metrics dataframe
2024-09-19 15:48:23,721:INFO:Initializing Light Gradient Boosting Machine
2024-09-19 15:48:23,721:INFO:Total runtime is 0.45020529826482136 minutes
2024-09-19 15:48:23,734:INFO:SubProcess create_model() called ==================================
2024-09-19 15:48:23,735:INFO:Initializing create_model()
2024-09-19 15:48:23,735:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D31D24D0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:48:23,735:INFO:Checking exceptions
2024-09-19 15:48:23,735:INFO:Importing libraries
2024-09-19 15:48:23,735:INFO:Copying training dataset
2024-09-19 15:48:23,745:INFO:Defining folds
2024-09-19 15:48:23,745:INFO:Declaring metric variables
2024-09-19 15:48:23,751:INFO:Importing untrained model
2024-09-19 15:48:23,752:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-19 15:48:23,752:INFO:Starting cross validation
2024-09-19 15:48:23,752:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:48:24,968:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:24,976:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:24,984:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:24,989:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:24,989:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:25,006:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:25,006:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:25,017:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:25,027:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:25,041:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:25,053:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:25,059:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:25,206:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:25,220:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:25,226:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:25,236:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:25,236:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:25,248:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:25,421:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:25,423:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:25,423:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:25,432:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:25,439:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:25,441:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:25,700:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:25,709:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:25,712:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:25,718:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:25,723:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:25,732:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:25,754:INFO:Calculating mean and std
2024-09-19 15:48:25,755:INFO:Creating metrics dataframe
2024-09-19 15:48:25,760:INFO:Uploading results into container
2024-09-19 15:48:25,760:INFO:Uploading model into container now
2024-09-19 15:48:25,760:INFO:_master_model_container: 13
2024-09-19 15:48:25,760:INFO:_display_container: 2
2024-09-19 15:48:25,760:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-19 15:48:25,760:INFO:create_model() successfully completed......................................
2024-09-19 15:48:26,195:INFO:SubProcess create_model() end ==================================
2024-09-19 15:48:26,196:INFO:Creating metrics dataframe
2024-09-19 15:48:26,215:INFO:Initializing Dummy Classifier
2024-09-19 15:48:26,215:INFO:Total runtime is 0.4917632977167765 minutes
2024-09-19 15:48:26,220:INFO:SubProcess create_model() called ==================================
2024-09-19 15:48:26,220:INFO:Initializing create_model()
2024-09-19 15:48:26,220:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D31D24D0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:48:26,222:INFO:Checking exceptions
2024-09-19 15:48:26,222:INFO:Importing libraries
2024-09-19 15:48:26,222:INFO:Copying training dataset
2024-09-19 15:48:26,231:INFO:Defining folds
2024-09-19 15:48:26,232:INFO:Declaring metric variables
2024-09-19 15:48:26,252:INFO:Importing untrained model
2024-09-19 15:48:26,263:INFO:Dummy Classifier Imported successfully
2024-09-19 15:48:26,273:INFO:Starting cross validation
2024-09-19 15:48:26,277:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:48:26,695:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:26,707:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:26,712:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:48:26,719:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:26,733:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:26,742:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:26,753:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:48:26,755:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:26,787:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:26,805:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:26,805:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:48:26,805:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:26,820:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:26,821:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:26,821:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:26,821:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:26,826:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:26,826:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:26,826:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:26,833:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:26,836:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:48:26,836:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:48:26,838:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:48:26,839:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:48:26,840:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:26,840:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:26,840:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:26,843:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:26,843:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:26,855:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:26,861:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:48:26,866:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:27,105:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:27,116:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:27,124:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:48:27,134:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:27,144:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:27,152:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:27,160:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:48:27,160:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:48:27,181:INFO:Calculating mean and std
2024-09-19 15:48:27,183:INFO:Creating metrics dataframe
2024-09-19 15:48:27,187:INFO:Uploading results into container
2024-09-19 15:48:27,187:INFO:Uploading model into container now
2024-09-19 15:48:27,188:INFO:_master_model_container: 14
2024-09-19 15:48:27,188:INFO:_display_container: 2
2024-09-19 15:48:27,188:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-09-19 15:48:27,188:INFO:create_model() successfully completed......................................
2024-09-19 15:48:27,561:INFO:SubProcess create_model() end ==================================
2024-09-19 15:48:27,561:INFO:Creating metrics dataframe
2024-09-19 15:48:27,593:INFO:Initializing create_model()
2024-09-19 15:48:27,593:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D31D24D0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:48:27,593:INFO:Checking exceptions
2024-09-19 15:48:27,596:INFO:Importing libraries
2024-09-19 15:48:27,596:INFO:Copying training dataset
2024-09-19 15:48:27,605:INFO:Defining folds
2024-09-19 15:48:27,606:INFO:Declaring metric variables
2024-09-19 15:48:27,606:INFO:Importing untrained model
2024-09-19 15:48:27,606:INFO:Declaring custom model
2024-09-19 15:48:27,607:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-19 15:48:27,609:INFO:Cross validation set to False
2024-09-19 15:48:27,610:INFO:Fitting Model
2024-09-19 15:48:27,896:INFO:[LightGBM] [Info] Number of positive: 3702, number of negative: 4111
2024-09-19 15:48:27,900:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000925 seconds.
2024-09-19 15:48:27,900:INFO:You can set `force_row_wise=true` to remove the overhead.
2024-09-19 15:48:27,900:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2024-09-19 15:48:27,900:INFO:[LightGBM] [Info] Total Bins 1003
2024-09-19 15:48:27,900:INFO:[LightGBM] [Info] Number of data points in the train set: 7813, number of used features: 48
2024-09-19 15:48:27,901:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.473826 -> initscore=-0.104793
2024-09-19 15:48:27,901:INFO:[LightGBM] [Info] Start training from score -0.104793
2024-09-19 15:48:28,007:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-19 15:48:28,007:INFO:create_model() successfully completed......................................
2024-09-19 15:48:28,368:INFO:_master_model_container: 14
2024-09-19 15:48:28,368:INFO:_display_container: 2
2024-09-19 15:48:28,383:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-19 15:48:28,384:INFO:compare_models() successfully completed......................................
2024-09-19 15:51:26,563:INFO:Initializing compare_models()
2024-09-19 15:51:26,564:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Recall, n_select=3, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Recall', 'n_select': 3, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2024-09-19 15:51:26,564:INFO:Checking exceptions
2024-09-19 15:51:26,567:INFO:Preparing display monitor
2024-09-19 15:51:26,592:INFO:Initializing Logistic Regression
2024-09-19 15:51:26,592:INFO:Total runtime is 0.0 minutes
2024-09-19 15:51:26,592:INFO:SubProcess create_model() called ==================================
2024-09-19 15:51:26,592:INFO:Initializing create_model()
2024-09-19 15:51:26,592:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253CD21B190>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:51:26,592:INFO:Checking exceptions
2024-09-19 15:51:26,592:INFO:Importing libraries
2024-09-19 15:51:26,592:INFO:Copying training dataset
2024-09-19 15:51:26,606:INFO:Defining folds
2024-09-19 15:51:26,607:INFO:Declaring metric variables
2024-09-19 15:51:26,610:INFO:Importing untrained model
2024-09-19 15:51:26,610:INFO:Logistic Regression Imported successfully
2024-09-19 15:51:26,624:INFO:Starting cross validation
2024-09-19 15:51:26,625:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:51:27,123:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:27,128:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:27,134:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:27,135:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:27,139:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:27,139:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:27,142:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:27,142:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:27,143:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:27,145:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:27,145:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:27,146:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:27,149:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:27,149:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:27,152:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:27,152:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:27,154:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:27,156:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:27,156:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:27,162:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:27,164:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:27,164:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:27,168:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:27,557:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:27,568:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:27,579:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:27,589:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:27,607:INFO:Calculating mean and std
2024-09-19 15:51:27,608:INFO:Creating metrics dataframe
2024-09-19 15:51:27,608:INFO:Uploading results into container
2024-09-19 15:51:27,608:INFO:Uploading model into container now
2024-09-19 15:51:27,608:INFO:_master_model_container: 15
2024-09-19 15:51:27,608:INFO:_display_container: 3
2024-09-19 15:51:27,608:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-19 15:51:27,608:INFO:create_model() successfully completed......................................
2024-09-19 15:51:27,951:INFO:SubProcess create_model() end ==================================
2024-09-19 15:51:27,952:INFO:Creating metrics dataframe
2024-09-19 15:51:27,978:INFO:Initializing K Neighbors Classifier
2024-09-19 15:51:27,979:INFO:Total runtime is 0.02310719092686971 minutes
2024-09-19 15:51:27,988:INFO:SubProcess create_model() called ==================================
2024-09-19 15:51:27,989:INFO:Initializing create_model()
2024-09-19 15:51:27,989:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253CD21B190>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:51:27,989:INFO:Checking exceptions
2024-09-19 15:51:27,989:INFO:Importing libraries
2024-09-19 15:51:27,989:INFO:Copying training dataset
2024-09-19 15:51:27,992:INFO:Defining folds
2024-09-19 15:51:27,992:INFO:Declaring metric variables
2024-09-19 15:51:27,992:INFO:Importing untrained model
2024-09-19 15:51:28,008:INFO:K Neighbors Classifier Imported successfully
2024-09-19 15:51:28,017:INFO:Starting cross validation
2024-09-19 15:51:28,017:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:51:28,640:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:28,647:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:28,649:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:28,651:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:28,653:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:28,658:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:28,659:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:28,661:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:28,663:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:28,668:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:28,668:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:28,669:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:28,673:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:28,674:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:28,675:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:28,676:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:28,679:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:28,685:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:28,687:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:28,687:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:28,691:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:28,696:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:28,698:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:28,699:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:29,253:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:29,263:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:29,263:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:29,273:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:29,273:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:29,273:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:29,293:INFO:Calculating mean and std
2024-09-19 15:51:29,293:INFO:Creating metrics dataframe
2024-09-19 15:51:29,293:INFO:Uploading results into container
2024-09-19 15:51:29,293:INFO:Uploading model into container now
2024-09-19 15:51:29,293:INFO:_master_model_container: 16
2024-09-19 15:51:29,293:INFO:_display_container: 3
2024-09-19 15:51:29,293:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-09-19 15:51:29,293:INFO:create_model() successfully completed......................................
2024-09-19 15:51:29,556:INFO:SubProcess create_model() end ==================================
2024-09-19 15:51:29,556:INFO:Creating metrics dataframe
2024-09-19 15:51:29,578:INFO:Initializing Naive Bayes
2024-09-19 15:51:29,578:INFO:Total runtime is 0.04976442257563273 minutes
2024-09-19 15:51:29,582:INFO:SubProcess create_model() called ==================================
2024-09-19 15:51:29,582:INFO:Initializing create_model()
2024-09-19 15:51:29,582:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253CD21B190>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:51:29,583:INFO:Checking exceptions
2024-09-19 15:51:29,583:INFO:Importing libraries
2024-09-19 15:51:29,583:INFO:Copying training dataset
2024-09-19 15:51:29,590:INFO:Defining folds
2024-09-19 15:51:29,590:INFO:Declaring metric variables
2024-09-19 15:51:29,595:INFO:Importing untrained model
2024-09-19 15:51:29,599:INFO:Naive Bayes Imported successfully
2024-09-19 15:51:29,640:INFO:Starting cross validation
2024-09-19 15:51:29,646:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:51:30,162:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:30,175:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:30,181:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:30,195:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:30,206:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:30,207:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:30,212:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:30,212:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:30,228:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:30,233:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:30,243:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:30,243:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:30,258:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:30,262:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:30,262:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:30,262:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:30,263:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:30,269:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:30,274:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:30,276:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:30,284:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:30,287:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:30,599:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:30,608:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:30,623:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:30,642:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:30,650:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:30,658:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:30,680:INFO:Calculating mean and std
2024-09-19 15:51:30,681:INFO:Creating metrics dataframe
2024-09-19 15:51:30,686:INFO:Uploading results into container
2024-09-19 15:51:30,686:INFO:Uploading model into container now
2024-09-19 15:51:30,687:INFO:_master_model_container: 17
2024-09-19 15:51:30,688:INFO:_display_container: 3
2024-09-19 15:51:30,688:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-09-19 15:51:30,689:INFO:create_model() successfully completed......................................
2024-09-19 15:51:31,006:INFO:SubProcess create_model() end ==================================
2024-09-19 15:51:31,006:INFO:Creating metrics dataframe
2024-09-19 15:51:31,028:INFO:Initializing Decision Tree Classifier
2024-09-19 15:51:31,028:INFO:Total runtime is 0.07393025159835816 minutes
2024-09-19 15:51:31,034:INFO:SubProcess create_model() called ==================================
2024-09-19 15:51:31,034:INFO:Initializing create_model()
2024-09-19 15:51:31,034:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253CD21B190>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:51:31,035:INFO:Checking exceptions
2024-09-19 15:51:31,035:INFO:Importing libraries
2024-09-19 15:51:31,035:INFO:Copying training dataset
2024-09-19 15:51:31,049:INFO:Defining folds
2024-09-19 15:51:31,049:INFO:Declaring metric variables
2024-09-19 15:51:31,054:INFO:Importing untrained model
2024-09-19 15:51:31,059:INFO:Decision Tree Classifier Imported successfully
2024-09-19 15:51:31,068:INFO:Starting cross validation
2024-09-19 15:51:31,070:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:51:31,694:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:31,695:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:31,705:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:31,706:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:31,714:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:31,716:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:31,717:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:31,724:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:31,736:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:31,748:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:31,761:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:31,766:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:31,772:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:31,778:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:31,783:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:31,790:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:31,794:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:31,799:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:31,805:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:31,810:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:31,821:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:31,830:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:31,841:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:31,851:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:32,272:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:32,273:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:32,282:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:32,283:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:32,292:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:32,293:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:32,311:INFO:Calculating mean and std
2024-09-19 15:51:32,311:INFO:Creating metrics dataframe
2024-09-19 15:51:32,311:INFO:Uploading results into container
2024-09-19 15:51:32,311:INFO:Uploading model into container now
2024-09-19 15:51:32,311:INFO:_master_model_container: 18
2024-09-19 15:51:32,311:INFO:_display_container: 3
2024-09-19 15:51:32,311:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-09-19 15:51:32,311:INFO:create_model() successfully completed......................................
2024-09-19 15:51:32,660:INFO:SubProcess create_model() end ==================================
2024-09-19 15:51:32,672:INFO:Creating metrics dataframe
2024-09-19 15:51:32,698:INFO:Initializing SVM - Linear Kernel
2024-09-19 15:51:32,699:INFO:Total runtime is 0.10178248087565105 minutes
2024-09-19 15:51:32,707:INFO:SubProcess create_model() called ==================================
2024-09-19 15:51:32,709:INFO:Initializing create_model()
2024-09-19 15:51:32,709:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253CD21B190>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:51:32,709:INFO:Checking exceptions
2024-09-19 15:51:32,710:INFO:Importing libraries
2024-09-19 15:51:32,710:INFO:Copying training dataset
2024-09-19 15:51:32,723:INFO:Defining folds
2024-09-19 15:51:32,723:INFO:Declaring metric variables
2024-09-19 15:51:32,727:INFO:Importing untrained model
2024-09-19 15:51:32,727:INFO:SVM - Linear Kernel Imported successfully
2024-09-19 15:51:32,742:INFO:Starting cross validation
2024-09-19 15:51:32,744:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:51:33,408:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:33,408:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:33,417:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:33,423:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:33,423:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:33,427:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:33,427:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:33,427:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:33,427:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:33,437:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:33,440:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:33,440:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:33,441:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:33,448:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:33,459:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:33,461:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:33,461:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:33,466:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:33,480:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:33,485:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:33,490:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:33,494:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:33,502:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:33,911:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:33,931:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:33,931:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:33,952:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:33,952:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:33,962:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:33,982:INFO:Calculating mean and std
2024-09-19 15:51:33,982:INFO:Creating metrics dataframe
2024-09-19 15:51:33,982:INFO:Uploading results into container
2024-09-19 15:51:33,982:INFO:Uploading model into container now
2024-09-19 15:51:33,982:INFO:_master_model_container: 19
2024-09-19 15:51:33,982:INFO:_display_container: 3
2024-09-19 15:51:33,982:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-09-19 15:51:33,982:INFO:create_model() successfully completed......................................
2024-09-19 15:51:34,275:INFO:SubProcess create_model() end ==================================
2024-09-19 15:51:34,275:INFO:Creating metrics dataframe
2024-09-19 15:51:34,291:INFO:Initializing Ridge Classifier
2024-09-19 15:51:34,291:INFO:Total runtime is 0.1283071239789327 minutes
2024-09-19 15:51:34,291:INFO:SubProcess create_model() called ==================================
2024-09-19 15:51:34,291:INFO:Initializing create_model()
2024-09-19 15:51:34,291:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253CD21B190>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:51:34,291:INFO:Checking exceptions
2024-09-19 15:51:34,291:INFO:Importing libraries
2024-09-19 15:51:34,291:INFO:Copying training dataset
2024-09-19 15:51:34,305:INFO:Defining folds
2024-09-19 15:51:34,306:INFO:Declaring metric variables
2024-09-19 15:51:34,310:INFO:Importing untrained model
2024-09-19 15:51:34,310:INFO:Ridge Classifier Imported successfully
2024-09-19 15:51:34,323:INFO:Starting cross validation
2024-09-19 15:51:34,326:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:51:34,760:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:34,768:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:34,775:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:34,775:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:34,778:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:34,778:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:34,778:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:34,778:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:34,783:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:34,784:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:34,784:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:34,790:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:34,790:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:34,790:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:34,790:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:34,791:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:34,794:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:34,797:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:34,800:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:34,800:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:34,800:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:34,801:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:34,805:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:34,811:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:35,246:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:35,249:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:35,255:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:35,256:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:35,261:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:35,265:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:35,279:INFO:Calculating mean and std
2024-09-19 15:51:35,279:INFO:Creating metrics dataframe
2024-09-19 15:51:35,279:INFO:Uploading results into container
2024-09-19 15:51:35,279:INFO:Uploading model into container now
2024-09-19 15:51:35,279:INFO:_master_model_container: 20
2024-09-19 15:51:35,279:INFO:_display_container: 3
2024-09-19 15:51:35,279:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-09-19 15:51:35,279:INFO:create_model() successfully completed......................................
2024-09-19 15:51:35,561:INFO:SubProcess create_model() end ==================================
2024-09-19 15:51:35,561:INFO:Creating metrics dataframe
2024-09-19 15:51:35,593:INFO:Initializing Random Forest Classifier
2024-09-19 15:51:35,594:INFO:Total runtime is 0.15003236929575603 minutes
2024-09-19 15:51:35,602:INFO:SubProcess create_model() called ==================================
2024-09-19 15:51:35,603:INFO:Initializing create_model()
2024-09-19 15:51:35,604:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253CD21B190>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:51:35,604:INFO:Checking exceptions
2024-09-19 15:51:35,604:INFO:Importing libraries
2024-09-19 15:51:35,604:INFO:Copying training dataset
2024-09-19 15:51:35,612:INFO:Defining folds
2024-09-19 15:51:35,612:INFO:Declaring metric variables
2024-09-19 15:51:35,612:INFO:Importing untrained model
2024-09-19 15:51:35,621:INFO:Random Forest Classifier Imported successfully
2024-09-19 15:51:35,625:INFO:Starting cross validation
2024-09-19 15:51:35,625:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:51:37,740:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:37,742:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:37,750:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:37,752:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:37,769:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:37,773:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:37,776:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:37,777:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:37,784:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:37,787:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:37,788:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:37,794:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:37,801:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:37,803:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:37,812:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:37,847:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:37,861:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:37,877:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:37,894:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:37,903:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:37,905:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:37,914:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:37,931:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:37,958:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:38,759:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:38,767:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:38,767:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:38,776:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:38,776:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:38,781:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:38,799:INFO:Calculating mean and std
2024-09-19 15:51:38,799:INFO:Creating metrics dataframe
2024-09-19 15:51:38,805:INFO:Uploading results into container
2024-09-19 15:51:38,805:INFO:Uploading model into container now
2024-09-19 15:51:38,805:INFO:_master_model_container: 21
2024-09-19 15:51:38,805:INFO:_display_container: 3
2024-09-19 15:51:38,805:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-09-19 15:51:38,805:INFO:create_model() successfully completed......................................
2024-09-19 15:51:39,104:INFO:SubProcess create_model() end ==================================
2024-09-19 15:51:39,104:INFO:Creating metrics dataframe
2024-09-19 15:51:39,121:INFO:Initializing Quadratic Discriminant Analysis
2024-09-19 15:51:39,122:INFO:Total runtime is 0.20882622003555298 minutes
2024-09-19 15:51:39,123:INFO:SubProcess create_model() called ==================================
2024-09-19 15:51:39,123:INFO:Initializing create_model()
2024-09-19 15:51:39,123:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253CD21B190>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:51:39,123:INFO:Checking exceptions
2024-09-19 15:51:39,123:INFO:Importing libraries
2024-09-19 15:51:39,123:INFO:Copying training dataset
2024-09-19 15:51:39,123:INFO:Defining folds
2024-09-19 15:51:39,123:INFO:Declaring metric variables
2024-09-19 15:51:39,139:INFO:Importing untrained model
2024-09-19 15:51:39,139:INFO:Quadratic Discriminant Analysis Imported successfully
2024-09-19 15:51:39,139:INFO:Starting cross validation
2024-09-19 15:51:39,139:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:51:39,567:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:51:39,567:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:51:39,574:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:51:39,582:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:51:39,593:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:51:39,588:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:51:39,627:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:51:39,644:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:51:39,687:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:39,690:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:39,693:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:39,697:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:39,697:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:39,697:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:39,706:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:39,707:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:39,707:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:39,707:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:39,707:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:39,717:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:39,725:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:39,725:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:39,725:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:39,732:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:39,739:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:39,743:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:39,748:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:39,754:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:39,755:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:39,758:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:39,758:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:39,768:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:40,080:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:51:40,090:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:51:40,215:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:40,225:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:40,225:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:40,240:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:40,240:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:40,246:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:40,278:INFO:Calculating mean and std
2024-09-19 15:51:40,278:INFO:Creating metrics dataframe
2024-09-19 15:51:40,283:INFO:Uploading results into container
2024-09-19 15:51:40,284:INFO:Uploading model into container now
2024-09-19 15:51:40,285:INFO:_master_model_container: 22
2024-09-19 15:51:40,285:INFO:_display_container: 3
2024-09-19 15:51:40,285:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-09-19 15:51:40,286:INFO:create_model() successfully completed......................................
2024-09-19 15:51:40,584:INFO:SubProcess create_model() end ==================================
2024-09-19 15:51:40,584:INFO:Creating metrics dataframe
2024-09-19 15:51:40,589:INFO:Initializing Ada Boost Classifier
2024-09-19 15:51:40,589:INFO:Total runtime is 0.2332763950030009 minutes
2024-09-19 15:51:40,589:INFO:SubProcess create_model() called ==================================
2024-09-19 15:51:40,589:INFO:Initializing create_model()
2024-09-19 15:51:40,589:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253CD21B190>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:51:40,589:INFO:Checking exceptions
2024-09-19 15:51:40,589:INFO:Importing libraries
2024-09-19 15:51:40,589:INFO:Copying training dataset
2024-09-19 15:51:40,606:INFO:Defining folds
2024-09-19 15:51:40,606:INFO:Declaring metric variables
2024-09-19 15:51:40,606:INFO:Importing untrained model
2024-09-19 15:51:40,616:INFO:Ada Boost Classifier Imported successfully
2024-09-19 15:51:40,626:INFO:Starting cross validation
2024-09-19 15:51:40,626:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:51:40,990:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:51:41,016:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:51:41,028:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:51:41,037:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:51:41,043:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:51:41,059:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:51:41,060:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:51:41,853:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:41,865:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:41,874:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:41,879:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:41,879:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:41,884:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:41,891:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:41,896:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:41,901:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:41,903:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:41,906:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:41,914:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:41,921:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:41,926:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:41,930:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:41,946:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:41,957:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:41,968:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:41,976:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:41,984:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:41,984:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:41,991:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:41,999:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:42,006:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:42,212:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:51:42,224:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:51:43,091:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:43,101:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:43,113:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:43,115:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:43,129:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:43,150:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:43,170:INFO:Calculating mean and std
2024-09-19 15:51:43,172:INFO:Creating metrics dataframe
2024-09-19 15:51:43,177:INFO:Uploading results into container
2024-09-19 15:51:43,178:INFO:Uploading model into container now
2024-09-19 15:51:43,178:INFO:_master_model_container: 23
2024-09-19 15:51:43,178:INFO:_display_container: 3
2024-09-19 15:51:43,179:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-09-19 15:51:43,179:INFO:create_model() successfully completed......................................
2024-09-19 15:51:43,471:INFO:SubProcess create_model() end ==================================
2024-09-19 15:51:43,471:INFO:Creating metrics dataframe
2024-09-19 15:51:43,491:INFO:Initializing Gradient Boosting Classifier
2024-09-19 15:51:43,491:INFO:Total runtime is 0.28164437611897786 minutes
2024-09-19 15:51:43,505:INFO:SubProcess create_model() called ==================================
2024-09-19 15:51:43,505:INFO:Initializing create_model()
2024-09-19 15:51:43,505:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253CD21B190>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:51:43,505:INFO:Checking exceptions
2024-09-19 15:51:43,505:INFO:Importing libraries
2024-09-19 15:51:43,505:INFO:Copying training dataset
2024-09-19 15:51:43,505:INFO:Defining folds
2024-09-19 15:51:43,505:INFO:Declaring metric variables
2024-09-19 15:51:43,523:INFO:Importing untrained model
2024-09-19 15:51:43,528:INFO:Gradient Boosting Classifier Imported successfully
2024-09-19 15:51:43,538:INFO:Starting cross validation
2024-09-19 15:51:43,538:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:51:45,881:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:45,893:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:45,899:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:45,903:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:45,909:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:45,921:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:45,922:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:45,930:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:45,932:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:45,941:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:45,943:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:45,952:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:46,111:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:46,116:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:46,122:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:46,127:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:46,132:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:46,140:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:46,144:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:46,155:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:46,159:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:46,163:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:46,165:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:46,175:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:48,228:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:48,238:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:48,248:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:48,248:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:48,259:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:48,269:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:48,279:INFO:Calculating mean and std
2024-09-19 15:51:48,279:INFO:Creating metrics dataframe
2024-09-19 15:51:48,279:INFO:Uploading results into container
2024-09-19 15:51:48,279:INFO:Uploading model into container now
2024-09-19 15:51:48,279:INFO:_master_model_container: 24
2024-09-19 15:51:48,279:INFO:_display_container: 3
2024-09-19 15:51:48,279:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-09-19 15:51:48,279:INFO:create_model() successfully completed......................................
2024-09-19 15:51:48,573:INFO:SubProcess create_model() end ==================================
2024-09-19 15:51:48,574:INFO:Creating metrics dataframe
2024-09-19 15:51:48,594:INFO:Initializing Linear Discriminant Analysis
2024-09-19 15:51:48,594:INFO:Total runtime is 0.3666974067687988 minutes
2024-09-19 15:51:48,594:INFO:SubProcess create_model() called ==================================
2024-09-19 15:51:48,594:INFO:Initializing create_model()
2024-09-19 15:51:48,594:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253CD21B190>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:51:48,594:INFO:Checking exceptions
2024-09-19 15:51:48,594:INFO:Importing libraries
2024-09-19 15:51:48,594:INFO:Copying training dataset
2024-09-19 15:51:48,611:INFO:Defining folds
2024-09-19 15:51:48,611:INFO:Declaring metric variables
2024-09-19 15:51:48,616:INFO:Importing untrained model
2024-09-19 15:51:48,619:INFO:Linear Discriminant Analysis Imported successfully
2024-09-19 15:51:48,626:INFO:Starting cross validation
2024-09-19 15:51:48,628:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:51:49,128:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:49,139:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:49,139:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:49,139:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:49,139:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:49,147:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:49,151:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:49,152:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:49,152:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:49,152:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:49,154:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:49,155:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:49,155:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:49,161:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:49,161:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:49,161:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:49,161:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:49,168:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:49,168:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:49,168:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:49,171:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:49,171:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:49,171:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:49,171:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:49,625:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:49,635:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:49,641:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:49,643:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:49,651:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:49,665:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:49,691:INFO:Calculating mean and std
2024-09-19 15:51:49,693:INFO:Creating metrics dataframe
2024-09-19 15:51:49,703:INFO:Uploading results into container
2024-09-19 15:51:49,704:INFO:Uploading model into container now
2024-09-19 15:51:49,705:INFO:_master_model_container: 25
2024-09-19 15:51:49,706:INFO:_display_container: 3
2024-09-19 15:51:49,706:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-09-19 15:51:49,707:INFO:create_model() successfully completed......................................
2024-09-19 15:51:50,030:INFO:SubProcess create_model() end ==================================
2024-09-19 15:51:50,030:INFO:Creating metrics dataframe
2024-09-19 15:51:50,054:INFO:Initializing Extra Trees Classifier
2024-09-19 15:51:50,054:INFO:Total runtime is 0.39102388223012285 minutes
2024-09-19 15:51:50,059:INFO:SubProcess create_model() called ==================================
2024-09-19 15:51:50,059:INFO:Initializing create_model()
2024-09-19 15:51:50,059:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253CD21B190>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:51:50,059:INFO:Checking exceptions
2024-09-19 15:51:50,059:INFO:Importing libraries
2024-09-19 15:51:50,059:INFO:Copying training dataset
2024-09-19 15:51:50,070:INFO:Defining folds
2024-09-19 15:51:50,070:INFO:Declaring metric variables
2024-09-19 15:51:50,075:INFO:Importing untrained model
2024-09-19 15:51:50,080:INFO:Extra Trees Classifier Imported successfully
2024-09-19 15:51:50,092:INFO:Starting cross validation
2024-09-19 15:51:50,095:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:51:52,295:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:52,301:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:52,301:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:52,306:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:52,308:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:52,312:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:52,314:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:52,316:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:52,321:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:52,346:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:52,347:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:52,348:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:52,413:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:52,415:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:52,418:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:52,424:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:52,425:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:52,430:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:52,440:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:52,440:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:52,442:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:52,467:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:52,477:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:52,490:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:53,393:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:53,401:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:53,410:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:53,420:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:53,430:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:53,451:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:53,471:INFO:Calculating mean and std
2024-09-19 15:51:53,471:INFO:Creating metrics dataframe
2024-09-19 15:51:53,471:INFO:Uploading results into container
2024-09-19 15:51:53,471:INFO:Uploading model into container now
2024-09-19 15:51:53,471:INFO:_master_model_container: 26
2024-09-19 15:51:53,471:INFO:_display_container: 3
2024-09-19 15:51:53,471:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-09-19 15:51:53,471:INFO:create_model() successfully completed......................................
2024-09-19 15:51:53,756:INFO:SubProcess create_model() end ==================================
2024-09-19 15:51:53,756:INFO:Creating metrics dataframe
2024-09-19 15:51:53,786:INFO:Initializing Light Gradient Boosting Machine
2024-09-19 15:51:53,786:INFO:Total runtime is 0.45322297414143875 minutes
2024-09-19 15:51:53,790:INFO:SubProcess create_model() called ==================================
2024-09-19 15:51:53,791:INFO:Initializing create_model()
2024-09-19 15:51:53,791:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253CD21B190>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:51:53,791:INFO:Checking exceptions
2024-09-19 15:51:53,791:INFO:Importing libraries
2024-09-19 15:51:53,791:INFO:Copying training dataset
2024-09-19 15:51:53,798:INFO:Defining folds
2024-09-19 15:51:53,798:INFO:Declaring metric variables
2024-09-19 15:51:53,802:INFO:Importing untrained model
2024-09-19 15:51:53,806:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-19 15:51:53,809:INFO:Starting cross validation
2024-09-19 15:51:53,809:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:51:55,023:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:55,031:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:55,031:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:55,041:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:55,041:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:55,041:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:55,055:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:55,056:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:55,056:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:55,061:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:55,061:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:55,073:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:55,188:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:55,194:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:55,205:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:55,360:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:55,372:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:55,378:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:55,383:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:55,391:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:55,404:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:55,500:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:55,509:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:55,520:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:55,722:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:55,732:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:55,741:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:55,770:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:55,780:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:55,788:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:55,804:INFO:Calculating mean and std
2024-09-19 15:51:55,806:INFO:Creating metrics dataframe
2024-09-19 15:51:55,811:INFO:Uploading results into container
2024-09-19 15:51:55,811:INFO:Uploading model into container now
2024-09-19 15:51:55,812:INFO:_master_model_container: 27
2024-09-19 15:51:55,812:INFO:_display_container: 3
2024-09-19 15:51:55,813:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-19 15:51:55,813:INFO:create_model() successfully completed......................................
2024-09-19 15:51:56,161:INFO:SubProcess create_model() end ==================================
2024-09-19 15:51:56,162:INFO:Creating metrics dataframe
2024-09-19 15:51:56,189:INFO:Initializing Dummy Classifier
2024-09-19 15:51:56,189:INFO:Total runtime is 0.49327861467997225 minutes
2024-09-19 15:51:56,193:INFO:SubProcess create_model() called ==================================
2024-09-19 15:51:56,193:INFO:Initializing create_model()
2024-09-19 15:51:56,194:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253CD21B190>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:51:56,194:INFO:Checking exceptions
2024-09-19 15:51:56,194:INFO:Importing libraries
2024-09-19 15:51:56,194:INFO:Copying training dataset
2024-09-19 15:51:56,204:INFO:Defining folds
2024-09-19 15:51:56,204:INFO:Declaring metric variables
2024-09-19 15:51:56,210:INFO:Importing untrained model
2024-09-19 15:51:56,210:INFO:Dummy Classifier Imported successfully
2024-09-19 15:51:56,223:INFO:Starting cross validation
2024-09-19 15:51:56,224:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:51:56,689:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:56,689:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:56,689:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:56,689:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:56,698:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:56,698:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:56,706:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:56,707:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:56,707:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:56,707:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:56,709:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:56,709:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:56,709:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:51:56,709:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:56,709:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:51:56,709:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:51:56,709:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:51:56,709:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:56,709:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:51:56,709:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:56,719:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:51:56,719:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:56,719:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:56,719:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:56,720:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:56,722:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:56,723:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:56,723:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:56,723:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:51:56,729:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:51:56,729:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:56,736:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:57,091:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:57,093:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:57,101:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:57,104:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:57,106:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:51:57,109:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:51:57,110:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:57,113:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:51:57,137:INFO:Calculating mean and std
2024-09-19 15:51:57,137:INFO:Creating metrics dataframe
2024-09-19 15:51:57,143:INFO:Uploading results into container
2024-09-19 15:51:57,144:INFO:Uploading model into container now
2024-09-19 15:51:57,144:INFO:_master_model_container: 28
2024-09-19 15:51:57,144:INFO:_display_container: 3
2024-09-19 15:51:57,144:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-09-19 15:51:57,144:INFO:create_model() successfully completed......................................
2024-09-19 15:51:57,435:INFO:SubProcess create_model() end ==================================
2024-09-19 15:51:57,435:INFO:Creating metrics dataframe
2024-09-19 15:51:57,471:INFO:Initializing create_model()
2024-09-19 15:51:57,471:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:51:57,471:INFO:Checking exceptions
2024-09-19 15:51:57,473:INFO:Importing libraries
2024-09-19 15:51:57,473:INFO:Copying training dataset
2024-09-19 15:51:57,475:INFO:Defining folds
2024-09-19 15:51:57,475:INFO:Declaring metric variables
2024-09-19 15:51:57,475:INFO:Importing untrained model
2024-09-19 15:51:57,475:INFO:Declaring custom model
2024-09-19 15:51:57,475:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-19 15:51:57,475:INFO:Cross validation set to False
2024-09-19 15:51:57,475:INFO:Fitting Model
2024-09-19 15:51:57,709:INFO:[LightGBM] [Info] Number of positive: 4231, number of negative: 4698
2024-09-19 15:51:57,712:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001014 seconds.
2024-09-19 15:51:57,712:INFO:You can set `force_row_wise=true` to remove the overhead.
2024-09-19 15:51:57,712:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2024-09-19 15:51:57,712:INFO:[LightGBM] [Info] Total Bins 1045
2024-09-19 15:51:57,712:INFO:[LightGBM] [Info] Number of data points in the train set: 8929, number of used features: 48
2024-09-19 15:51:57,713:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.473849 -> initscore=-0.104699
2024-09-19 15:51:57,713:INFO:[LightGBM] [Info] Start training from score -0.104699
2024-09-19 15:51:57,804:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-19 15:51:57,804:INFO:create_model() successfully completed......................................
2024-09-19 15:51:58,104:INFO:Initializing create_model()
2024-09-19 15:51:58,104:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:51:58,104:INFO:Checking exceptions
2024-09-19 15:51:58,106:INFO:Importing libraries
2024-09-19 15:51:58,106:INFO:Copying training dataset
2024-09-19 15:51:58,107:INFO:Defining folds
2024-09-19 15:51:58,107:INFO:Declaring metric variables
2024-09-19 15:51:58,107:INFO:Importing untrained model
2024-09-19 15:51:58,107:INFO:Declaring custom model
2024-09-19 15:51:58,107:INFO:Random Forest Classifier Imported successfully
2024-09-19 15:51:58,107:INFO:Cross validation set to False
2024-09-19 15:51:58,107:INFO:Fitting Model
2024-09-19 15:51:58,668:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-09-19 15:51:58,670:INFO:create_model() successfully completed......................................
2024-09-19 15:51:58,954:INFO:Initializing create_model()
2024-09-19 15:51:58,955:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:51:58,956:INFO:Checking exceptions
2024-09-19 15:51:58,956:INFO:Importing libraries
2024-09-19 15:51:58,956:INFO:Copying training dataset
2024-09-19 15:51:58,970:INFO:Defining folds
2024-09-19 15:51:58,970:INFO:Declaring metric variables
2024-09-19 15:51:58,971:INFO:Importing untrained model
2024-09-19 15:51:58,971:INFO:Declaring custom model
2024-09-19 15:51:58,971:INFO:Gradient Boosting Classifier Imported successfully
2024-09-19 15:51:58,972:INFO:Cross validation set to False
2024-09-19 15:51:58,972:INFO:Fitting Model
2024-09-19 15:52:00,954:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-09-19 15:52:00,954:INFO:create_model() successfully completed......................................
2024-09-19 15:52:01,298:INFO:_master_model_container: 28
2024-09-19 15:52:01,298:INFO:_display_container: 3
2024-09-19 15:52:01,298:INFO:[LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)]
2024-09-19 15:52:01,298:INFO:compare_models() successfully completed......................................
2024-09-19 15:52:38,079:INFO:Initializing plot_model()
2024-09-19 15:52:38,079:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D17B6F90>, estimator=[LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)], plot=confusion_matrix, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-09-19 15:52:38,079:INFO:Checking exceptions
2024-09-19 15:54:16,668:INFO:PyCaret ClassificationExperiment
2024-09-19 15:54:16,669:INFO:Logging name: clf-default-name
2024-09-19 15:54:16,669:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-19 15:54:16,669:INFO:version 3.3.2
2024-09-19 15:54:16,669:INFO:Initializing setup()
2024-09-19 15:54:16,669:INFO:self.USI: ee32
2024-09-19 15:54:16,669:INFO:self._variable_keys: {'n_jobs_param', 'data', 'X_train', 'seed', 'X', 'fold_groups_param', 'memory', 'fold_shuffle_param', 'gpu_param', 'X_test', 'idx', 'fix_imbalance', '_available_plots', 'y_train', 'y_test', '_ml_usecase', 'fold_generator', 'logging_param', 'log_plots_param', 'exp_name_log', 'is_multiclass', 'exp_id', 'target_param', 'gpu_n_jobs_param', 'y', 'USI', 'pipeline', 'html_param'}
2024-09-19 15:54:16,669:INFO:Checking environment
2024-09-19 15:54:16,669:INFO:python_version: 3.11.9
2024-09-19 15:54:16,669:INFO:python_build: ('main', 'Apr 19 2024 16:40:41')
2024-09-19 15:54:16,669:INFO:machine: AMD64
2024-09-19 15:54:16,669:INFO:platform: Windows-10-10.0.19045-SP0
2024-09-19 15:54:16,673:INFO:Memory: svmem(total=16969424896, available=4052340736, percent=76.1, used=12917084160, free=4052340736)
2024-09-19 15:54:16,673:INFO:Physical Core: 4
2024-09-19 15:54:16,675:INFO:Logical Core: 8
2024-09-19 15:54:16,675:INFO:Checking libraries
2024-09-19 15:54:16,675:INFO:System:
2024-09-19 15:54:16,675:INFO:    python: 3.11.9 | packaged by Anaconda, Inc. | (main, Apr 19 2024, 16:40:41) [MSC v.1916 64 bit (AMD64)]
2024-09-19 15:54:16,675:INFO:executable: C:\Users\juran\anaconda3\envs\myenv\python.exe
2024-09-19 15:54:16,675:INFO:   machine: Windows-10-10.0.19045-SP0
2024-09-19 15:54:16,675:INFO:PyCaret required dependencies:
2024-09-19 15:54:16,675:INFO:                 pip: 24.2
2024-09-19 15:54:16,675:INFO:          setuptools: 72.1.0
2024-09-19 15:54:16,675:INFO:             pycaret: 3.3.2
2024-09-19 15:54:16,675:INFO:             IPython: 8.26.0
2024-09-19 15:54:16,675:INFO:          ipywidgets: 8.1.5
2024-09-19 15:54:16,675:INFO:                tqdm: 4.66.5
2024-09-19 15:54:16,675:INFO:               numpy: 1.26.4
2024-09-19 15:54:16,675:INFO:              pandas: 1.5.3
2024-09-19 15:54:16,675:INFO:              jinja2: 3.1.4
2024-09-19 15:54:16,675:INFO:               scipy: 1.11.4
2024-09-19 15:54:16,675:INFO:              joblib: 1.3.2
2024-09-19 15:54:16,675:INFO:             sklearn: 1.4.2
2024-09-19 15:54:16,675:INFO:                pyod: 2.0.2
2024-09-19 15:54:16,675:INFO:            imblearn: 0.12.3
2024-09-19 15:54:16,675:INFO:   category_encoders: 2.6.3
2024-09-19 15:54:16,675:INFO:            lightgbm: 4.5.0
2024-09-19 15:54:16,675:INFO:               numba: 0.60.0
2024-09-19 15:54:16,675:INFO:            requests: 2.32.3
2024-09-19 15:54:16,675:INFO:          matplotlib: 3.7.5
2024-09-19 15:54:16,675:INFO:          scikitplot: 0.3.7
2024-09-19 15:54:16,675:INFO:         yellowbrick: 1.5
2024-09-19 15:54:16,675:INFO:              plotly: 5.24.1
2024-09-19 15:54:16,675:INFO:    plotly-resampler: Not installed
2024-09-19 15:54:16,675:INFO:             kaleido: 0.2.1
2024-09-19 15:54:16,676:INFO:           schemdraw: 0.15
2024-09-19 15:54:16,676:INFO:         statsmodels: 0.14.3
2024-09-19 15:54:16,676:INFO:              sktime: 0.26.0
2024-09-19 15:54:16,676:INFO:               tbats: 1.1.3
2024-09-19 15:54:16,676:INFO:            pmdarima: 2.0.4
2024-09-19 15:54:16,676:INFO:              psutil: 6.0.0
2024-09-19 15:54:16,676:INFO:          markupsafe: 2.1.5
2024-09-19 15:54:16,676:INFO:             pickle5: Not installed
2024-09-19 15:54:16,676:INFO:         cloudpickle: 3.0.0
2024-09-19 15:54:16,676:INFO:         deprecation: 2.1.0
2024-09-19 15:54:16,676:INFO:              xxhash: 3.5.0
2024-09-19 15:54:16,676:INFO:           wurlitzer: Not installed
2024-09-19 15:54:16,676:INFO:PyCaret optional dependencies:
2024-09-19 15:54:16,677:INFO:                shap: Not installed
2024-09-19 15:54:16,677:INFO:           interpret: Not installed
2024-09-19 15:54:16,677:INFO:                umap: Not installed
2024-09-19 15:54:16,677:INFO:     ydata_profiling: Not installed
2024-09-19 15:54:16,677:INFO:  explainerdashboard: Not installed
2024-09-19 15:54:16,677:INFO:             autoviz: Not installed
2024-09-19 15:54:16,677:INFO:           fairlearn: Not installed
2024-09-19 15:54:16,677:INFO:          deepchecks: Not installed
2024-09-19 15:54:16,677:INFO:             xgboost: Not installed
2024-09-19 15:54:16,677:INFO:            catboost: Not installed
2024-09-19 15:54:16,677:INFO:              kmodes: Not installed
2024-09-19 15:54:16,677:INFO:             mlxtend: Not installed
2024-09-19 15:54:16,677:INFO:       statsforecast: Not installed
2024-09-19 15:54:16,677:INFO:        tune_sklearn: Not installed
2024-09-19 15:54:16,677:INFO:                 ray: Not installed
2024-09-19 15:54:16,677:INFO:            hyperopt: Not installed
2024-09-19 15:54:16,677:INFO:              optuna: Not installed
2024-09-19 15:54:16,677:INFO:               skopt: Not installed
2024-09-19 15:54:16,677:INFO:              mlflow: Not installed
2024-09-19 15:54:16,677:INFO:              gradio: Not installed
2024-09-19 15:54:16,677:INFO:             fastapi: Not installed
2024-09-19 15:54:16,677:INFO:             uvicorn: Not installed
2024-09-19 15:54:16,677:INFO:              m2cgen: Not installed
2024-09-19 15:54:16,677:INFO:           evidently: Not installed
2024-09-19 15:54:16,677:INFO:               fugue: Not installed
2024-09-19 15:54:16,677:INFO:           streamlit: Not installed
2024-09-19 15:54:16,677:INFO:             prophet: Not installed
2024-09-19 15:54:16,677:INFO:None
2024-09-19 15:54:16,677:INFO:Set up data.
2024-09-19 15:54:16,697:INFO:Set up folding strategy.
2024-09-19 15:54:16,697:INFO:Set up train/test split.
2024-09-19 15:54:16,713:INFO:Set up index.
2024-09-19 15:54:16,713:INFO:Assigning column types.
2024-09-19 15:54:16,713:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-19 15:54:16,779:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-19 15:54:16,779:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 15:54:16,842:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:54:16,842:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:54:16,889:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-19 15:54:16,889:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 15:54:16,928:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:54:16,928:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:54:16,944:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-19 15:54:16,991:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 15:54:17,022:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:54:17,022:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:54:17,069:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 15:54:17,085:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:54:17,085:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:54:17,085:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-19 15:54:17,163:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:54:17,163:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:54:17,264:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:54:17,264:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:54:17,264:INFO:Preparing preprocessing pipeline...
2024-09-19 15:54:17,264:INFO:Set up label encoding.
2024-09-19 15:54:17,264:INFO:Set up simple imputation.
2024-09-19 15:54:17,264:INFO:Set up encoding of ordinal features.
2024-09-19 15:54:17,264:INFO:Set up encoding of categorical features.
2024-09-19 15:54:17,264:INFO:Set up feature normalization.
2024-09-19 15:54:17,835:INFO:Finished creating preprocessing pipeline.
2024-09-19 15:54:17,884:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\juran\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indica...
                                    transformer=OneHotEncoder(cols=['job',
                                                                    'marital',
                                                                    'education',
                                                                    'contact',
                                                                    'month',
                                                                    'poutcome'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-09-19 15:54:17,884:INFO:Creating final display dataframe.
2024-09-19 15:54:18,036:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target           deposit
2                   Target type            Binary
3                Target mapping     no: 0, yes: 1
4           Original data shape       (11162, 17)
5        Transformed data shape       (11162, 49)
6   Transformed train set shape        (8929, 49)
7    Transformed test set shape        (2233, 49)
8              Numeric features                 7
9          Categorical features                 9
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16                    Normalize              True
17             Normalize method            zscore
18               Fold Generator   StratifiedKFold
19                  Fold Number                10
20                     CPU Jobs                -1
21                      Use GPU             False
22               Log Experiment             False
23              Experiment Name  clf-default-name
24                          USI              ee32
2024-09-19 15:54:18,113:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:54:18,114:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:54:18,183:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:54:18,183:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:54:18,184:INFO:setup() successfully completed in 1.52s...............
2024-09-19 15:54:28,514:INFO:Initializing compare_models()
2024-09-19 15:54:28,515:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2024-09-19 15:54:28,515:INFO:Checking exceptions
2024-09-19 15:54:28,521:INFO:Preparing display monitor
2024-09-19 15:54:28,557:INFO:Initializing Logistic Regression
2024-09-19 15:54:28,557:INFO:Total runtime is 5.829334259033203e-06 minutes
2024-09-19 15:54:28,565:INFO:SubProcess create_model() called ==================================
2024-09-19 15:54:28,566:INFO:Initializing create_model()
2024-09-19 15:54:28,566:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:54:28,566:INFO:Checking exceptions
2024-09-19 15:54:28,566:INFO:Importing libraries
2024-09-19 15:54:28,566:INFO:Copying training dataset
2024-09-19 15:54:28,571:INFO:Defining folds
2024-09-19 15:54:28,571:INFO:Declaring metric variables
2024-09-19 15:54:28,578:INFO:Importing untrained model
2024-09-19 15:54:28,582:INFO:Logistic Regression Imported successfully
2024-09-19 15:54:28,590:INFO:Starting cross validation
2024-09-19 15:54:28,592:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:54:29,037:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:29,048:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:29,048:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:29,057:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:29,057:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:29,057:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:29,057:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:29,064:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:29,065:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:29,066:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:29,067:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:29,068:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:29,070:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:29,070:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:29,072:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:29,075:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:29,076:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:29,079:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:29,080:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:29,080:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:29,081:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:29,082:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:29,089:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:29,425:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:29,436:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:29,444:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:29,444:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:29,447:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:29,461:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:29,477:INFO:Calculating mean and std
2024-09-19 15:54:29,478:INFO:Creating metrics dataframe
2024-09-19 15:54:29,480:INFO:Uploading results into container
2024-09-19 15:54:29,480:INFO:Uploading model into container now
2024-09-19 15:54:29,480:INFO:_master_model_container: 1
2024-09-19 15:54:29,480:INFO:_display_container: 2
2024-09-19 15:54:29,480:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-19 15:54:29,480:INFO:create_model() successfully completed......................................
2024-09-19 15:54:29,796:INFO:SubProcess create_model() end ==================================
2024-09-19 15:54:29,796:INFO:Creating metrics dataframe
2024-09-19 15:54:29,814:INFO:Initializing K Neighbors Classifier
2024-09-19 15:54:29,814:INFO:Total runtime is 0.020950945218404134 minutes
2024-09-19 15:54:29,814:INFO:SubProcess create_model() called ==================================
2024-09-19 15:54:29,814:INFO:Initializing create_model()
2024-09-19 15:54:29,814:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:54:29,814:INFO:Checking exceptions
2024-09-19 15:54:29,814:INFO:Importing libraries
2024-09-19 15:54:29,814:INFO:Copying training dataset
2024-09-19 15:54:29,830:INFO:Defining folds
2024-09-19 15:54:29,830:INFO:Declaring metric variables
2024-09-19 15:54:29,834:INFO:Importing untrained model
2024-09-19 15:54:29,835:INFO:K Neighbors Classifier Imported successfully
2024-09-19 15:54:29,848:INFO:Starting cross validation
2024-09-19 15:54:29,850:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:54:30,437:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:30,449:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:30,455:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:30,463:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:30,465:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:30,475:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:30,476:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:30,480:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:30,490:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:30,490:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:30,498:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:30,501:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:30,501:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:30,501:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:30,502:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:30,511:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:30,511:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:30,512:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:30,516:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:30,523:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:30,523:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:30,524:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:30,527:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:30,536:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:31,011:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:31,020:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:31,020:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:31,020:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:31,032:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:31,040:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:31,071:INFO:Calculating mean and std
2024-09-19 15:54:31,071:INFO:Creating metrics dataframe
2024-09-19 15:54:31,079:INFO:Uploading results into container
2024-09-19 15:54:31,079:INFO:Uploading model into container now
2024-09-19 15:54:31,079:INFO:_master_model_container: 2
2024-09-19 15:54:31,079:INFO:_display_container: 2
2024-09-19 15:54:31,079:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-09-19 15:54:31,079:INFO:create_model() successfully completed......................................
2024-09-19 15:54:31,380:INFO:SubProcess create_model() end ==================================
2024-09-19 15:54:31,380:INFO:Creating metrics dataframe
2024-09-19 15:54:31,396:INFO:Initializing Naive Bayes
2024-09-19 15:54:31,396:INFO:Total runtime is 0.047318200270334884 minutes
2024-09-19 15:54:31,396:INFO:SubProcess create_model() called ==================================
2024-09-19 15:54:31,396:INFO:Initializing create_model()
2024-09-19 15:54:31,396:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:54:31,396:INFO:Checking exceptions
2024-09-19 15:54:31,396:INFO:Importing libraries
2024-09-19 15:54:31,396:INFO:Copying training dataset
2024-09-19 15:54:31,414:INFO:Defining folds
2024-09-19 15:54:31,414:INFO:Declaring metric variables
2024-09-19 15:54:31,415:INFO:Importing untrained model
2024-09-19 15:54:31,415:INFO:Naive Bayes Imported successfully
2024-09-19 15:54:31,434:INFO:Starting cross validation
2024-09-19 15:54:31,437:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:54:31,891:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:31,904:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:31,906:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:31,914:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:31,916:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:31,917:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:31,925:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:31,928:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:31,932:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:31,932:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:31,932:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:31,936:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:31,936:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:31,936:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:31,944:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:31,944:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:31,944:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:31,948:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:31,951:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:31,952:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:31,952:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:31,952:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:31,960:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:31,961:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:32,338:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:32,338:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:32,349:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:32,350:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:32,359:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:32,363:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:32,380:INFO:Calculating mean and std
2024-09-19 15:54:32,381:INFO:Creating metrics dataframe
2024-09-19 15:54:32,384:INFO:Uploading results into container
2024-09-19 15:54:32,384:INFO:Uploading model into container now
2024-09-19 15:54:32,384:INFO:_master_model_container: 3
2024-09-19 15:54:32,384:INFO:_display_container: 2
2024-09-19 15:54:32,384:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-09-19 15:54:32,384:INFO:create_model() successfully completed......................................
2024-09-19 15:54:32,687:INFO:SubProcess create_model() end ==================================
2024-09-19 15:54:32,687:INFO:Creating metrics dataframe
2024-09-19 15:54:32,701:INFO:Initializing Decision Tree Classifier
2024-09-19 15:54:32,702:INFO:Total runtime is 0.06909039020538331 minutes
2024-09-19 15:54:32,706:INFO:SubProcess create_model() called ==================================
2024-09-19 15:54:32,706:INFO:Initializing create_model()
2024-09-19 15:54:32,706:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:54:32,706:INFO:Checking exceptions
2024-09-19 15:54:32,706:INFO:Importing libraries
2024-09-19 15:54:32,706:INFO:Copying training dataset
2024-09-19 15:54:32,715:INFO:Defining folds
2024-09-19 15:54:32,715:INFO:Declaring metric variables
2024-09-19 15:54:32,721:INFO:Importing untrained model
2024-09-19 15:54:32,722:INFO:Decision Tree Classifier Imported successfully
2024-09-19 15:54:32,732:INFO:Starting cross validation
2024-09-19 15:54:32,735:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:54:33,273:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:33,283:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:33,283:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:33,283:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:33,294:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:33,297:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:33,298:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:33,299:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:33,301:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:33,302:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:33,304:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:33,304:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:33,304:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:33,304:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:33,312:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:33,313:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:33,316:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:33,316:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:33,320:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:33,354:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:33,354:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:33,354:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:33,370:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:33,385:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:33,835:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:33,845:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:33,845:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:33,855:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:33,855:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:33,876:INFO:Calculating mean and std
2024-09-19 15:54:33,876:INFO:Creating metrics dataframe
2024-09-19 15:54:33,879:INFO:Uploading results into container
2024-09-19 15:54:33,879:INFO:Uploading model into container now
2024-09-19 15:54:33,879:INFO:_master_model_container: 4
2024-09-19 15:54:33,879:INFO:_display_container: 2
2024-09-19 15:54:33,879:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-09-19 15:54:33,879:INFO:create_model() successfully completed......................................
2024-09-19 15:54:34,179:INFO:SubProcess create_model() end ==================================
2024-09-19 15:54:34,179:INFO:Creating metrics dataframe
2024-09-19 15:54:34,214:INFO:Initializing SVM - Linear Kernel
2024-09-19 15:54:34,214:INFO:Total runtime is 0.09429204066594443 minutes
2024-09-19 15:54:34,214:INFO:SubProcess create_model() called ==================================
2024-09-19 15:54:34,214:INFO:Initializing create_model()
2024-09-19 15:54:34,214:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:54:34,214:INFO:Checking exceptions
2024-09-19 15:54:34,214:INFO:Importing libraries
2024-09-19 15:54:34,214:INFO:Copying training dataset
2024-09-19 15:54:34,232:INFO:Defining folds
2024-09-19 15:54:34,232:INFO:Declaring metric variables
2024-09-19 15:54:34,232:INFO:Importing untrained model
2024-09-19 15:54:34,232:INFO:SVM - Linear Kernel Imported successfully
2024-09-19 15:54:34,247:INFO:Starting cross validation
2024-09-19 15:54:34,247:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:54:34,903:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:34,905:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:34,915:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:34,916:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:34,921:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:34,921:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:34,927:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:34,928:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:34,930:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:34,931:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:34,932:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:34,938:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:34,941:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:34,942:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:34,942:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:34,944:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:34,949:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:34,952:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:34,952:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:34,954:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:34,954:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:34,965:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:34,965:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:34,976:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:35,372:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:35,379:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:35,389:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:35,399:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:35,419:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:35,427:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:35,441:INFO:Calculating mean and std
2024-09-19 15:54:35,441:INFO:Creating metrics dataframe
2024-09-19 15:54:35,441:INFO:Uploading results into container
2024-09-19 15:54:35,441:INFO:Uploading model into container now
2024-09-19 15:54:35,441:INFO:_master_model_container: 5
2024-09-19 15:54:35,441:INFO:_display_container: 2
2024-09-19 15:54:35,441:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-09-19 15:54:35,441:INFO:create_model() successfully completed......................................
2024-09-19 15:54:35,762:INFO:SubProcess create_model() end ==================================
2024-09-19 15:54:35,762:INFO:Creating metrics dataframe
2024-09-19 15:54:35,795:INFO:Initializing Ridge Classifier
2024-09-19 15:54:35,795:INFO:Total runtime is 0.12063438892364503 minutes
2024-09-19 15:54:35,811:INFO:SubProcess create_model() called ==================================
2024-09-19 15:54:35,812:INFO:Initializing create_model()
2024-09-19 15:54:35,812:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:54:35,812:INFO:Checking exceptions
2024-09-19 15:54:35,812:INFO:Importing libraries
2024-09-19 15:54:35,812:INFO:Copying training dataset
2024-09-19 15:54:35,816:INFO:Defining folds
2024-09-19 15:54:35,816:INFO:Declaring metric variables
2024-09-19 15:54:35,827:INFO:Importing untrained model
2024-09-19 15:54:35,831:INFO:Ridge Classifier Imported successfully
2024-09-19 15:54:35,849:INFO:Starting cross validation
2024-09-19 15:54:35,852:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:54:36,296:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:36,296:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:36,305:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:36,305:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:36,305:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:36,312:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:36,313:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:36,313:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:36,313:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:36,320:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:36,320:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:36,322:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:36,322:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:36,322:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:36,322:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:36,327:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:36,328:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:36,329:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:36,329:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:36,335:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:36,336:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:36,337:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:36,346:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:36,346:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:36,763:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:36,764:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:36,773:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:36,773:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:36,783:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:36,783:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:36,810:INFO:Calculating mean and std
2024-09-19 15:54:36,811:INFO:Creating metrics dataframe
2024-09-19 15:54:36,817:INFO:Uploading results into container
2024-09-19 15:54:36,817:INFO:Uploading model into container now
2024-09-19 15:54:36,817:INFO:_master_model_container: 6
2024-09-19 15:54:36,817:INFO:_display_container: 2
2024-09-19 15:54:36,817:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-09-19 15:54:36,817:INFO:create_model() successfully completed......................................
2024-09-19 15:54:37,108:INFO:SubProcess create_model() end ==================================
2024-09-19 15:54:37,108:INFO:Creating metrics dataframe
2024-09-19 15:54:37,108:INFO:Initializing Random Forest Classifier
2024-09-19 15:54:37,108:INFO:Total runtime is 0.14252197742462158 minutes
2024-09-19 15:54:37,124:INFO:SubProcess create_model() called ==================================
2024-09-19 15:54:37,124:INFO:Initializing create_model()
2024-09-19 15:54:37,124:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:54:37,124:INFO:Checking exceptions
2024-09-19 15:54:37,124:INFO:Importing libraries
2024-09-19 15:54:37,124:INFO:Copying training dataset
2024-09-19 15:54:37,133:INFO:Defining folds
2024-09-19 15:54:37,133:INFO:Declaring metric variables
2024-09-19 15:54:37,133:INFO:Importing untrained model
2024-09-19 15:54:37,133:INFO:Random Forest Classifier Imported successfully
2024-09-19 15:54:37,148:INFO:Starting cross validation
2024-09-19 15:54:37,148:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:54:39,137:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:39,137:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:39,137:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:39,137:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:39,148:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:39,149:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:39,149:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:39,149:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:39,165:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:39,165:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:39,165:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:39,165:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:39,200:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:39,208:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:39,212:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:39,220:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:39,224:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:39,231:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:39,232:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:39,244:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:39,254:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:39,260:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:39,268:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:39,275:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:40,052:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:40,052:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:40,073:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:40,073:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:40,095:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:40,095:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:40,136:INFO:Calculating mean and std
2024-09-19 15:54:40,136:INFO:Creating metrics dataframe
2024-09-19 15:54:40,136:INFO:Uploading results into container
2024-09-19 15:54:40,145:INFO:Uploading model into container now
2024-09-19 15:54:40,145:INFO:_master_model_container: 7
2024-09-19 15:54:40,145:INFO:_display_container: 2
2024-09-19 15:54:40,145:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-09-19 15:54:40,145:INFO:create_model() successfully completed......................................
2024-09-19 15:54:40,437:INFO:SubProcess create_model() end ==================================
2024-09-19 15:54:40,438:INFO:Creating metrics dataframe
2024-09-19 15:54:40,450:INFO:Initializing Quadratic Discriminant Analysis
2024-09-19 15:54:40,450:INFO:Total runtime is 0.19822707573572795 minutes
2024-09-19 15:54:40,455:INFO:SubProcess create_model() called ==================================
2024-09-19 15:54:40,455:INFO:Initializing create_model()
2024-09-19 15:54:40,456:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:54:40,456:INFO:Checking exceptions
2024-09-19 15:54:40,456:INFO:Importing libraries
2024-09-19 15:54:40,456:INFO:Copying training dataset
2024-09-19 15:54:40,467:INFO:Defining folds
2024-09-19 15:54:40,467:INFO:Declaring metric variables
2024-09-19 15:54:40,467:INFO:Importing untrained model
2024-09-19 15:54:40,479:INFO:Quadratic Discriminant Analysis Imported successfully
2024-09-19 15:54:40,485:INFO:Starting cross validation
2024-09-19 15:54:40,486:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:54:40,848:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:54:40,848:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:54:40,848:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:54:40,848:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:54:40,857:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:54:40,862:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:54:40,868:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:54:40,888:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:54:40,952:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:40,952:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:40,962:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:40,963:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:40,963:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:40,963:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:40,967:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:40,968:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:40,968:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:40,971:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:40,971:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:40,975:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:40,975:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:40,979:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:40,979:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:40,981:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:40,984:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:40,984:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:40,984:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:40,984:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:40,984:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:40,984:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:40,996:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:41,008:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:41,300:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:54:41,303:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:54:41,385:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:41,398:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:41,400:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:41,406:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:41,418:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:41,429:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:41,448:INFO:Calculating mean and std
2024-09-19 15:54:41,449:INFO:Creating metrics dataframe
2024-09-19 15:54:41,452:INFO:Uploading results into container
2024-09-19 15:54:41,452:INFO:Uploading model into container now
2024-09-19 15:54:41,452:INFO:_master_model_container: 8
2024-09-19 15:54:41,452:INFO:_display_container: 2
2024-09-19 15:54:41,452:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-09-19 15:54:41,452:INFO:create_model() successfully completed......................................
2024-09-19 15:54:41,787:INFO:SubProcess create_model() end ==================================
2024-09-19 15:54:41,787:INFO:Creating metrics dataframe
2024-09-19 15:54:41,801:INFO:Initializing Ada Boost Classifier
2024-09-19 15:54:41,801:INFO:Total runtime is 0.22073254187901814 minutes
2024-09-19 15:54:41,809:INFO:SubProcess create_model() called ==================================
2024-09-19 15:54:41,809:INFO:Initializing create_model()
2024-09-19 15:54:41,810:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:54:41,810:INFO:Checking exceptions
2024-09-19 15:54:41,811:INFO:Importing libraries
2024-09-19 15:54:41,811:INFO:Copying training dataset
2024-09-19 15:54:41,821:INFO:Defining folds
2024-09-19 15:54:41,822:INFO:Declaring metric variables
2024-09-19 15:54:41,823:INFO:Importing untrained model
2024-09-19 15:54:41,831:INFO:Ada Boost Classifier Imported successfully
2024-09-19 15:54:41,834:INFO:Starting cross validation
2024-09-19 15:54:41,834:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:54:42,170:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:54:42,179:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:54:42,182:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:54:42,202:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:54:42,202:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:54:42,202:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:54:42,202:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:54:42,216:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:54:42,947:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:42,948:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:42,956:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:42,961:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:42,963:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:42,971:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:42,972:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:42,972:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:42,972:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:42,985:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:42,987:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:42,996:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:43,027:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:43,028:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:43,029:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:43,036:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:43,039:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:43,045:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:43,049:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:43,049:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:43,051:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:43,052:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:43,063:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:43,217:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:54:43,233:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:54:44,006:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:44,016:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:44,037:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:44,078:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:44,089:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:44,097:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:44,120:INFO:Calculating mean and std
2024-09-19 15:54:44,121:INFO:Creating metrics dataframe
2024-09-19 15:54:44,127:INFO:Uploading results into container
2024-09-19 15:54:44,128:INFO:Uploading model into container now
2024-09-19 15:54:44,128:INFO:_master_model_container: 9
2024-09-19 15:54:44,128:INFO:_display_container: 2
2024-09-19 15:54:44,129:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-09-19 15:54:44,129:INFO:create_model() successfully completed......................................
2024-09-19 15:54:44,433:INFO:SubProcess create_model() end ==================================
2024-09-19 15:54:44,433:INFO:Creating metrics dataframe
2024-09-19 15:54:44,450:INFO:Initializing Gradient Boosting Classifier
2024-09-19 15:54:44,450:INFO:Total runtime is 0.2648878296216329 minutes
2024-09-19 15:54:44,464:INFO:SubProcess create_model() called ==================================
2024-09-19 15:54:44,464:INFO:Initializing create_model()
2024-09-19 15:54:44,464:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:54:44,464:INFO:Checking exceptions
2024-09-19 15:54:44,464:INFO:Importing libraries
2024-09-19 15:54:44,464:INFO:Copying training dataset
2024-09-19 15:54:44,476:INFO:Defining folds
2024-09-19 15:54:44,476:INFO:Declaring metric variables
2024-09-19 15:54:44,482:INFO:Importing untrained model
2024-09-19 15:54:44,483:INFO:Gradient Boosting Classifier Imported successfully
2024-09-19 15:54:44,498:INFO:Starting cross validation
2024-09-19 15:54:44,503:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:54:46,788:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:46,789:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:46,795:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:46,800:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:46,802:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:46,808:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:46,809:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:46,810:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:46,811:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:46,812:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:46,819:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:46,819:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:46,823:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:46,826:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:46,829:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:46,837:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:46,840:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:46,847:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:46,856:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:46,858:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:46,858:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:46,867:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:46,868:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:46,878:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:49,010:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:49,021:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:49,031:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:49,031:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:49,041:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:49,052:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:49,072:INFO:Calculating mean and std
2024-09-19 15:54:49,072:INFO:Creating metrics dataframe
2024-09-19 15:54:49,072:INFO:Uploading results into container
2024-09-19 15:54:49,077:INFO:Uploading model into container now
2024-09-19 15:54:49,078:INFO:_master_model_container: 10
2024-09-19 15:54:49,078:INFO:_display_container: 2
2024-09-19 15:54:49,078:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-09-19 15:54:49,078:INFO:create_model() successfully completed......................................
2024-09-19 15:54:49,367:INFO:SubProcess create_model() end ==================================
2024-09-19 15:54:49,368:INFO:Creating metrics dataframe
2024-09-19 15:54:49,378:INFO:Initializing Linear Discriminant Analysis
2024-09-19 15:54:49,378:INFO:Total runtime is 0.3470234115918477 minutes
2024-09-19 15:54:49,393:INFO:SubProcess create_model() called ==================================
2024-09-19 15:54:49,394:INFO:Initializing create_model()
2024-09-19 15:54:49,394:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:54:49,394:INFO:Checking exceptions
2024-09-19 15:54:49,395:INFO:Importing libraries
2024-09-19 15:54:49,395:INFO:Copying training dataset
2024-09-19 15:54:49,395:INFO:Defining folds
2024-09-19 15:54:49,395:INFO:Declaring metric variables
2024-09-19 15:54:49,414:INFO:Importing untrained model
2024-09-19 15:54:49,414:INFO:Linear Discriminant Analysis Imported successfully
2024-09-19 15:54:49,434:INFO:Starting cross validation
2024-09-19 15:54:49,434:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:54:49,949:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:49,952:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:49,961:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:49,963:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:49,964:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:49,964:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:49,967:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:49,967:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:49,967:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:49,967:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:49,967:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:49,975:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:49,975:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:49,978:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:49,978:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:49,982:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:49,983:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:49,984:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:49,984:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:49,985:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:49,985:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:49,993:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:49,994:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:50,008:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:50,434:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:50,446:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:50,449:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:50,454:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:50,461:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:50,466:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:50,495:INFO:Calculating mean and std
2024-09-19 15:54:50,496:INFO:Creating metrics dataframe
2024-09-19 15:54:50,501:INFO:Uploading results into container
2024-09-19 15:54:50,502:INFO:Uploading model into container now
2024-09-19 15:54:50,502:INFO:_master_model_container: 11
2024-09-19 15:54:50,502:INFO:_display_container: 2
2024-09-19 15:54:50,503:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-09-19 15:54:50,503:INFO:create_model() successfully completed......................................
2024-09-19 15:54:50,810:INFO:SubProcess create_model() end ==================================
2024-09-19 15:54:50,810:INFO:Creating metrics dataframe
2024-09-19 15:54:50,819:INFO:Initializing Extra Trees Classifier
2024-09-19 15:54:50,819:INFO:Total runtime is 0.37103884617487587 minutes
2024-09-19 15:54:50,826:INFO:SubProcess create_model() called ==================================
2024-09-19 15:54:50,827:INFO:Initializing create_model()
2024-09-19 15:54:50,827:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:54:50,827:INFO:Checking exceptions
2024-09-19 15:54:50,827:INFO:Importing libraries
2024-09-19 15:54:50,827:INFO:Copying training dataset
2024-09-19 15:54:50,831:INFO:Defining folds
2024-09-19 15:54:50,831:INFO:Declaring metric variables
2024-09-19 15:54:50,831:INFO:Importing untrained model
2024-09-19 15:54:50,845:INFO:Extra Trees Classifier Imported successfully
2024-09-19 15:54:50,849:INFO:Starting cross validation
2024-09-19 15:54:50,849:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:54:52,841:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:52,853:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:52,854:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:52,863:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:52,863:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:52,888:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:52,916:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:52,926:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:52,939:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:52,961:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:52,962:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:52,973:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:52,973:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:52,976:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:52,980:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:52,980:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:52,980:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:52,980:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:52,980:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:52,990:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:52,990:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:52,990:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:53,000:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:53,001:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:53,759:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:53,773:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:53,797:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:53,845:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:53,859:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:53,870:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:53,888:INFO:Calculating mean and std
2024-09-19 15:54:53,888:INFO:Creating metrics dataframe
2024-09-19 15:54:53,891:INFO:Uploading results into container
2024-09-19 15:54:53,892:INFO:Uploading model into container now
2024-09-19 15:54:53,892:INFO:_master_model_container: 12
2024-09-19 15:54:53,893:INFO:_display_container: 2
2024-09-19 15:54:53,894:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-09-19 15:54:53,894:INFO:create_model() successfully completed......................................
2024-09-19 15:54:54,196:INFO:SubProcess create_model() end ==================================
2024-09-19 15:54:54,196:INFO:Creating metrics dataframe
2024-09-19 15:54:54,233:INFO:Initializing Light Gradient Boosting Machine
2024-09-19 15:54:54,234:INFO:Total runtime is 0.4279500126838684 minutes
2024-09-19 15:54:54,241:INFO:SubProcess create_model() called ==================================
2024-09-19 15:54:54,242:INFO:Initializing create_model()
2024-09-19 15:54:54,242:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:54:54,243:INFO:Checking exceptions
2024-09-19 15:54:54,243:INFO:Importing libraries
2024-09-19 15:54:54,243:INFO:Copying training dataset
2024-09-19 15:54:54,252:INFO:Defining folds
2024-09-19 15:54:54,253:INFO:Declaring metric variables
2024-09-19 15:54:54,257:INFO:Importing untrained model
2024-09-19 15:54:54,267:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-19 15:54:54,283:INFO:Starting cross validation
2024-09-19 15:54:54,288:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:54:55,468:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:55,468:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:55,487:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:55,487:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:55,497:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:55,497:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:55,529:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:55,530:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:55,540:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:55,551:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:55,551:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:55,562:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:55,809:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:55,819:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:55,829:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:55,846:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:55,849:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:55,849:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:55,860:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:55,868:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:55,870:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:55,946:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:55,953:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:55,964:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:56,185:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:56,194:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:56,205:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:56,213:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:56,222:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:56,231:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:56,254:INFO:Calculating mean and std
2024-09-19 15:54:56,255:INFO:Creating metrics dataframe
2024-09-19 15:54:56,259:INFO:Uploading results into container
2024-09-19 15:54:56,260:INFO:Uploading model into container now
2024-09-19 15:54:56,260:INFO:_master_model_container: 13
2024-09-19 15:54:56,260:INFO:_display_container: 2
2024-09-19 15:54:56,261:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-19 15:54:56,262:INFO:create_model() successfully completed......................................
2024-09-19 15:54:56,595:INFO:SubProcess create_model() end ==================================
2024-09-19 15:54:56,595:INFO:Creating metrics dataframe
2024-09-19 15:54:56,623:INFO:Initializing Dummy Classifier
2024-09-19 15:54:56,623:INFO:Total runtime is 0.46777071555455524 minutes
2024-09-19 15:54:56,628:INFO:SubProcess create_model() called ==================================
2024-09-19 15:54:56,630:INFO:Initializing create_model()
2024-09-19 15:54:56,630:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:54:56,630:INFO:Checking exceptions
2024-09-19 15:54:56,631:INFO:Importing libraries
2024-09-19 15:54:56,632:INFO:Copying training dataset
2024-09-19 15:54:56,646:INFO:Defining folds
2024-09-19 15:54:56,647:INFO:Declaring metric variables
2024-09-19 15:54:56,654:INFO:Importing untrained model
2024-09-19 15:54:56,662:INFO:Dummy Classifier Imported successfully
2024-09-19 15:54:56,673:INFO:Starting cross validation
2024-09-19 15:54:56,678:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:54:57,144:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:57,148:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:57,150:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:57,153:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:57,154:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:57,157:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:57,159:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:57,160:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:57,161:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:57,161:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:54:57,162:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:57,164:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:57,164:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:54:57,164:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:57,168:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:54:57,168:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:57,168:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:57,168:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:57,168:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:54:57,168:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:57,168:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:57,168:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:57,174:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:54:57,176:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:57,177:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:54:57,178:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:54:57,178:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:57,178:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:57,178:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:57,183:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:57,185:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:54:57,192:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:57,527:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:57,536:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:57,536:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:54:57,547:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:57,547:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:57,561:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:57,567:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:54:57,567:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:57,598:INFO:Calculating mean and std
2024-09-19 15:54:57,598:INFO:Creating metrics dataframe
2024-09-19 15:54:57,606:INFO:Uploading results into container
2024-09-19 15:54:57,606:INFO:Uploading model into container now
2024-09-19 15:54:57,606:INFO:_master_model_container: 14
2024-09-19 15:54:57,606:INFO:_display_container: 2
2024-09-19 15:54:57,606:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-09-19 15:54:57,606:INFO:create_model() successfully completed......................................
2024-09-19 15:54:57,914:INFO:SubProcess create_model() end ==================================
2024-09-19 15:54:57,914:INFO:Creating metrics dataframe
2024-09-19 15:54:57,945:INFO:Initializing create_model()
2024-09-19 15:54:57,945:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:54:57,946:INFO:Checking exceptions
2024-09-19 15:54:57,949:INFO:Importing libraries
2024-09-19 15:54:57,949:INFO:Copying training dataset
2024-09-19 15:54:57,956:INFO:Defining folds
2024-09-19 15:54:57,956:INFO:Declaring metric variables
2024-09-19 15:54:57,956:INFO:Importing untrained model
2024-09-19 15:54:57,956:INFO:Declaring custom model
2024-09-19 15:54:57,957:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-19 15:54:57,958:INFO:Cross validation set to False
2024-09-19 15:54:57,958:INFO:Fitting Model
2024-09-19 15:54:58,182:INFO:[LightGBM] [Info] Number of positive: 4231, number of negative: 4698
2024-09-19 15:54:58,182:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000806 seconds.
2024-09-19 15:54:58,182:INFO:You can set `force_row_wise=true` to remove the overhead.
2024-09-19 15:54:58,182:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2024-09-19 15:54:58,182:INFO:[LightGBM] [Info] Total Bins 1045
2024-09-19 15:54:58,182:INFO:[LightGBM] [Info] Number of data points in the train set: 8929, number of used features: 48
2024-09-19 15:54:58,182:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.473849 -> initscore=-0.104699
2024-09-19 15:54:58,182:INFO:[LightGBM] [Info] Start training from score -0.104699
2024-09-19 15:54:58,276:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-19 15:54:58,276:INFO:create_model() successfully completed......................................
2024-09-19 15:54:58,623:INFO:_master_model_container: 14
2024-09-19 15:54:58,623:INFO:_display_container: 2
2024-09-19 15:54:58,639:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-19 15:54:58,639:INFO:compare_models() successfully completed......................................
2024-09-19 15:54:58,736:INFO:Initializing compare_models()
2024-09-19 15:54:58,736:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Recall, n_select=3, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Recall', 'n_select': 3, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2024-09-19 15:54:58,736:INFO:Checking exceptions
2024-09-19 15:54:58,740:INFO:Preparing display monitor
2024-09-19 15:54:58,768:INFO:Initializing Logistic Regression
2024-09-19 15:54:58,768:INFO:Total runtime is 0.0 minutes
2024-09-19 15:54:58,775:INFO:SubProcess create_model() called ==================================
2024-09-19 15:54:58,775:INFO:Initializing create_model()
2024-09-19 15:54:58,775:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:54:58,775:INFO:Checking exceptions
2024-09-19 15:54:58,775:INFO:Importing libraries
2024-09-19 15:54:58,775:INFO:Copying training dataset
2024-09-19 15:54:58,776:INFO:Defining folds
2024-09-19 15:54:58,776:INFO:Declaring metric variables
2024-09-19 15:54:58,776:INFO:Importing untrained model
2024-09-19 15:54:58,776:INFO:Logistic Regression Imported successfully
2024-09-19 15:54:58,793:INFO:Starting cross validation
2024-09-19 15:54:58,793:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:54:59,232:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:59,241:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:59,241:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:59,241:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:59,241:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:59,241:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:59,241:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:59,251:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:59,251:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:59,251:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:59,251:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:59,251:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:59,251:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:59,251:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:59,261:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:59,261:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:59,261:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:59,261:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:59,261:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:59,261:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:59,261:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:59,271:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:59,281:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:59,292:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:59,579:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:59,579:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:59,589:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:59,609:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:59,624:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:59,630:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:54:59,650:INFO:Calculating mean and std
2024-09-19 15:54:59,650:INFO:Creating metrics dataframe
2024-09-19 15:54:59,650:INFO:Uploading results into container
2024-09-19 15:54:59,650:INFO:Uploading model into container now
2024-09-19 15:54:59,650:INFO:_master_model_container: 15
2024-09-19 15:54:59,650:INFO:_display_container: 3
2024-09-19 15:54:59,650:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-19 15:54:59,650:INFO:create_model() successfully completed......................................
2024-09-19 15:54:59,956:INFO:SubProcess create_model() end ==================================
2024-09-19 15:54:59,956:INFO:Creating metrics dataframe
2024-09-19 15:54:59,956:INFO:Initializing K Neighbors Classifier
2024-09-19 15:54:59,956:INFO:Total runtime is 0.01979862848917643 minutes
2024-09-19 15:54:59,971:INFO:SubProcess create_model() called ==================================
2024-09-19 15:54:59,971:INFO:Initializing create_model()
2024-09-19 15:54:59,971:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:54:59,971:INFO:Checking exceptions
2024-09-19 15:54:59,971:INFO:Importing libraries
2024-09-19 15:54:59,971:INFO:Copying training dataset
2024-09-19 15:54:59,971:INFO:Defining folds
2024-09-19 15:54:59,971:INFO:Declaring metric variables
2024-09-19 15:54:59,971:INFO:Importing untrained model
2024-09-19 15:54:59,987:INFO:K Neighbors Classifier Imported successfully
2024-09-19 15:55:00,006:INFO:Starting cross validation
2024-09-19 15:55:00,008:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:55:00,617:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:00,622:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:00,628:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:00,629:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:00,629:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:00,629:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:00,634:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:00,634:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:00,634:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:00,634:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:00,644:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:00,644:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:00,644:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:00,644:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:00,654:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:00,654:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:00,654:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:00,654:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:00,664:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:00,664:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:00,668:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:00,669:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:00,675:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:00,678:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:01,092:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:01,102:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:01,112:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:01,123:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:01,133:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:01,133:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:01,153:INFO:Calculating mean and std
2024-09-19 15:55:01,153:INFO:Creating metrics dataframe
2024-09-19 15:55:01,153:INFO:Uploading results into container
2024-09-19 15:55:01,153:INFO:Uploading model into container now
2024-09-19 15:55:01,153:INFO:_master_model_container: 16
2024-09-19 15:55:01,153:INFO:_display_container: 3
2024-09-19 15:55:01,153:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-09-19 15:55:01,153:INFO:create_model() successfully completed......................................
2024-09-19 15:55:01,435:INFO:SubProcess create_model() end ==================================
2024-09-19 15:55:01,435:INFO:Creating metrics dataframe
2024-09-19 15:55:01,451:INFO:Initializing Naive Bayes
2024-09-19 15:55:01,451:INFO:Total runtime is 0.04472239017486572 minutes
2024-09-19 15:55:01,451:INFO:SubProcess create_model() called ==================================
2024-09-19 15:55:01,451:INFO:Initializing create_model()
2024-09-19 15:55:01,451:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:55:01,451:INFO:Checking exceptions
2024-09-19 15:55:01,451:INFO:Importing libraries
2024-09-19 15:55:01,451:INFO:Copying training dataset
2024-09-19 15:55:01,467:INFO:Defining folds
2024-09-19 15:55:01,467:INFO:Declaring metric variables
2024-09-19 15:55:01,467:INFO:Importing untrained model
2024-09-19 15:55:01,467:INFO:Naive Bayes Imported successfully
2024-09-19 15:55:01,482:INFO:Starting cross validation
2024-09-19 15:55:01,498:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:55:01,919:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:01,919:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:01,939:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:01,939:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:01,939:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:01,939:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:01,939:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:01,949:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:01,949:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:01,949:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:01,949:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:01,949:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:01,956:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:01,959:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:01,959:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:01,959:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:01,959:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:01,959:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:01,959:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:01,969:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:01,969:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:01,969:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:01,986:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:02,305:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:02,322:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:02,324:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:02,334:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:02,334:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:02,336:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:02,357:INFO:Calculating mean and std
2024-09-19 15:55:02,357:INFO:Creating metrics dataframe
2024-09-19 15:55:02,357:INFO:Uploading results into container
2024-09-19 15:55:02,357:INFO:Uploading model into container now
2024-09-19 15:55:02,357:INFO:_master_model_container: 17
2024-09-19 15:55:02,357:INFO:_display_container: 3
2024-09-19 15:55:02,357:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-09-19 15:55:02,357:INFO:create_model() successfully completed......................................
2024-09-19 15:55:02,638:INFO:SubProcess create_model() end ==================================
2024-09-19 15:55:02,638:INFO:Creating metrics dataframe
2024-09-19 15:55:02,662:INFO:Initializing Decision Tree Classifier
2024-09-19 15:55:02,662:INFO:Total runtime is 0.06490020354588827 minutes
2024-09-19 15:55:02,662:INFO:SubProcess create_model() called ==================================
2024-09-19 15:55:02,662:INFO:Initializing create_model()
2024-09-19 15:55:02,662:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:55:02,662:INFO:Checking exceptions
2024-09-19 15:55:02,662:INFO:Importing libraries
2024-09-19 15:55:02,662:INFO:Copying training dataset
2024-09-19 15:55:02,677:INFO:Defining folds
2024-09-19 15:55:02,677:INFO:Declaring metric variables
2024-09-19 15:55:02,701:INFO:Importing untrained model
2024-09-19 15:55:02,701:INFO:Decision Tree Classifier Imported successfully
2024-09-19 15:55:02,717:INFO:Starting cross validation
2024-09-19 15:55:02,717:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:55:03,271:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:03,282:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:03,282:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:03,282:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:03,292:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:03,292:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:03,292:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:03,292:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:03,292:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:03,292:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:03,292:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:03,292:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:03,302:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:03,302:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:03,302:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:03,302:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:03,302:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:03,302:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:03,302:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:03,312:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:03,314:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:03,314:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:03,314:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:03,314:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:03,718:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:03,740:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:03,759:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:03,779:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:03,799:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:03,810:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:03,830:INFO:Calculating mean and std
2024-09-19 15:55:03,830:INFO:Creating metrics dataframe
2024-09-19 15:55:03,830:INFO:Uploading results into container
2024-09-19 15:55:03,830:INFO:Uploading model into container now
2024-09-19 15:55:03,830:INFO:_master_model_container: 18
2024-09-19 15:55:03,830:INFO:_display_container: 3
2024-09-19 15:55:03,830:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-09-19 15:55:03,830:INFO:create_model() successfully completed......................................
2024-09-19 15:55:04,099:INFO:SubProcess create_model() end ==================================
2024-09-19 15:55:04,099:INFO:Creating metrics dataframe
2024-09-19 15:55:04,099:INFO:Initializing SVM - Linear Kernel
2024-09-19 15:55:04,099:INFO:Total runtime is 0.08884914716084799 minutes
2024-09-19 15:55:04,099:INFO:SubProcess create_model() called ==================================
2024-09-19 15:55:04,099:INFO:Initializing create_model()
2024-09-19 15:55:04,099:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:55:04,099:INFO:Checking exceptions
2024-09-19 15:55:04,099:INFO:Importing libraries
2024-09-19 15:55:04,099:INFO:Copying training dataset
2024-09-19 15:55:04,114:INFO:Defining folds
2024-09-19 15:55:04,114:INFO:Declaring metric variables
2024-09-19 15:55:04,114:INFO:Importing untrained model
2024-09-19 15:55:04,130:INFO:SVM - Linear Kernel Imported successfully
2024-09-19 15:55:04,142:INFO:Starting cross validation
2024-09-19 15:55:04,142:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:55:04,758:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:04,758:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:04,758:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:04,769:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:04,769:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:04,769:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:04,769:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:04,769:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:04,779:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:04,779:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:04,779:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:04,779:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:04,789:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:04,789:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:04,789:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:04,789:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:04,789:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:04,799:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:04,799:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:04,799:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:04,799:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:04,815:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:04,819:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:04,829:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:05,216:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:05,226:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:05,226:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:05,226:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:05,226:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:05,237:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:05,257:INFO:Calculating mean and std
2024-09-19 15:55:05,257:INFO:Creating metrics dataframe
2024-09-19 15:55:05,257:INFO:Uploading results into container
2024-09-19 15:55:05,257:INFO:Uploading model into container now
2024-09-19 15:55:05,257:INFO:_master_model_container: 19
2024-09-19 15:55:05,257:INFO:_display_container: 3
2024-09-19 15:55:05,257:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-09-19 15:55:05,257:INFO:create_model() successfully completed......................................
2024-09-19 15:55:05,529:INFO:SubProcess create_model() end ==================================
2024-09-19 15:55:05,529:INFO:Creating metrics dataframe
2024-09-19 15:55:05,554:INFO:Initializing Ridge Classifier
2024-09-19 15:55:05,554:INFO:Total runtime is 0.11310497919718425 minutes
2024-09-19 15:55:05,557:INFO:SubProcess create_model() called ==================================
2024-09-19 15:55:05,558:INFO:Initializing create_model()
2024-09-19 15:55:05,558:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:55:05,558:INFO:Checking exceptions
2024-09-19 15:55:05,558:INFO:Importing libraries
2024-09-19 15:55:05,558:INFO:Copying training dataset
2024-09-19 15:55:05,568:INFO:Defining folds
2024-09-19 15:55:05,569:INFO:Declaring metric variables
2024-09-19 15:55:05,576:INFO:Importing untrained model
2024-09-19 15:55:05,576:INFO:Ridge Classifier Imported successfully
2024-09-19 15:55:05,591:INFO:Starting cross validation
2024-09-19 15:55:05,591:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:55:06,045:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:06,045:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:06,045:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:06,056:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:06,066:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:06,066:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:06,066:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:06,066:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:06,066:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:06,066:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:06,066:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:06,076:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:06,076:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:06,076:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:06,076:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:06,076:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:06,076:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:06,076:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:06,086:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:06,086:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:06,086:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:06,086:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:06,096:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:06,104:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:06,444:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:06,449:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:06,452:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:06,452:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:06,460:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:06,469:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:06,484:INFO:Calculating mean and std
2024-09-19 15:55:06,484:INFO:Creating metrics dataframe
2024-09-19 15:55:06,484:INFO:Uploading results into container
2024-09-19 15:55:06,484:INFO:Uploading model into container now
2024-09-19 15:55:06,492:INFO:_master_model_container: 20
2024-09-19 15:55:06,492:INFO:_display_container: 3
2024-09-19 15:55:06,493:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-09-19 15:55:06,493:INFO:create_model() successfully completed......................................
2024-09-19 15:55:06,789:INFO:SubProcess create_model() end ==================================
2024-09-19 15:55:06,789:INFO:Creating metrics dataframe
2024-09-19 15:55:06,806:INFO:Initializing Random Forest Classifier
2024-09-19 15:55:06,806:INFO:Total runtime is 0.13396426836649578 minutes
2024-09-19 15:55:06,811:INFO:SubProcess create_model() called ==================================
2024-09-19 15:55:06,813:INFO:Initializing create_model()
2024-09-19 15:55:06,813:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:55:06,813:INFO:Checking exceptions
2024-09-19 15:55:06,813:INFO:Importing libraries
2024-09-19 15:55:06,813:INFO:Copying training dataset
2024-09-19 15:55:06,818:INFO:Defining folds
2024-09-19 15:55:06,819:INFO:Declaring metric variables
2024-09-19 15:55:06,822:INFO:Importing untrained model
2024-09-19 15:55:06,827:INFO:Random Forest Classifier Imported successfully
2024-09-19 15:55:06,834:INFO:Starting cross validation
2024-09-19 15:55:06,836:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:55:08,752:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:08,756:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:08,763:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:08,768:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:08,782:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:08,786:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:08,789:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:08,805:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:08,810:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:08,816:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:08,819:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:08,828:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:08,835:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:08,838:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:08,843:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:08,849:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:08,851:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:08,857:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:08,862:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:08,868:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:08,879:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:08,879:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:08,879:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:08,893:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:09,702:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:09,702:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:09,709:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:09,709:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:09,729:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:09,729:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:09,760:INFO:Calculating mean and std
2024-09-19 15:55:09,760:INFO:Creating metrics dataframe
2024-09-19 15:55:09,767:INFO:Uploading results into container
2024-09-19 15:55:09,768:INFO:Uploading model into container now
2024-09-19 15:55:09,769:INFO:_master_model_container: 21
2024-09-19 15:55:09,769:INFO:_display_container: 3
2024-09-19 15:55:09,769:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-09-19 15:55:09,769:INFO:create_model() successfully completed......................................
2024-09-19 15:55:10,090:INFO:SubProcess create_model() end ==================================
2024-09-19 15:55:10,090:INFO:Creating metrics dataframe
2024-09-19 15:55:10,108:INFO:Initializing Quadratic Discriminant Analysis
2024-09-19 15:55:10,108:INFO:Total runtime is 0.1890096147855123 minutes
2024-09-19 15:55:10,108:INFO:SubProcess create_model() called ==================================
2024-09-19 15:55:10,108:INFO:Initializing create_model()
2024-09-19 15:55:10,108:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:55:10,108:INFO:Checking exceptions
2024-09-19 15:55:10,108:INFO:Importing libraries
2024-09-19 15:55:10,108:INFO:Copying training dataset
2024-09-19 15:55:10,108:INFO:Defining folds
2024-09-19 15:55:10,108:INFO:Declaring metric variables
2024-09-19 15:55:10,108:INFO:Importing untrained model
2024-09-19 15:55:10,124:INFO:Quadratic Discriminant Analysis Imported successfully
2024-09-19 15:55:10,124:INFO:Starting cross validation
2024-09-19 15:55:10,124:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:55:10,506:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:55:10,515:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:55:10,518:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:55:10,519:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:55:10,519:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:55:10,533:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:55:10,535:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:55:10,541:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:55:10,623:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:10,625:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:10,629:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:10,631:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:10,632:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:10,634:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:10,634:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:10,636:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:10,638:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:10,640:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:10,640:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:10,642:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:10,643:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:10,645:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:10,645:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:10,646:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:10,650:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:10,650:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:10,652:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:10,653:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:10,655:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:10,660:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:10,661:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:10,934:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:55:10,972:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:55:11,047:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:11,073:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:11,083:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:11,083:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:11,093:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:11,093:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:11,124:INFO:Calculating mean and std
2024-09-19 15:55:11,124:INFO:Creating metrics dataframe
2024-09-19 15:55:11,124:INFO:Uploading results into container
2024-09-19 15:55:11,124:INFO:Uploading model into container now
2024-09-19 15:55:11,124:INFO:_master_model_container: 22
2024-09-19 15:55:11,124:INFO:_display_container: 3
2024-09-19 15:55:11,124:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-09-19 15:55:11,124:INFO:create_model() successfully completed......................................
2024-09-19 15:55:11,422:INFO:SubProcess create_model() end ==================================
2024-09-19 15:55:11,422:INFO:Creating metrics dataframe
2024-09-19 15:55:11,438:INFO:Initializing Ada Boost Classifier
2024-09-19 15:55:11,438:INFO:Total runtime is 0.21116936206817627 minutes
2024-09-19 15:55:11,453:INFO:SubProcess create_model() called ==================================
2024-09-19 15:55:11,453:INFO:Initializing create_model()
2024-09-19 15:55:11,453:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:55:11,453:INFO:Checking exceptions
2024-09-19 15:55:11,453:INFO:Importing libraries
2024-09-19 15:55:11,453:INFO:Copying training dataset
2024-09-19 15:55:11,469:INFO:Defining folds
2024-09-19 15:55:11,469:INFO:Declaring metric variables
2024-09-19 15:55:11,477:INFO:Importing untrained model
2024-09-19 15:55:11,481:INFO:Ada Boost Classifier Imported successfully
2024-09-19 15:55:11,488:INFO:Starting cross validation
2024-09-19 15:55:11,488:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:55:11,844:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:55:11,853:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:55:11,853:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:55:11,860:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:55:11,862:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:55:11,862:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:55:11,862:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:55:11,877:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:55:12,645:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:12,650:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:12,650:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:12,661:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:12,661:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:12,670:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:12,670:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:12,676:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:12,676:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:12,676:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:12,676:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:12,676:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:12,676:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:12,676:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:12,676:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:12,676:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:12,696:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:12,697:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:12,701:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:12,702:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:12,703:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:12,709:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:12,715:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:12,715:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:12,955:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:55:12,959:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:55:13,739:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:13,763:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:13,773:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:13,790:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:13,800:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:13,810:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:13,831:INFO:Calculating mean and std
2024-09-19 15:55:13,831:INFO:Creating metrics dataframe
2024-09-19 15:55:13,831:INFO:Uploading results into container
2024-09-19 15:55:13,831:INFO:Uploading model into container now
2024-09-19 15:55:13,831:INFO:_master_model_container: 23
2024-09-19 15:55:13,831:INFO:_display_container: 3
2024-09-19 15:55:13,831:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-09-19 15:55:13,831:INFO:create_model() successfully completed......................................
2024-09-19 15:55:14,112:INFO:SubProcess create_model() end ==================================
2024-09-19 15:55:14,112:INFO:Creating metrics dataframe
2024-09-19 15:55:14,128:INFO:Initializing Gradient Boosting Classifier
2024-09-19 15:55:14,128:INFO:Total runtime is 0.25599767367045084 minutes
2024-09-19 15:55:14,128:INFO:SubProcess create_model() called ==================================
2024-09-19 15:55:14,128:INFO:Initializing create_model()
2024-09-19 15:55:14,128:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:55:14,128:INFO:Checking exceptions
2024-09-19 15:55:14,128:INFO:Importing libraries
2024-09-19 15:55:14,128:INFO:Copying training dataset
2024-09-19 15:55:14,128:INFO:Defining folds
2024-09-19 15:55:14,128:INFO:Declaring metric variables
2024-09-19 15:55:14,143:INFO:Importing untrained model
2024-09-19 15:55:14,143:INFO:Gradient Boosting Classifier Imported successfully
2024-09-19 15:55:14,159:INFO:Starting cross validation
2024-09-19 15:55:14,168:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:55:16,383:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:16,399:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:16,399:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:16,414:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:16,414:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:16,424:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:16,424:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:16,424:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:16,440:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:16,440:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:16,447:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:16,448:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:16,448:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:16,449:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:16,457:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:16,458:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:16,460:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:16,460:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:16,460:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:16,468:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:16,470:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:16,471:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:16,484:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:18,443:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:18,443:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:18,443:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:18,453:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:18,453:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:18,453:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:18,473:INFO:Calculating mean and std
2024-09-19 15:55:18,473:INFO:Creating metrics dataframe
2024-09-19 15:55:18,473:INFO:Uploading results into container
2024-09-19 15:55:18,473:INFO:Uploading model into container now
2024-09-19 15:55:18,473:INFO:_master_model_container: 24
2024-09-19 15:55:18,473:INFO:_display_container: 3
2024-09-19 15:55:18,473:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-09-19 15:55:18,473:INFO:create_model() successfully completed......................................
2024-09-19 15:55:18,788:INFO:SubProcess create_model() end ==================================
2024-09-19 15:55:18,788:INFO:Creating metrics dataframe
2024-09-19 15:55:18,804:INFO:Initializing Linear Discriminant Analysis
2024-09-19 15:55:18,806:INFO:Total runtime is 0.33396816651026406 minutes
2024-09-19 15:55:18,810:INFO:SubProcess create_model() called ==================================
2024-09-19 15:55:18,810:INFO:Initializing create_model()
2024-09-19 15:55:18,810:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:55:18,810:INFO:Checking exceptions
2024-09-19 15:55:18,810:INFO:Importing libraries
2024-09-19 15:55:18,810:INFO:Copying training dataset
2024-09-19 15:55:18,825:INFO:Defining folds
2024-09-19 15:55:18,825:INFO:Declaring metric variables
2024-09-19 15:55:18,825:INFO:Importing untrained model
2024-09-19 15:55:18,838:INFO:Linear Discriminant Analysis Imported successfully
2024-09-19 15:55:18,852:INFO:Starting cross validation
2024-09-19 15:55:18,856:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:55:19,354:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:19,364:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:19,371:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:19,372:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:19,374:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:19,376:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:19,378:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:19,382:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:19,382:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:19,383:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:19,383:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:19,384:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:19,387:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:19,387:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:19,389:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:19,392:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:19,392:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:19,396:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:19,396:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:19,396:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:19,396:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:19,396:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:19,406:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:19,406:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:19,692:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:19,713:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:19,733:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:19,733:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:19,744:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:19,764:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:19,784:INFO:Calculating mean and std
2024-09-19 15:55:19,784:INFO:Creating metrics dataframe
2024-09-19 15:55:19,784:INFO:Uploading results into container
2024-09-19 15:55:19,784:INFO:Uploading model into container now
2024-09-19 15:55:19,792:INFO:_master_model_container: 25
2024-09-19 15:55:19,792:INFO:_display_container: 3
2024-09-19 15:55:19,793:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-09-19 15:55:19,793:INFO:create_model() successfully completed......................................
2024-09-19 15:55:20,080:INFO:SubProcess create_model() end ==================================
2024-09-19 15:55:20,080:INFO:Creating metrics dataframe
2024-09-19 15:55:20,111:INFO:Initializing Extra Trees Classifier
2024-09-19 15:55:20,111:INFO:Total runtime is 0.35571912924448645 minutes
2024-09-19 15:55:20,111:INFO:SubProcess create_model() called ==================================
2024-09-19 15:55:20,124:INFO:Initializing create_model()
2024-09-19 15:55:20,124:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:55:20,124:INFO:Checking exceptions
2024-09-19 15:55:20,124:INFO:Importing libraries
2024-09-19 15:55:20,124:INFO:Copying training dataset
2024-09-19 15:55:20,124:INFO:Defining folds
2024-09-19 15:55:20,124:INFO:Declaring metric variables
2024-09-19 15:55:20,124:INFO:Importing untrained model
2024-09-19 15:55:20,124:INFO:Extra Trees Classifier Imported successfully
2024-09-19 15:55:20,140:INFO:Starting cross validation
2024-09-19 15:55:20,156:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:55:22,193:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:22,206:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:22,207:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:22,221:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:22,223:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:22,232:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:22,234:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:22,235:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:22,239:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:22,244:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:22,245:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:22,251:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:22,261:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:22,262:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:22,280:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:22,285:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:22,299:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:22,301:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:22,311:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:22,312:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:22,319:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:22,321:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:22,331:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:22,341:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:23,138:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:23,147:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:23,154:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:23,160:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:23,160:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:23,180:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:23,212:INFO:Calculating mean and std
2024-09-19 15:55:23,214:INFO:Creating metrics dataframe
2024-09-19 15:55:23,219:INFO:Uploading results into container
2024-09-19 15:55:23,220:INFO:Uploading model into container now
2024-09-19 15:55:23,221:INFO:_master_model_container: 26
2024-09-19 15:55:23,221:INFO:_display_container: 3
2024-09-19 15:55:23,222:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-09-19 15:55:23,222:INFO:create_model() successfully completed......................................
2024-09-19 15:55:23,551:INFO:SubProcess create_model() end ==================================
2024-09-19 15:55:23,551:INFO:Creating metrics dataframe
2024-09-19 15:55:23,570:INFO:Initializing Light Gradient Boosting Machine
2024-09-19 15:55:23,570:INFO:Total runtime is 0.4133705417315165 minutes
2024-09-19 15:55:23,576:INFO:SubProcess create_model() called ==================================
2024-09-19 15:55:23,576:INFO:Initializing create_model()
2024-09-19 15:55:23,576:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:55:23,576:INFO:Checking exceptions
2024-09-19 15:55:23,576:INFO:Importing libraries
2024-09-19 15:55:23,576:INFO:Copying training dataset
2024-09-19 15:55:23,582:INFO:Defining folds
2024-09-19 15:55:23,583:INFO:Declaring metric variables
2024-09-19 15:55:23,588:INFO:Importing untrained model
2024-09-19 15:55:23,592:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-19 15:55:23,606:INFO:Starting cross validation
2024-09-19 15:55:23,611:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:55:24,831:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:24,831:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:24,843:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:24,843:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:24,852:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:24,853:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:24,859:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:24,860:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:24,862:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:24,862:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:24,862:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:24,882:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:25,000:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:25,011:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:25,026:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:25,027:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:25,037:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:25,049:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:25,229:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:25,234:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:25,245:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:25,245:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:25,259:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:25,269:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:25,510:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:25,520:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:25,531:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:25,540:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:25,556:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:25,565:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:25,582:INFO:Calculating mean and std
2024-09-19 15:55:25,583:INFO:Creating metrics dataframe
2024-09-19 15:55:25,587:INFO:Uploading results into container
2024-09-19 15:55:25,588:INFO:Uploading model into container now
2024-09-19 15:55:25,588:INFO:_master_model_container: 27
2024-09-19 15:55:25,589:INFO:_display_container: 3
2024-09-19 15:55:25,589:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-19 15:55:25,589:INFO:create_model() successfully completed......................................
2024-09-19 15:55:25,925:INFO:SubProcess create_model() end ==================================
2024-09-19 15:55:25,925:INFO:Creating metrics dataframe
2024-09-19 15:55:25,942:INFO:Initializing Dummy Classifier
2024-09-19 15:55:25,942:INFO:Total runtime is 0.4529044906298319 minutes
2024-09-19 15:55:25,942:INFO:SubProcess create_model() called ==================================
2024-09-19 15:55:25,942:INFO:Initializing create_model()
2024-09-19 15:55:25,942:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D163F250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:55:25,942:INFO:Checking exceptions
2024-09-19 15:55:25,942:INFO:Importing libraries
2024-09-19 15:55:25,942:INFO:Copying training dataset
2024-09-19 15:55:25,958:INFO:Defining folds
2024-09-19 15:55:25,958:INFO:Declaring metric variables
2024-09-19 15:55:25,958:INFO:Importing untrained model
2024-09-19 15:55:25,958:INFO:Dummy Classifier Imported successfully
2024-09-19 15:55:25,975:INFO:Starting cross validation
2024-09-19 15:55:25,975:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:55:26,473:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:26,473:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:26,473:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:26,483:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:26,484:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:26,485:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:26,485:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:26,489:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:26,489:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:26,489:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:55:26,490:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:26,491:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:55:26,492:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:55:26,495:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:26,496:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:26,496:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:26,496:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:26,496:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:26,496:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:26,496:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:26,496:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:26,496:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:55:26,506:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:55:26,506:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:55:26,508:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:26,509:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:26,511:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:26,513:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:26,514:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:26,515:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:55:26,519:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:26,864:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:26,874:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:26,874:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:26,874:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:55:26,874:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:55:26,884:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:26,884:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:26,904:INFO:Calculating mean and std
2024-09-19 15:55:26,904:INFO:Creating metrics dataframe
2024-09-19 15:55:26,904:INFO:Uploading results into container
2024-09-19 15:55:26,904:INFO:Uploading model into container now
2024-09-19 15:55:26,904:INFO:_master_model_container: 28
2024-09-19 15:55:26,904:INFO:_display_container: 3
2024-09-19 15:55:26,904:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-09-19 15:55:26,904:INFO:create_model() successfully completed......................................
2024-09-19 15:55:27,246:INFO:SubProcess create_model() end ==================================
2024-09-19 15:55:27,246:INFO:Creating metrics dataframe
2024-09-19 15:55:27,291:INFO:Initializing create_model()
2024-09-19 15:55:27,291:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:55:27,291:INFO:Checking exceptions
2024-09-19 15:55:27,293:INFO:Importing libraries
2024-09-19 15:55:27,293:INFO:Copying training dataset
2024-09-19 15:55:27,303:INFO:Defining folds
2024-09-19 15:55:27,303:INFO:Declaring metric variables
2024-09-19 15:55:27,303:INFO:Importing untrained model
2024-09-19 15:55:27,304:INFO:Declaring custom model
2024-09-19 15:55:27,304:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-19 15:55:27,307:INFO:Cross validation set to False
2024-09-19 15:55:27,307:INFO:Fitting Model
2024-09-19 15:55:27,551:INFO:[LightGBM] [Info] Number of positive: 4231, number of negative: 4698
2024-09-19 15:55:27,553:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000821 seconds.
2024-09-19 15:55:27,553:INFO:You can set `force_row_wise=true` to remove the overhead.
2024-09-19 15:55:27,553:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2024-09-19 15:55:27,553:INFO:[LightGBM] [Info] Total Bins 1045
2024-09-19 15:55:27,553:INFO:[LightGBM] [Info] Number of data points in the train set: 8929, number of used features: 48
2024-09-19 15:55:27,554:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.473849 -> initscore=-0.104699
2024-09-19 15:55:27,554:INFO:[LightGBM] [Info] Start training from score -0.104699
2024-09-19 15:55:27,646:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-19 15:55:27,646:INFO:create_model() successfully completed......................................
2024-09-19 15:55:27,969:INFO:Initializing create_model()
2024-09-19 15:55:27,969:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:55:27,970:INFO:Checking exceptions
2024-09-19 15:55:27,974:INFO:Importing libraries
2024-09-19 15:55:27,974:INFO:Copying training dataset
2024-09-19 15:55:27,981:INFO:Defining folds
2024-09-19 15:55:27,981:INFO:Declaring metric variables
2024-09-19 15:55:27,981:INFO:Importing untrained model
2024-09-19 15:55:27,981:INFO:Declaring custom model
2024-09-19 15:55:27,982:INFO:Random Forest Classifier Imported successfully
2024-09-19 15:55:27,984:INFO:Cross validation set to False
2024-09-19 15:55:27,984:INFO:Fitting Model
2024-09-19 15:55:28,598:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-09-19 15:55:28,598:INFO:create_model() successfully completed......................................
2024-09-19 15:55:28,909:INFO:Initializing create_model()
2024-09-19 15:55:28,909:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:55:28,909:INFO:Checking exceptions
2024-09-19 15:55:28,909:INFO:Importing libraries
2024-09-19 15:55:28,909:INFO:Copying training dataset
2024-09-19 15:55:28,925:INFO:Defining folds
2024-09-19 15:55:28,925:INFO:Declaring metric variables
2024-09-19 15:55:28,925:INFO:Importing untrained model
2024-09-19 15:55:28,925:INFO:Declaring custom model
2024-09-19 15:55:28,925:INFO:Gradient Boosting Classifier Imported successfully
2024-09-19 15:55:28,925:INFO:Cross validation set to False
2024-09-19 15:55:28,925:INFO:Fitting Model
2024-09-19 15:55:30,959:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-09-19 15:55:30,959:INFO:create_model() successfully completed......................................
2024-09-19 15:55:31,276:INFO:_master_model_container: 28
2024-09-19 15:55:31,276:INFO:_display_container: 3
2024-09-19 15:55:31,276:INFO:[LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)]
2024-09-19 15:55:31,276:INFO:compare_models() successfully completed......................................
2024-09-19 15:55:31,300:INFO:Initializing compare_models()
2024-09-19 15:55:31,301:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Recall, n_select=3, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Recall', 'n_select': 3, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2024-09-19 15:55:31,301:INFO:Checking exceptions
2024-09-19 15:55:31,305:INFO:Preparing display monitor
2024-09-19 15:55:31,327:INFO:Initializing Logistic Regression
2024-09-19 15:55:31,327:INFO:Total runtime is 0.0 minutes
2024-09-19 15:55:31,327:INFO:SubProcess create_model() called ==================================
2024-09-19 15:55:31,327:INFO:Initializing create_model()
2024-09-19 15:55:31,327:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D5C9B190>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:55:31,327:INFO:Checking exceptions
2024-09-19 15:55:31,327:INFO:Importing libraries
2024-09-19 15:55:31,327:INFO:Copying training dataset
2024-09-19 15:55:31,342:INFO:Defining folds
2024-09-19 15:55:31,342:INFO:Declaring metric variables
2024-09-19 15:55:31,342:INFO:Importing untrained model
2024-09-19 15:55:31,342:INFO:Logistic Regression Imported successfully
2024-09-19 15:55:31,361:INFO:Starting cross validation
2024-09-19 15:55:31,364:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:55:31,833:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:31,834:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:31,838:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:31,844:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:31,845:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:31,845:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:31,849:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:31,849:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:31,854:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:31,856:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:31,856:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:31,856:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:31,856:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:31,859:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:31,859:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:31,860:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:31,864:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:31,865:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:31,866:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:31,870:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:31,872:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:31,878:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:31,884:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:32,243:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:32,266:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:32,282:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:32,302:INFO:Calculating mean and std
2024-09-19 15:55:32,303:INFO:Creating metrics dataframe
2024-09-19 15:55:32,306:INFO:Uploading results into container
2024-09-19 15:55:32,306:INFO:Uploading model into container now
2024-09-19 15:55:32,306:INFO:_master_model_container: 29
2024-09-19 15:55:32,306:INFO:_display_container: 4
2024-09-19 15:55:32,307:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-19 15:55:32,307:INFO:create_model() successfully completed......................................
2024-09-19 15:55:32,619:INFO:SubProcess create_model() end ==================================
2024-09-19 15:55:32,619:INFO:Creating metrics dataframe
2024-09-19 15:55:32,642:INFO:Initializing K Neighbors Classifier
2024-09-19 15:55:32,642:INFO:Total runtime is 0.021912153561909994 minutes
2024-09-19 15:55:32,647:INFO:SubProcess create_model() called ==================================
2024-09-19 15:55:32,648:INFO:Initializing create_model()
2024-09-19 15:55:32,648:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D5C9B190>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:55:32,648:INFO:Checking exceptions
2024-09-19 15:55:32,648:INFO:Importing libraries
2024-09-19 15:55:32,648:INFO:Copying training dataset
2024-09-19 15:55:32,659:INFO:Defining folds
2024-09-19 15:55:32,660:INFO:Declaring metric variables
2024-09-19 15:55:32,669:INFO:Importing untrained model
2024-09-19 15:55:32,676:INFO:K Neighbors Classifier Imported successfully
2024-09-19 15:55:32,685:INFO:Starting cross validation
2024-09-19 15:55:32,687:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:55:33,303:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:33,313:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:33,319:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:33,321:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:33,324:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:33,330:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:33,331:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:33,331:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:33,331:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:33,338:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:33,341:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:33,341:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:33,341:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:33,341:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:33,341:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:33,348:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:33,350:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:33,351:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:33,352:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:33,355:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:33,359:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:33,361:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:33,362:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:33,372:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:33,965:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:33,965:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:33,975:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:33,975:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:33,991:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:33,992:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:34,027:INFO:Calculating mean and std
2024-09-19 15:55:34,029:INFO:Creating metrics dataframe
2024-09-19 15:55:34,034:INFO:Uploading results into container
2024-09-19 15:55:34,035:INFO:Uploading model into container now
2024-09-19 15:55:34,035:INFO:_master_model_container: 30
2024-09-19 15:55:34,035:INFO:_display_container: 4
2024-09-19 15:55:34,036:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-09-19 15:55:34,036:INFO:create_model() successfully completed......................................
2024-09-19 15:55:34,358:INFO:SubProcess create_model() end ==================================
2024-09-19 15:55:34,358:INFO:Creating metrics dataframe
2024-09-19 15:55:34,378:INFO:Initializing Naive Bayes
2024-09-19 15:55:34,378:INFO:Total runtime is 0.050842344760894775 minutes
2024-09-19 15:55:34,382:INFO:SubProcess create_model() called ==================================
2024-09-19 15:55:34,382:INFO:Initializing create_model()
2024-09-19 15:55:34,383:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D5C9B190>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:55:34,383:INFO:Checking exceptions
2024-09-19 15:55:34,383:INFO:Importing libraries
2024-09-19 15:55:34,383:INFO:Copying training dataset
2024-09-19 15:55:34,395:INFO:Defining folds
2024-09-19 15:55:34,395:INFO:Declaring metric variables
2024-09-19 15:55:34,402:INFO:Importing untrained model
2024-09-19 15:55:34,407:INFO:Naive Bayes Imported successfully
2024-09-19 15:55:34,415:INFO:Starting cross validation
2024-09-19 15:55:34,416:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:55:34,850:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:34,860:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:34,861:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:34,862:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:34,866:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:34,867:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:34,868:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:34,871:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:34,871:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:34,871:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:34,871:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:34,873:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:34,877:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:34,878:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:34,879:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:34,881:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:34,882:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:34,882:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:34,884:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:34,887:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:34,890:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:34,892:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:34,892:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:34,894:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:35,303:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:35,312:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:35,313:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:35,323:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:35,324:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:35,334:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:35,351:INFO:Calculating mean and std
2024-09-19 15:55:35,352:INFO:Creating metrics dataframe
2024-09-19 15:55:35,355:INFO:Uploading results into container
2024-09-19 15:55:35,357:INFO:Uploading model into container now
2024-09-19 15:55:35,357:INFO:_master_model_container: 31
2024-09-19 15:55:35,357:INFO:_display_container: 4
2024-09-19 15:55:35,357:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-09-19 15:55:35,357:INFO:create_model() successfully completed......................................
2024-09-19 15:55:35,680:INFO:SubProcess create_model() end ==================================
2024-09-19 15:55:35,681:INFO:Creating metrics dataframe
2024-09-19 15:55:35,699:INFO:Initializing Decision Tree Classifier
2024-09-19 15:55:35,700:INFO:Total runtime is 0.0728848656018575 minutes
2024-09-19 15:55:35,704:INFO:SubProcess create_model() called ==================================
2024-09-19 15:55:35,705:INFO:Initializing create_model()
2024-09-19 15:55:35,705:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D5C9B190>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:55:35,705:INFO:Checking exceptions
2024-09-19 15:55:35,705:INFO:Importing libraries
2024-09-19 15:55:35,705:INFO:Copying training dataset
2024-09-19 15:55:35,708:INFO:Defining folds
2024-09-19 15:55:35,708:INFO:Declaring metric variables
2024-09-19 15:55:35,726:INFO:Importing untrained model
2024-09-19 15:55:35,726:INFO:Decision Tree Classifier Imported successfully
2024-09-19 15:55:35,742:INFO:Starting cross validation
2024-09-19 15:55:35,742:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:55:36,290:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:36,290:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:36,300:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:36,300:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:36,300:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:36,300:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:36,300:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:36,300:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:36,310:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:36,310:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:36,310:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:36,310:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:36,310:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:36,310:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:36,310:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:36,320:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:36,321:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:36,321:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:36,321:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:36,321:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:36,321:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:36,330:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:36,330:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:36,342:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:36,798:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:36,798:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:36,809:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:36,809:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:36,820:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:36,837:INFO:Calculating mean and std
2024-09-19 15:55:36,838:INFO:Creating metrics dataframe
2024-09-19 15:55:36,844:INFO:Uploading results into container
2024-09-19 15:55:36,844:INFO:Uploading model into container now
2024-09-19 15:55:36,845:INFO:_master_model_container: 32
2024-09-19 15:55:36,845:INFO:_display_container: 4
2024-09-19 15:55:36,846:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-09-19 15:55:36,846:INFO:create_model() successfully completed......................................
2024-09-19 15:55:37,153:INFO:SubProcess create_model() end ==================================
2024-09-19 15:55:37,153:INFO:Creating metrics dataframe
2024-09-19 15:55:37,166:INFO:Initializing SVM - Linear Kernel
2024-09-19 15:55:37,166:INFO:Total runtime is 0.09730626742045084 minutes
2024-09-19 15:55:37,170:INFO:SubProcess create_model() called ==================================
2024-09-19 15:55:37,170:INFO:Initializing create_model()
2024-09-19 15:55:37,170:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D5C9B190>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:55:37,170:INFO:Checking exceptions
2024-09-19 15:55:37,170:INFO:Importing libraries
2024-09-19 15:55:37,170:INFO:Copying training dataset
2024-09-19 15:55:37,176:INFO:Defining folds
2024-09-19 15:55:37,176:INFO:Declaring metric variables
2024-09-19 15:55:37,182:INFO:Importing untrained model
2024-09-19 15:55:37,190:INFO:SVM - Linear Kernel Imported successfully
2024-09-19 15:55:37,205:INFO:Starting cross validation
2024-09-19 15:55:37,209:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:55:37,832:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:37,842:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:37,844:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:37,851:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:37,851:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:37,851:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:37,857:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:37,860:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:37,862:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:37,863:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:37,864:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:37,867:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:37,869:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:37,870:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:37,874:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:37,876:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:37,880:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:37,881:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:37,881:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:37,885:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:37,893:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:37,905:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:37,916:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:37,926:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:38,362:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:38,366:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:38,391:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:38,393:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:38,406:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:38,408:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:38,420:INFO:Calculating mean and std
2024-09-19 15:55:38,421:INFO:Creating metrics dataframe
2024-09-19 15:55:38,425:INFO:Uploading results into container
2024-09-19 15:55:38,426:INFO:Uploading model into container now
2024-09-19 15:55:38,426:INFO:_master_model_container: 33
2024-09-19 15:55:38,426:INFO:_display_container: 4
2024-09-19 15:55:38,427:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-09-19 15:55:38,427:INFO:create_model() successfully completed......................................
2024-09-19 15:55:38,705:INFO:SubProcess create_model() end ==================================
2024-09-19 15:55:38,705:INFO:Creating metrics dataframe
2024-09-19 15:55:38,705:INFO:Initializing Ridge Classifier
2024-09-19 15:55:38,705:INFO:Total runtime is 0.12296897967656453 minutes
2024-09-19 15:55:38,721:INFO:SubProcess create_model() called ==================================
2024-09-19 15:55:38,721:INFO:Initializing create_model()
2024-09-19 15:55:38,721:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D5C9B190>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:55:38,721:INFO:Checking exceptions
2024-09-19 15:55:38,721:INFO:Importing libraries
2024-09-19 15:55:38,721:INFO:Copying training dataset
2024-09-19 15:55:38,721:INFO:Defining folds
2024-09-19 15:55:38,721:INFO:Declaring metric variables
2024-09-19 15:55:38,721:INFO:Importing untrained model
2024-09-19 15:55:38,737:INFO:Ridge Classifier Imported successfully
2024-09-19 15:55:38,752:INFO:Starting cross validation
2024-09-19 15:55:38,752:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:55:39,207:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:39,217:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:39,217:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:39,217:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:39,227:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:39,227:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:39,227:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:39,237:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:39,237:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:39,238:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:39,238:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:39,238:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:39,238:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:39,238:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:39,248:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:39,248:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:39,248:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:39,248:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:39,248:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:39,248:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:39,258:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:39,258:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:39,258:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:39,503:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:39,513:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:39,513:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:39,523:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:39,523:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:39,533:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:39,553:INFO:Calculating mean and std
2024-09-19 15:55:39,555:INFO:Creating metrics dataframe
2024-09-19 15:55:39,558:INFO:Uploading results into container
2024-09-19 15:55:39,559:INFO:Uploading model into container now
2024-09-19 15:55:39,559:INFO:_master_model_container: 34
2024-09-19 15:55:39,559:INFO:_display_container: 4
2024-09-19 15:55:39,559:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-09-19 15:55:39,559:INFO:create_model() successfully completed......................................
2024-09-19 15:55:39,859:INFO:SubProcess create_model() end ==================================
2024-09-19 15:55:39,859:INFO:Creating metrics dataframe
2024-09-19 15:55:39,869:INFO:Initializing Random Forest Classifier
2024-09-19 15:55:39,869:INFO:Total runtime is 0.1423638343811035 minutes
2024-09-19 15:55:39,875:INFO:SubProcess create_model() called ==================================
2024-09-19 15:55:39,875:INFO:Initializing create_model()
2024-09-19 15:55:39,875:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D5C9B190>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:55:39,875:INFO:Checking exceptions
2024-09-19 15:55:39,875:INFO:Importing libraries
2024-09-19 15:55:39,875:INFO:Copying training dataset
2024-09-19 15:55:39,882:INFO:Defining folds
2024-09-19 15:55:39,882:INFO:Declaring metric variables
2024-09-19 15:55:39,887:INFO:Importing untrained model
2024-09-19 15:55:39,896:INFO:Random Forest Classifier Imported successfully
2024-09-19 15:55:39,908:INFO:Starting cross validation
2024-09-19 15:55:39,909:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:55:41,845:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:41,845:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:41,847:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:41,857:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:41,858:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:41,858:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:41,881:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:41,881:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:41,882:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:41,893:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:41,904:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:41,905:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:41,917:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:41,931:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:41,936:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:41,936:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:41,944:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:41,948:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:41,951:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:41,952:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:41,960:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:41,960:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:41,961:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:41,961:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:42,747:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:42,750:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:42,758:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:42,761:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:42,768:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:42,770:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:42,798:INFO:Calculating mean and std
2024-09-19 15:55:42,798:INFO:Creating metrics dataframe
2024-09-19 15:55:42,798:INFO:Uploading results into container
2024-09-19 15:55:42,798:INFO:Uploading model into container now
2024-09-19 15:55:42,809:INFO:_master_model_container: 35
2024-09-19 15:55:42,809:INFO:_display_container: 4
2024-09-19 15:55:42,810:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-09-19 15:55:42,810:INFO:create_model() successfully completed......................................
2024-09-19 15:55:43,148:INFO:SubProcess create_model() end ==================================
2024-09-19 15:55:43,148:INFO:Creating metrics dataframe
2024-09-19 15:55:43,174:INFO:Initializing Quadratic Discriminant Analysis
2024-09-19 15:55:43,174:INFO:Total runtime is 0.19743916591008503 minutes
2024-09-19 15:55:43,180:INFO:SubProcess create_model() called ==================================
2024-09-19 15:55:43,181:INFO:Initializing create_model()
2024-09-19 15:55:43,181:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D5C9B190>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:55:43,181:INFO:Checking exceptions
2024-09-19 15:55:43,181:INFO:Importing libraries
2024-09-19 15:55:43,181:INFO:Copying training dataset
2024-09-19 15:55:43,190:INFO:Defining folds
2024-09-19 15:55:43,190:INFO:Declaring metric variables
2024-09-19 15:55:43,190:INFO:Importing untrained model
2024-09-19 15:55:43,206:INFO:Quadratic Discriminant Analysis Imported successfully
2024-09-19 15:55:43,221:INFO:Starting cross validation
2024-09-19 15:55:43,221:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:55:43,593:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:55:43,594:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:55:43,602:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:55:43,602:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:55:43,611:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:55:43,612:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:55:43,612:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:55:43,627:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:55:43,705:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:43,709:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:43,709:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:43,710:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:43,716:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:43,716:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:43,716:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:43,716:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:43,716:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:43,716:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:43,724:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:43,728:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:43,729:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:43,731:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:43,731:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:43,731:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:43,733:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:43,733:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:43,733:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:43,741:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:43,743:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:43,744:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:43,745:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:43,756:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:44,030:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:55:44,043:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:55:44,116:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:44,118:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:44,123:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:44,126:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:44,129:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:44,134:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:44,146:INFO:Calculating mean and std
2024-09-19 15:55:44,146:INFO:Creating metrics dataframe
2024-09-19 15:55:44,146:INFO:Uploading results into container
2024-09-19 15:55:44,146:INFO:Uploading model into container now
2024-09-19 15:55:44,146:INFO:_master_model_container: 36
2024-09-19 15:55:44,146:INFO:_display_container: 4
2024-09-19 15:55:44,146:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-09-19 15:55:44,146:INFO:create_model() successfully completed......................................
2024-09-19 15:55:44,436:INFO:SubProcess create_model() end ==================================
2024-09-19 15:55:44,436:INFO:Creating metrics dataframe
2024-09-19 15:55:44,452:INFO:Initializing Ada Boost Classifier
2024-09-19 15:55:44,452:INFO:Total runtime is 0.21874289909998576 minutes
2024-09-19 15:55:44,467:INFO:SubProcess create_model() called ==================================
2024-09-19 15:55:44,467:INFO:Initializing create_model()
2024-09-19 15:55:44,467:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D5C9B190>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:55:44,467:INFO:Checking exceptions
2024-09-19 15:55:44,467:INFO:Importing libraries
2024-09-19 15:55:44,467:INFO:Copying training dataset
2024-09-19 15:55:44,467:INFO:Defining folds
2024-09-19 15:55:44,467:INFO:Declaring metric variables
2024-09-19 15:55:44,485:INFO:Importing untrained model
2024-09-19 15:55:44,492:INFO:Ada Boost Classifier Imported successfully
2024-09-19 15:55:44,494:INFO:Starting cross validation
2024-09-19 15:55:44,494:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:55:44,826:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:55:44,836:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:55:44,841:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:55:44,850:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:55:44,852:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:55:44,855:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:55:44,861:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:55:44,880:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:55:45,604:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:45,617:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:45,628:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:45,632:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:45,636:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:45,637:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:45,643:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:45,647:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:45,647:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:45,653:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:45,657:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:45,658:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:45,659:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:45,669:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:45,669:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:45,677:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:45,681:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:45,681:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:45,688:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:45,689:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:45,691:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:45,695:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:45,699:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:45,928:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:55:45,955:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:55:46,654:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:46,664:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:46,674:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:46,685:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:46,693:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:46,697:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:46,727:INFO:Calculating mean and std
2024-09-19 15:55:46,729:INFO:Creating metrics dataframe
2024-09-19 15:55:46,730:INFO:Uploading results into container
2024-09-19 15:55:46,730:INFO:Uploading model into container now
2024-09-19 15:55:46,730:INFO:_master_model_container: 37
2024-09-19 15:55:46,730:INFO:_display_container: 4
2024-09-19 15:55:46,730:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-09-19 15:55:46,730:INFO:create_model() successfully completed......................................
2024-09-19 15:55:47,051:INFO:SubProcess create_model() end ==================================
2024-09-19 15:55:47,052:INFO:Creating metrics dataframe
2024-09-19 15:55:47,074:INFO:Initializing Gradient Boosting Classifier
2024-09-19 15:55:47,074:INFO:Total runtime is 0.26245208581288654 minutes
2024-09-19 15:55:47,078:INFO:SubProcess create_model() called ==================================
2024-09-19 15:55:47,078:INFO:Initializing create_model()
2024-09-19 15:55:47,078:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D5C9B190>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:55:47,078:INFO:Checking exceptions
2024-09-19 15:55:47,079:INFO:Importing libraries
2024-09-19 15:55:47,079:INFO:Copying training dataset
2024-09-19 15:55:47,090:INFO:Defining folds
2024-09-19 15:55:47,090:INFO:Declaring metric variables
2024-09-19 15:55:47,096:INFO:Importing untrained model
2024-09-19 15:55:47,101:INFO:Gradient Boosting Classifier Imported successfully
2024-09-19 15:55:47,110:INFO:Starting cross validation
2024-09-19 15:55:47,113:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:55:49,411:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:49,413:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:49,428:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:49,434:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:49,440:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:49,450:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:49,472:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:49,475:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:49,477:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:49,484:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:49,487:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:49,490:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:49,495:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:49,497:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:49,497:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:49,498:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:49,501:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:49,508:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:49,511:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:49,520:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:49,523:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:49,551:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:49,563:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:49,574:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:51,767:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:51,778:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:51,808:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:51,823:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:51,831:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:51,837:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:51,850:INFO:Calculating mean and std
2024-09-19 15:55:51,851:INFO:Creating metrics dataframe
2024-09-19 15:55:51,856:INFO:Uploading results into container
2024-09-19 15:55:51,857:INFO:Uploading model into container now
2024-09-19 15:55:51,858:INFO:_master_model_container: 38
2024-09-19 15:55:51,858:INFO:_display_container: 4
2024-09-19 15:55:51,859:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-09-19 15:55:51,859:INFO:create_model() successfully completed......................................
2024-09-19 15:55:52,146:INFO:SubProcess create_model() end ==================================
2024-09-19 15:55:52,146:INFO:Creating metrics dataframe
2024-09-19 15:55:52,182:INFO:Initializing Linear Discriminant Analysis
2024-09-19 15:55:52,182:INFO:Total runtime is 0.34758609533309937 minutes
2024-09-19 15:55:52,190:INFO:SubProcess create_model() called ==================================
2024-09-19 15:55:52,191:INFO:Initializing create_model()
2024-09-19 15:55:52,191:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D5C9B190>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:55:52,191:INFO:Checking exceptions
2024-09-19 15:55:52,192:INFO:Importing libraries
2024-09-19 15:55:52,192:INFO:Copying training dataset
2024-09-19 15:55:52,205:INFO:Defining folds
2024-09-19 15:55:52,206:INFO:Declaring metric variables
2024-09-19 15:55:52,213:INFO:Importing untrained model
2024-09-19 15:55:52,223:INFO:Linear Discriminant Analysis Imported successfully
2024-09-19 15:55:52,236:INFO:Starting cross validation
2024-09-19 15:55:52,239:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:55:52,719:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:52,730:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:52,731:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:52,731:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:52,732:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:52,734:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:52,736:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:52,737:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:52,741:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:52,742:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:52,742:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:52,742:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:52,745:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:52,746:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:52,746:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:52,747:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:52,751:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:52,752:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:52,753:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:52,756:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:52,757:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:52,757:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:52,757:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:52,767:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:53,119:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:53,139:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:53,164:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:53,166:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:53,180:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:53,188:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:53,205:INFO:Calculating mean and std
2024-09-19 15:55:53,206:INFO:Creating metrics dataframe
2024-09-19 15:55:53,210:INFO:Uploading results into container
2024-09-19 15:55:53,211:INFO:Uploading model into container now
2024-09-19 15:55:53,211:INFO:_master_model_container: 39
2024-09-19 15:55:53,211:INFO:_display_container: 4
2024-09-19 15:55:53,212:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-09-19 15:55:53,212:INFO:create_model() successfully completed......................................
2024-09-19 15:55:53,497:INFO:SubProcess create_model() end ==================================
2024-09-19 15:55:53,506:INFO:Creating metrics dataframe
2024-09-19 15:55:53,513:INFO:Initializing Extra Trees Classifier
2024-09-19 15:55:53,513:INFO:Total runtime is 0.3697673996289571 minutes
2024-09-19 15:55:53,513:INFO:SubProcess create_model() called ==================================
2024-09-19 15:55:53,513:INFO:Initializing create_model()
2024-09-19 15:55:53,513:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D5C9B190>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:55:53,513:INFO:Checking exceptions
2024-09-19 15:55:53,513:INFO:Importing libraries
2024-09-19 15:55:53,523:INFO:Copying training dataset
2024-09-19 15:55:53,529:INFO:Defining folds
2024-09-19 15:55:53,529:INFO:Declaring metric variables
2024-09-19 15:55:53,540:INFO:Importing untrained model
2024-09-19 15:55:53,544:INFO:Extra Trees Classifier Imported successfully
2024-09-19 15:55:53,546:INFO:Starting cross validation
2024-09-19 15:55:53,557:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:55:55,657:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:55,657:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:55,658:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:55,658:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:55,664:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:55,664:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:55,664:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:55,670:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:55,681:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:55,682:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:55,682:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:55,684:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:55,691:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:55,712:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:55,732:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:55,734:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:55,750:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:55,750:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:55,762:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:55,763:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:55,774:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:55,785:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:55,798:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:55,810:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:56,608:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:56,611:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:56,627:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:56,637:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:56,647:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:56,647:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:56,668:INFO:Calculating mean and std
2024-09-19 15:55:56,668:INFO:Creating metrics dataframe
2024-09-19 15:55:56,668:INFO:Uploading results into container
2024-09-19 15:55:56,668:INFO:Uploading model into container now
2024-09-19 15:55:56,668:INFO:_master_model_container: 40
2024-09-19 15:55:56,668:INFO:_display_container: 4
2024-09-19 15:55:56,668:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-09-19 15:55:56,668:INFO:create_model() successfully completed......................................
2024-09-19 15:55:56,983:INFO:SubProcess create_model() end ==================================
2024-09-19 15:55:56,983:INFO:Creating metrics dataframe
2024-09-19 15:55:57,004:INFO:Initializing Light Gradient Boosting Machine
2024-09-19 15:55:57,005:INFO:Total runtime is 0.4279517690340678 minutes
2024-09-19 15:55:57,008:INFO:SubProcess create_model() called ==================================
2024-09-19 15:55:57,009:INFO:Initializing create_model()
2024-09-19 15:55:57,009:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D5C9B190>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:55:57,009:INFO:Checking exceptions
2024-09-19 15:55:57,009:INFO:Importing libraries
2024-09-19 15:55:57,009:INFO:Copying training dataset
2024-09-19 15:55:57,017:INFO:Defining folds
2024-09-19 15:55:57,017:INFO:Declaring metric variables
2024-09-19 15:55:57,022:INFO:Importing untrained model
2024-09-19 15:55:57,026:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-19 15:55:57,033:INFO:Starting cross validation
2024-09-19 15:55:57,035:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:55:58,163:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:58,172:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:58,175:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:58,175:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:58,175:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:58,190:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:58,191:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:58,191:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:58,191:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:58,240:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:58,250:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:58,258:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:58,262:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:58,269:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:58,280:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:58,383:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:58,396:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:58,408:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:58,524:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:58,540:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:58,554:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:58,578:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:58,588:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:58,598:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:58,827:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:58,830:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:58,837:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:58,841:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:58,847:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:58,850:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:58,871:INFO:Calculating mean and std
2024-09-19 15:55:58,872:INFO:Creating metrics dataframe
2024-09-19 15:55:58,876:INFO:Uploading results into container
2024-09-19 15:55:58,876:INFO:Uploading model into container now
2024-09-19 15:55:58,877:INFO:_master_model_container: 41
2024-09-19 15:55:58,877:INFO:_display_container: 4
2024-09-19 15:55:58,878:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-19 15:55:58,878:INFO:create_model() successfully completed......................................
2024-09-19 15:55:59,212:INFO:SubProcess create_model() end ==================================
2024-09-19 15:55:59,213:INFO:Creating metrics dataframe
2024-09-19 15:55:59,245:INFO:Initializing Dummy Classifier
2024-09-19 15:55:59,246:INFO:Total runtime is 0.4653193434079488 minutes
2024-09-19 15:55:59,252:INFO:SubProcess create_model() called ==================================
2024-09-19 15:55:59,252:INFO:Initializing create_model()
2024-09-19 15:55:59,252:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253D5C9B190>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:55:59,252:INFO:Checking exceptions
2024-09-19 15:55:59,253:INFO:Importing libraries
2024-09-19 15:55:59,253:INFO:Copying training dataset
2024-09-19 15:55:59,264:INFO:Defining folds
2024-09-19 15:55:59,265:INFO:Declaring metric variables
2024-09-19 15:55:59,268:INFO:Importing untrained model
2024-09-19 15:55:59,273:INFO:Dummy Classifier Imported successfully
2024-09-19 15:55:59,284:INFO:Starting cross validation
2024-09-19 15:55:59,287:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:55:59,775:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:59,783:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:59,783:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:59,783:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:59,783:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:59,791:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:59,792:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:55:59,792:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:59,796:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:59,797:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:59,797:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:59,797:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:55:59,797:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:59,804:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:59,804:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:59,806:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:55:59,807:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:59,810:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:55:59,810:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:55:59,811:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:55:59,811:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:59,812:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:59,815:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:59,815:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:59,816:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:59,819:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:59,821:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:55:59,823:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:59,826:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:55:59,829:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:55:59,834:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:00,161:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:00,171:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:00,171:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:00,181:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:56:00,182:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:00,182:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:00,182:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:56:00,192:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:00,212:INFO:Calculating mean and std
2024-09-19 15:56:00,212:INFO:Creating metrics dataframe
2024-09-19 15:56:00,212:INFO:Uploading results into container
2024-09-19 15:56:00,212:INFO:Uploading model into container now
2024-09-19 15:56:00,212:INFO:_master_model_container: 42
2024-09-19 15:56:00,212:INFO:_display_container: 4
2024-09-19 15:56:00,212:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-09-19 15:56:00,212:INFO:create_model() successfully completed......................................
2024-09-19 15:56:00,574:INFO:SubProcess create_model() end ==================================
2024-09-19 15:56:00,574:INFO:Creating metrics dataframe
2024-09-19 15:56:00,619:INFO:Initializing create_model()
2024-09-19 15:56:00,619:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253D616BF50>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:56:00,620:INFO:Checking exceptions
2024-09-19 15:56:00,621:INFO:Importing libraries
2024-09-19 15:56:00,622:INFO:Copying training dataset
2024-09-19 15:56:00,623:INFO:Defining folds
2024-09-19 15:56:00,623:INFO:Declaring metric variables
2024-09-19 15:56:00,623:INFO:Importing untrained model
2024-09-19 15:56:00,623:INFO:Declaring custom model
2024-09-19 15:56:00,623:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-19 15:56:00,623:INFO:Cross validation set to False
2024-09-19 15:56:00,623:INFO:Fitting Model
2024-09-19 15:56:10,118:INFO:PyCaret ClassificationExperiment
2024-09-19 15:56:10,118:INFO:Logging name: clf-default-name
2024-09-19 15:56:10,118:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-19 15:56:10,118:INFO:version 3.3.2
2024-09-19 15:56:10,118:INFO:Initializing setup()
2024-09-19 15:56:10,118:INFO:self.USI: 9260
2024-09-19 15:56:10,118:INFO:self._variable_keys: {'n_jobs_param', 'data', 'X_train', 'seed', 'X', 'fold_groups_param', 'memory', 'fold_shuffle_param', 'gpu_param', 'X_test', 'idx', 'fix_imbalance', '_available_plots', 'y_train', 'y_test', '_ml_usecase', 'fold_generator', 'logging_param', 'log_plots_param', 'exp_name_log', 'is_multiclass', 'exp_id', 'target_param', 'gpu_n_jobs_param', 'y', 'USI', 'pipeline', 'html_param'}
2024-09-19 15:56:10,118:INFO:Checking environment
2024-09-19 15:56:10,118:INFO:python_version: 3.11.9
2024-09-19 15:56:10,118:INFO:python_build: ('main', 'Apr 19 2024 16:40:41')
2024-09-19 15:56:10,118:INFO:machine: AMD64
2024-09-19 15:56:10,118:INFO:platform: Windows-10-10.0.19045-SP0
2024-09-19 15:56:10,124:INFO:Memory: svmem(total=16969424896, available=4335984640, percent=74.4, used=12633440256, free=4335984640)
2024-09-19 15:56:10,124:INFO:Physical Core: 4
2024-09-19 15:56:10,124:INFO:Logical Core: 8
2024-09-19 15:56:10,124:INFO:Checking libraries
2024-09-19 15:56:10,124:INFO:System:
2024-09-19 15:56:10,124:INFO:    python: 3.11.9 | packaged by Anaconda, Inc. | (main, Apr 19 2024, 16:40:41) [MSC v.1916 64 bit (AMD64)]
2024-09-19 15:56:10,124:INFO:executable: C:\Users\juran\anaconda3\envs\myenv\python.exe
2024-09-19 15:56:10,124:INFO:   machine: Windows-10-10.0.19045-SP0
2024-09-19 15:56:10,124:INFO:PyCaret required dependencies:
2024-09-19 15:56:10,124:INFO:                 pip: 24.2
2024-09-19 15:56:10,124:INFO:          setuptools: 72.1.0
2024-09-19 15:56:10,124:INFO:             pycaret: 3.3.2
2024-09-19 15:56:10,124:INFO:             IPython: 8.26.0
2024-09-19 15:56:10,124:INFO:          ipywidgets: 8.1.5
2024-09-19 15:56:10,124:INFO:                tqdm: 4.66.5
2024-09-19 15:56:10,124:INFO:               numpy: 1.26.4
2024-09-19 15:56:10,124:INFO:              pandas: 1.5.3
2024-09-19 15:56:10,124:INFO:              jinja2: 3.1.4
2024-09-19 15:56:10,124:INFO:               scipy: 1.11.4
2024-09-19 15:56:10,124:INFO:              joblib: 1.3.2
2024-09-19 15:56:10,124:INFO:             sklearn: 1.4.2
2024-09-19 15:56:10,124:INFO:                pyod: 2.0.2
2024-09-19 15:56:10,124:INFO:            imblearn: 0.12.3
2024-09-19 15:56:10,124:INFO:   category_encoders: 2.6.3
2024-09-19 15:56:10,124:INFO:            lightgbm: 4.5.0
2024-09-19 15:56:10,124:INFO:               numba: 0.60.0
2024-09-19 15:56:10,124:INFO:            requests: 2.32.3
2024-09-19 15:56:10,124:INFO:          matplotlib: 3.7.5
2024-09-19 15:56:10,124:INFO:          scikitplot: 0.3.7
2024-09-19 15:56:10,124:INFO:         yellowbrick: 1.5
2024-09-19 15:56:10,124:INFO:              plotly: 5.24.1
2024-09-19 15:56:10,124:INFO:    plotly-resampler: Not installed
2024-09-19 15:56:10,124:INFO:             kaleido: 0.2.1
2024-09-19 15:56:10,124:INFO:           schemdraw: 0.15
2024-09-19 15:56:10,124:INFO:         statsmodels: 0.14.3
2024-09-19 15:56:10,124:INFO:              sktime: 0.26.0
2024-09-19 15:56:10,124:INFO:               tbats: 1.1.3
2024-09-19 15:56:10,124:INFO:            pmdarima: 2.0.4
2024-09-19 15:56:10,124:INFO:              psutil: 6.0.0
2024-09-19 15:56:10,124:INFO:          markupsafe: 2.1.5
2024-09-19 15:56:10,124:INFO:             pickle5: Not installed
2024-09-19 15:56:10,124:INFO:         cloudpickle: 3.0.0
2024-09-19 15:56:10,124:INFO:         deprecation: 2.1.0
2024-09-19 15:56:10,124:INFO:              xxhash: 3.5.0
2024-09-19 15:56:10,124:INFO:           wurlitzer: Not installed
2024-09-19 15:56:10,124:INFO:PyCaret optional dependencies:
2024-09-19 15:56:10,124:INFO:                shap: Not installed
2024-09-19 15:56:10,124:INFO:           interpret: Not installed
2024-09-19 15:56:10,124:INFO:                umap: Not installed
2024-09-19 15:56:10,124:INFO:     ydata_profiling: Not installed
2024-09-19 15:56:10,124:INFO:  explainerdashboard: Not installed
2024-09-19 15:56:10,124:INFO:             autoviz: Not installed
2024-09-19 15:56:10,124:INFO:           fairlearn: Not installed
2024-09-19 15:56:10,124:INFO:          deepchecks: Not installed
2024-09-19 15:56:10,124:INFO:             xgboost: Not installed
2024-09-19 15:56:10,124:INFO:            catboost: Not installed
2024-09-19 15:56:10,124:INFO:              kmodes: Not installed
2024-09-19 15:56:10,124:INFO:             mlxtend: Not installed
2024-09-19 15:56:10,124:INFO:       statsforecast: Not installed
2024-09-19 15:56:10,124:INFO:        tune_sklearn: Not installed
2024-09-19 15:56:10,124:INFO:                 ray: Not installed
2024-09-19 15:56:10,124:INFO:            hyperopt: Not installed
2024-09-19 15:56:10,124:INFO:              optuna: Not installed
2024-09-19 15:56:10,124:INFO:               skopt: Not installed
2024-09-19 15:56:10,124:INFO:              mlflow: Not installed
2024-09-19 15:56:10,124:INFO:              gradio: Not installed
2024-09-19 15:56:10,124:INFO:             fastapi: Not installed
2024-09-19 15:56:10,124:INFO:             uvicorn: Not installed
2024-09-19 15:56:10,124:INFO:              m2cgen: Not installed
2024-09-19 15:56:10,124:INFO:           evidently: Not installed
2024-09-19 15:56:10,124:INFO:               fugue: Not installed
2024-09-19 15:56:10,124:INFO:           streamlit: Not installed
2024-09-19 15:56:10,124:INFO:             prophet: Not installed
2024-09-19 15:56:10,124:INFO:None
2024-09-19 15:56:10,124:INFO:Set up data.
2024-09-19 15:56:10,156:INFO:Set up folding strategy.
2024-09-19 15:56:10,156:INFO:Set up train/test split.
2024-09-19 15:56:10,159:INFO:Set up index.
2024-09-19 15:56:10,159:INFO:Assigning column types.
2024-09-19 15:56:10,173:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-19 15:56:10,206:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-19 15:56:10,206:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 15:56:10,237:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:56:10,237:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:56:10,290:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-19 15:56:10,292:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 15:56:10,323:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:56:10,323:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:56:10,323:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-19 15:56:10,389:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 15:56:10,439:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:56:10,439:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:56:10,541:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 15:56:10,589:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:56:10,589:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:56:10,589:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-19 15:56:10,745:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:56:10,745:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:56:10,874:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:56:10,874:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:56:10,874:INFO:Preparing preprocessing pipeline...
2024-09-19 15:56:10,874:INFO:Set up label encoding.
2024-09-19 15:56:10,874:INFO:Set up simple imputation.
2024-09-19 15:56:10,874:INFO:Set up encoding of ordinal features.
2024-09-19 15:56:10,874:INFO:Set up encoding of categorical features.
2024-09-19 15:56:10,874:INFO:Set up feature normalization.
2024-09-19 15:56:11,257:INFO:Finished creating preprocessing pipeline.
2024-09-19 15:56:11,306:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\juran\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indica...
                                    transformer=OneHotEncoder(cols=['job',
                                                                    'marital',
                                                                    'education',
                                                                    'contact',
                                                                    'month',
                                                                    'poutcome'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-09-19 15:56:11,306:INFO:Creating final display dataframe.
2024-09-19 15:56:12,009:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target           deposit
2                   Target type            Binary
3                Target mapping     no: 0, yes: 1
4           Original data shape       (11162, 17)
5        Transformed data shape       (11162, 49)
6   Transformed train set shape        (8929, 49)
7    Transformed test set shape        (2233, 49)
8              Numeric features                 7
9          Categorical features                 9
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16                    Normalize              True
17             Normalize method            zscore
18               Fold Generator   StratifiedKFold
19                  Fold Number                10
20                     CPU Jobs                -1
21                      Use GPU             False
22               Log Experiment             False
23              Experiment Name  clf-default-name
24                          USI              9260
2024-09-19 15:56:12,170:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:56:12,170:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:56:12,264:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:56:12,264:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:56:12,264:INFO:setup() successfully completed in 2.15s...............
2024-09-19 15:56:12,440:INFO:Initializing get_config()
2024-09-19 15:56:12,441:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC09EE10>, variable=X_transformed)
2024-09-19 15:56:12,551:INFO:Variable: X returned as             age  job_management  job_housemaid  job_self-employed  \
6270   0.060709        1.840575      -0.159308          -0.194663   
10963 -0.191067       -0.543309       6.277158          -0.194663   
9909   0.144635       -0.543309      -0.159308           5.137078   
2143  -1.366022       -0.543309      -0.159308          -0.194663   
4869   2.662397       -0.543309      -0.159308          -0.194663   
...         ...             ...            ...                ...   
6546  -0.107141       -0.543309      -0.159308          -0.194663   
242    0.396411       -0.543309      -0.159308          -0.194663   
6928  -0.274992       -0.543309      -0.159308          -0.194663   
142   -0.274992       -0.543309      -0.159308          -0.194663   
4632  -0.610694       -0.543309      -0.159308          -0.194663   

       job_student  job_retired  job_admin.  job_blue-collar  job_services  \
6270     -0.180920    -0.275287   -0.369376        -0.456886     -0.299277   
10963    -0.180920    -0.275287   -0.369376        -0.456886     -0.299277   
9909     -0.180920    -0.275287   -0.369376        -0.456886     -0.299277   
2143      5.527317    -0.275287   -0.369376        -0.456886     -0.299277   
4869     -0.180920     3.632568   -0.369376        -0.456886     -0.299277   
...            ...          ...         ...              ...           ...   
6546     -0.180920    -0.275287   -0.369376        -0.456886      3.341384   
242      -0.180920    -0.275287    2.707266        -0.456886     -0.299277   
6928     -0.180920    -0.275287   -0.369376         2.188728     -0.299277   
142      -0.180920    -0.275287    2.707266        -0.456886     -0.299277   
4632     -0.180920    -0.275287   -0.369376        -0.456886     -0.299277   

       job_technician  job_unemployed  job_entrepreneur  job_unknown  \
6270        -0.446642       -0.182564         -0.173182    -0.078003   
10963       -0.446642       -0.182564         -0.173182    -0.078003   
9909        -0.446642       -0.182564         -0.173182    -0.078003   
2143        -0.446642       -0.182564         -0.173182    -0.078003   
4869        -0.446642       -0.182564         -0.173182    -0.078003   
...               ...             ...               ...          ...   
6546        -0.446642       -0.182564         -0.173182    -0.078003   
242         -0.446642       -0.182564         -0.173182    -0.078003   
6928        -0.446642       -0.182564         -0.173182    -0.078003   
142         -0.446642       -0.182564         -0.173182    -0.078003   
4632         2.238927       -0.182564         -0.173182    -0.078003   

       marital_married  marital_single  marital_divorced  education_tertiary  \
6270          0.867073       -0.677838         -0.359318            1.433800   
10963        -1.153306        1.475280         -0.359318           -0.697447   
9909          0.867073       -0.677838         -0.359318           -0.697447   
2143         -1.153306        1.475280         -0.359318           -0.697447   
4869          0.867073       -0.677838         -0.359318            1.433800   
...                ...             ...               ...                 ...   
6546          0.867073       -0.677838         -0.359318           -0.697447   
242          -1.153306        1.475280         -0.359318           -0.697447   
6928         -1.153306        1.475280         -0.359318           -0.697447   
142          -1.153306       -0.677838          2.783046           -0.697447   
4632          0.867073       -0.677838         -0.359318            1.433800   

       education_primary  education_secondary  education_unknown   default  \
6270           -0.393650            -0.986539          -0.217975 -0.122495   
10963           2.540326            -0.986539          -0.217975 -0.122495   
9909           -0.393650             1.013644          -0.217975 -0.122495   
2143           -0.393650             1.013644          -0.217975 -0.122495   
4869           -0.393650            -0.986539          -0.217975 -0.122495   
...                  ...                  ...                ...       ...   
6546           -0.393650             1.013644          -0.217975 -0.122495   
242            -0.393650             1.013644          -0.217975 -0.122495   
6928            2.540326            -0.986539          -0.217975 -0.122495   
142            -0.393650             1.013644          -0.217975 -0.122495   
4632           -0.393650            -0.986539          -0.217975 -0.122495   

        balance   housing      loan  contact_cellular  contact_unknown  \
6270  -0.694444 -0.946017 -0.389847          0.623242        -0.516260   
10963 -0.446629  1.057063 -0.389847         -1.604512         1.937007   
9909  -0.189600  1.057063 -0.389847         -1.604512         1.937007   
2143  -0.384675 -0.946017 -0.389847          0.623242        -0.516260   
4869  -0.338924 -0.946017 -0.389847          0.623242        -0.516260   
...         ...       ...       ...               ...              ...   
6546  -0.481259  1.057063  2.565111          0.623242        -0.516260   
242   -0.211522  1.057063 -0.389847         -1.604512         1.937007   
6928  -0.481259  1.057063 -0.389847          0.623242        -0.516260   
142   -0.418352  1.057063 -0.389847         -1.604512         1.937007   
4632   0.007699  1.057063 -0.389847          0.623242        -0.516260   

       contact_telephone       day  month_aug  month_may  month_mar  \
6270           -0.272926  1.468727   2.512540  -0.581101  -0.158196   
10963          -0.272926 -1.140605  -0.398004   1.720872  -0.158196   
9909           -0.272926 -1.140605  -0.398004   1.720872  -0.158196   
2143           -0.272926  1.231515  -0.398004   1.720872  -0.158196   
4869           -0.272926  0.994303  -0.398004  -0.581101   6.321291   
...                  ...       ...        ...        ...        ...   
6546           -0.272926 -1.615029  -0.398004  -0.581101  -0.158196   
242            -0.272926 -1.259211  -0.398004  -0.581101  -0.158196   
6928           -0.272926 -1.021999  -0.398004   1.720872  -0.158196   
142            -0.272926  1.231515  -0.398004   1.720872  -0.158196   
4632           -0.272926 -0.073151  -0.398004  -0.581101  -0.158196   

       month_apr  month_feb  month_jul  month_jan  month_jun  month_nov  \
6270   -0.296604  -0.270550   -0.39857  -0.179927  -0.352126  -0.303258   
10963  -0.296604  -0.270550   -0.39857  -0.179927  -0.352126  -0.303258   
9909   -0.296604  -0.270550   -0.39857  -0.179927  -0.352126  -0.303258   
2143   -0.296604  -0.270550   -0.39857  -0.179927  -0.352126  -0.303258   
4869   -0.296604  -0.270550   -0.39857  -0.179927  -0.352126  -0.303258   
...          ...        ...        ...        ...        ...        ...   
6546   -0.296604   3.696179   -0.39857  -0.179927  -0.352126  -0.303258   
242    -0.296604  -0.270550   -0.39857  -0.179927   2.839890  -0.303258   
6928   -0.296604  -0.270550   -0.39857  -0.179927  -0.352126  -0.303258   
142    -0.296604  -0.270550   -0.39857  -0.179927  -0.352126  -0.303258   
4632   -0.296604  -0.270550   -0.39857  -0.179927   2.839890  -0.303258   

       month_oct  month_sep  month_dec  duration  campaign     pdays  \
6270   -0.191857  -0.172838  -0.099768 -0.836667 -0.185630 -0.479208   
10963  -0.191857  -0.172838  -0.099768  0.930087  0.188437 -0.479208   
9909   -0.191857  -0.172838  -0.099768 -0.514142 -0.559698 -0.479208   
2143   -0.191857  -0.172838  -0.099768 -0.419953 -0.185630 -0.479208   
4869   -0.191857  -0.172838  -0.099768 -0.676832 -0.559698 -0.479208   
...          ...        ...        ...       ...       ...       ...   
6546   -0.191857  -0.172838  -0.099768 -0.419953 -0.185630 -0.479208   
242    -0.191857  -0.172838  -0.099768  0.384933 -0.185630 -0.479208   
6928   -0.191857  -0.172838  -0.099768 -0.066031 -0.185630 -0.479208   
142    -0.191857  -0.172838  -0.099768  0.165159 -0.185630 -0.479208   
4632   -0.191857  -0.172838  -0.099768  0.193702 -0.559698  0.048527   

       previous  poutcome_unknown  poutcome_failure  poutcome_success  \
6270  -0.360408          0.580756         -0.355133         -0.322038   
10963 -0.360408          0.580756         -0.355133         -0.322038   
9909  -0.360408          0.580756         -0.355133         -0.322038   
2143  -0.360408          0.580756         -0.355133         -0.322038   
4869  -0.360408          0.580756         -0.355133         -0.322038   
...         ...               ...               ...               ...   
6546  -0.360408          0.580756         -0.355133         -0.322038   
242   -0.360408          0.580756         -0.355133         -0.322038   
6928  -0.360408          0.580756         -0.355133         -0.322038   
142   -0.360408          0.580756         -0.355133         -0.322038   
4632   0.081272         -1.721894         -0.355133         -0.322038   

       poutcome_other  
6270        -0.220220  
10963       -0.220220  
9909        -0.220220  
2143        -0.220220  
4869        -0.220220  
...               ...  
6546        -0.220220  
242         -0.220220  
6928        -0.220220  
142         -0.220220  
4632         4.540909  

[11162 rows x 48 columns]
2024-09-19 15:56:12,552:INFO:get_config() successfully completed......................................
2024-09-19 15:56:12,609:INFO:Initializing compare_models()
2024-09-19 15:56:12,609:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC09EE10>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Recall, n_select=3, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC09EE10>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Recall', 'n_select': 3, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2024-09-19 15:56:12,609:INFO:Checking exceptions
2024-09-19 15:56:12,623:INFO:Preparing display monitor
2024-09-19 15:56:12,646:INFO:Initializing Logistic Regression
2024-09-19 15:56:12,646:INFO:Total runtime is 0.0 minutes
2024-09-19 15:56:12,655:INFO:SubProcess create_model() called ==================================
2024-09-19 15:56:12,655:INFO:Initializing create_model()
2024-09-19 15:56:12,655:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC09EE10>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253DC12AD10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:56:12,655:INFO:Checking exceptions
2024-09-19 15:56:12,655:INFO:Importing libraries
2024-09-19 15:56:12,656:INFO:Copying training dataset
2024-09-19 15:56:12,661:INFO:Defining folds
2024-09-19 15:56:12,661:INFO:Declaring metric variables
2024-09-19 15:56:12,661:INFO:Importing untrained model
2024-09-19 15:56:12,661:INFO:Logistic Regression Imported successfully
2024-09-19 15:56:12,675:INFO:Starting cross validation
2024-09-19 15:56:12,675:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:56:13,121:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:13,131:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:13,131:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:13,141:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:13,141:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:13,141:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:13,141:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:13,151:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:13,151:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:13,151:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:13,151:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:13,151:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:13,151:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:13,162:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:13,162:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:13,162:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:13,162:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:13,171:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:13,171:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:13,171:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:13,176:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:13,183:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:13,187:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:13,193:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:13,551:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:13,560:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:13,568:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:13,572:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:13,580:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:13,580:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:13,600:INFO:Calculating mean and std
2024-09-19 15:56:13,600:INFO:Creating metrics dataframe
2024-09-19 15:56:13,606:INFO:Uploading results into container
2024-09-19 15:56:13,607:INFO:Uploading model into container now
2024-09-19 15:56:13,607:INFO:_master_model_container: 1
2024-09-19 15:56:13,607:INFO:_display_container: 2
2024-09-19 15:56:13,608:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-19 15:56:13,608:INFO:create_model() successfully completed......................................
2024-09-19 15:56:13,949:INFO:SubProcess create_model() end ==================================
2024-09-19 15:56:13,949:INFO:Creating metrics dataframe
2024-09-19 15:56:13,965:INFO:Initializing K Neighbors Classifier
2024-09-19 15:56:13,965:INFO:Total runtime is 0.021987879276275636 minutes
2024-09-19 15:56:13,979:INFO:SubProcess create_model() called ==================================
2024-09-19 15:56:13,980:INFO:Initializing create_model()
2024-09-19 15:56:13,980:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC09EE10>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253DC12AD10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:56:13,980:INFO:Checking exceptions
2024-09-19 15:56:13,980:INFO:Importing libraries
2024-09-19 15:56:13,981:INFO:Copying training dataset
2024-09-19 15:56:13,991:INFO:Defining folds
2024-09-19 15:56:13,991:INFO:Declaring metric variables
2024-09-19 15:56:14,001:INFO:Importing untrained model
2024-09-19 15:56:14,007:INFO:K Neighbors Classifier Imported successfully
2024-09-19 15:56:14,008:INFO:Starting cross validation
2024-09-19 15:56:14,008:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:56:14,597:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:14,609:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:14,610:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:14,616:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:14,620:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:14,620:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:14,623:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:14,627:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:14,628:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:14,629:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:14,631:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:14,631:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:14,633:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:14,639:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:14,640:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:14,640:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:14,640:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:14,642:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:14,645:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:14,649:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:14,650:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:14,650:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:14,660:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:15,203:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:15,214:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:15,225:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:15,229:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:15,244:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:15,246:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:15,266:INFO:Calculating mean and std
2024-09-19 15:56:15,266:INFO:Creating metrics dataframe
2024-09-19 15:56:15,272:INFO:Uploading results into container
2024-09-19 15:56:15,273:INFO:Uploading model into container now
2024-09-19 15:56:15,274:INFO:_master_model_container: 2
2024-09-19 15:56:15,274:INFO:_display_container: 2
2024-09-19 15:56:15,274:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-09-19 15:56:15,275:INFO:create_model() successfully completed......................................
2024-09-19 15:56:15,612:INFO:SubProcess create_model() end ==================================
2024-09-19 15:56:15,612:INFO:Creating metrics dataframe
2024-09-19 15:56:15,626:INFO:Initializing Naive Bayes
2024-09-19 15:56:15,627:INFO:Total runtime is 0.049680924415588384 minutes
2024-09-19 15:56:15,628:INFO:SubProcess create_model() called ==================================
2024-09-19 15:56:15,628:INFO:Initializing create_model()
2024-09-19 15:56:15,628:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC09EE10>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253DC12AD10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:56:15,628:INFO:Checking exceptions
2024-09-19 15:56:15,628:INFO:Importing libraries
2024-09-19 15:56:15,628:INFO:Copying training dataset
2024-09-19 15:56:15,644:INFO:Defining folds
2024-09-19 15:56:15,644:INFO:Declaring metric variables
2024-09-19 15:56:15,645:INFO:Importing untrained model
2024-09-19 15:56:15,645:INFO:Naive Bayes Imported successfully
2024-09-19 15:56:15,661:INFO:Starting cross validation
2024-09-19 15:56:15,661:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:56:16,110:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:16,115:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:16,116:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:16,116:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:16,121:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:16,125:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:16,126:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:16,126:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:16,126:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:16,127:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:16,130:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:16,131:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:16,134:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:16,136:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:16,137:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:16,137:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:16,138:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:16,138:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:16,139:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:16,139:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:16,139:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:16,147:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:16,151:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:16,151:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:16,435:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:16,445:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:16,465:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:16,465:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:16,475:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:16,485:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:16,506:INFO:Calculating mean and std
2024-09-19 15:56:16,506:INFO:Creating metrics dataframe
2024-09-19 15:56:16,506:INFO:Uploading results into container
2024-09-19 15:56:16,506:INFO:Uploading model into container now
2024-09-19 15:56:16,506:INFO:_master_model_container: 3
2024-09-19 15:56:16,506:INFO:_display_container: 2
2024-09-19 15:56:16,506:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-09-19 15:56:16,506:INFO:create_model() successfully completed......................................
2024-09-19 15:56:16,806:INFO:SubProcess create_model() end ==================================
2024-09-19 15:56:16,806:INFO:Creating metrics dataframe
2024-09-19 15:56:16,822:INFO:Initializing Decision Tree Classifier
2024-09-19 15:56:16,822:INFO:Total runtime is 0.06959926684697469 minutes
2024-09-19 15:56:16,832:INFO:SubProcess create_model() called ==================================
2024-09-19 15:56:16,832:INFO:Initializing create_model()
2024-09-19 15:56:16,832:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC09EE10>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253DC12AD10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:56:16,832:INFO:Checking exceptions
2024-09-19 15:56:16,832:INFO:Importing libraries
2024-09-19 15:56:16,832:INFO:Copying training dataset
2024-09-19 15:56:16,838:INFO:Defining folds
2024-09-19 15:56:16,838:INFO:Declaring metric variables
2024-09-19 15:56:16,855:INFO:Importing untrained model
2024-09-19 15:56:16,860:INFO:Decision Tree Classifier Imported successfully
2024-09-19 15:56:16,874:INFO:Starting cross validation
2024-09-19 15:56:16,879:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:56:17,421:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:17,421:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:17,421:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:17,431:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:17,431:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:17,431:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:17,431:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:17,431:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:17,441:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:17,441:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:17,441:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:17,441:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:17,441:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:17,441:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:17,451:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:17,451:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:17,451:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:17,451:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:17,451:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:17,451:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:17,461:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:17,461:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:17,472:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:17,814:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:17,824:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:17,835:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:17,861:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:17,865:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:17,877:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:17,896:INFO:Calculating mean and std
2024-09-19 15:56:17,896:INFO:Creating metrics dataframe
2024-09-19 15:56:17,896:INFO:Uploading results into container
2024-09-19 15:56:17,896:INFO:Uploading model into container now
2024-09-19 15:56:17,896:INFO:_master_model_container: 4
2024-09-19 15:56:17,896:INFO:_display_container: 2
2024-09-19 15:56:17,896:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-09-19 15:56:17,896:INFO:create_model() successfully completed......................................
2024-09-19 15:56:18,258:INFO:SubProcess create_model() end ==================================
2024-09-19 15:56:18,258:INFO:Creating metrics dataframe
2024-09-19 15:56:18,269:INFO:Initializing SVM - Linear Kernel
2024-09-19 15:56:18,270:INFO:Total runtime is 0.09372554620107015 minutes
2024-09-19 15:56:18,274:INFO:SubProcess create_model() called ==================================
2024-09-19 15:56:18,275:INFO:Initializing create_model()
2024-09-19 15:56:18,275:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC09EE10>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253DC12AD10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:56:18,275:INFO:Checking exceptions
2024-09-19 15:56:18,275:INFO:Importing libraries
2024-09-19 15:56:18,275:INFO:Copying training dataset
2024-09-19 15:56:18,284:INFO:Defining folds
2024-09-19 15:56:18,285:INFO:Declaring metric variables
2024-09-19 15:56:18,289:INFO:Importing untrained model
2024-09-19 15:56:18,292:INFO:SVM - Linear Kernel Imported successfully
2024-09-19 15:56:18,292:INFO:Starting cross validation
2024-09-19 15:56:18,292:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:56:18,891:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:18,901:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:18,906:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:18,908:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:18,908:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:18,908:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:18,908:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:18,908:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:18,908:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:18,922:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:18,923:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:18,928:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:18,929:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:18,930:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:18,934:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:18,936:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:18,940:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:18,944:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:18,945:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:18,955:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:18,964:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:18,966:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:18,974:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:18,982:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:19,417:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:19,427:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:19,437:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:19,437:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:19,448:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:19,448:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:19,468:INFO:Calculating mean and std
2024-09-19 15:56:19,468:INFO:Creating metrics dataframe
2024-09-19 15:56:19,468:INFO:Uploading results into container
2024-09-19 15:56:19,468:INFO:Uploading model into container now
2024-09-19 15:56:19,468:INFO:_master_model_container: 5
2024-09-19 15:56:19,468:INFO:_display_container: 2
2024-09-19 15:56:19,468:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-09-19 15:56:19,468:INFO:create_model() successfully completed......................................
2024-09-19 15:56:19,779:INFO:SubProcess create_model() end ==================================
2024-09-19 15:56:19,779:INFO:Creating metrics dataframe
2024-09-19 15:56:19,794:INFO:Initializing Ridge Classifier
2024-09-19 15:56:19,794:INFO:Total runtime is 0.11914037068684896 minutes
2024-09-19 15:56:19,794:INFO:SubProcess create_model() called ==================================
2024-09-19 15:56:19,794:INFO:Initializing create_model()
2024-09-19 15:56:19,794:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC09EE10>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253DC12AD10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:56:19,794:INFO:Checking exceptions
2024-09-19 15:56:19,802:INFO:Importing libraries
2024-09-19 15:56:19,802:INFO:Copying training dataset
2024-09-19 15:56:19,808:INFO:Defining folds
2024-09-19 15:56:19,808:INFO:Declaring metric variables
2024-09-19 15:56:19,808:INFO:Importing untrained model
2024-09-19 15:56:19,808:INFO:Ridge Classifier Imported successfully
2024-09-19 15:56:19,822:INFO:Starting cross validation
2024-09-19 15:56:19,822:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:56:20,314:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:20,314:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:20,314:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:20,324:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:20,327:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:20,328:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:20,329:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:20,336:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:20,336:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:20,338:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:20,339:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:20,339:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:20,340:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:20,340:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:20,343:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:20,347:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:20,348:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:20,348:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:20,348:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:20,348:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:20,357:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:20,365:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:20,365:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:20,365:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:20,627:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:20,637:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:20,647:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:20,668:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:20,668:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:20,678:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:20,699:INFO:Calculating mean and std
2024-09-19 15:56:20,699:INFO:Creating metrics dataframe
2024-09-19 15:56:20,702:INFO:Uploading results into container
2024-09-19 15:56:20,702:INFO:Uploading model into container now
2024-09-19 15:56:20,702:INFO:_master_model_container: 6
2024-09-19 15:56:20,702:INFO:_display_container: 2
2024-09-19 15:56:20,703:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-09-19 15:56:20,704:INFO:create_model() successfully completed......................................
2024-09-19 15:56:21,048:INFO:SubProcess create_model() end ==================================
2024-09-19 15:56:21,048:INFO:Creating metrics dataframe
2024-09-19 15:56:21,064:INFO:Initializing Random Forest Classifier
2024-09-19 15:56:21,064:INFO:Total runtime is 0.1403048555056254 minutes
2024-09-19 15:56:21,082:INFO:SubProcess create_model() called ==================================
2024-09-19 15:56:21,083:INFO:Initializing create_model()
2024-09-19 15:56:21,083:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC09EE10>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253DC12AD10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:56:21,083:INFO:Checking exceptions
2024-09-19 15:56:21,083:INFO:Importing libraries
2024-09-19 15:56:21,083:INFO:Copying training dataset
2024-09-19 15:56:21,089:INFO:Defining folds
2024-09-19 15:56:21,089:INFO:Declaring metric variables
2024-09-19 15:56:21,089:INFO:Importing untrained model
2024-09-19 15:56:21,089:INFO:Random Forest Classifier Imported successfully
2024-09-19 15:56:21,108:INFO:Starting cross validation
2024-09-19 15:56:21,109:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:56:23,067:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:23,067:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:23,068:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:23,079:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:23,080:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:23,080:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:23,091:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:23,093:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:23,094:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:23,104:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:23,133:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:23,168:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:23,168:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:23,173:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:23,177:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:23,184:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:23,188:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:23,189:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:23,191:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:23,191:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:23,196:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:23,212:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:24,045:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:24,045:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:24,065:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:24,065:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:24,085:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:24,116:INFO:Calculating mean and std
2024-09-19 15:56:24,116:INFO:Creating metrics dataframe
2024-09-19 15:56:24,116:INFO:Uploading results into container
2024-09-19 15:56:24,116:INFO:Uploading model into container now
2024-09-19 15:56:24,116:INFO:_master_model_container: 7
2024-09-19 15:56:24,116:INFO:_display_container: 2
2024-09-19 15:56:24,116:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-09-19 15:56:24,116:INFO:create_model() successfully completed......................................
2024-09-19 15:56:24,491:INFO:SubProcess create_model() end ==================================
2024-09-19 15:56:24,491:INFO:Creating metrics dataframe
2024-09-19 15:56:24,524:INFO:Initializing Quadratic Discriminant Analysis
2024-09-19 15:56:24,524:INFO:Total runtime is 0.1979664166768392 minutes
2024-09-19 15:56:24,531:INFO:SubProcess create_model() called ==================================
2024-09-19 15:56:24,531:INFO:Initializing create_model()
2024-09-19 15:56:24,532:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC09EE10>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253DC12AD10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:56:24,532:INFO:Checking exceptions
2024-09-19 15:56:24,532:INFO:Importing libraries
2024-09-19 15:56:24,532:INFO:Copying training dataset
2024-09-19 15:56:24,541:INFO:Defining folds
2024-09-19 15:56:24,541:INFO:Declaring metric variables
2024-09-19 15:56:24,541:INFO:Importing untrained model
2024-09-19 15:56:24,541:INFO:Quadratic Discriminant Analysis Imported successfully
2024-09-19 15:56:24,557:INFO:Starting cross validation
2024-09-19 15:56:24,557:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:56:24,890:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:56:24,910:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:56:24,910:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:56:24,920:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:56:24,920:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:56:24,920:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:56:24,920:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:56:25,003:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:25,014:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:25,015:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:25,015:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:25,015:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:25,023:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:25,023:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:25,023:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:25,023:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:25,023:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:25,031:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:25,032:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:25,033:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:25,036:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:25,038:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:25,039:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:25,041:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:25,041:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:25,043:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:25,045:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:25,047:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:25,048:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:25,050:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:25,321:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:56:25,350:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:56:25,410:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:25,426:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:25,437:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:25,440:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:25,451:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:25,458:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:25,474:INFO:Calculating mean and std
2024-09-19 15:56:25,475:INFO:Creating metrics dataframe
2024-09-19 15:56:25,478:INFO:Uploading results into container
2024-09-19 15:56:25,478:INFO:Uploading model into container now
2024-09-19 15:56:25,479:INFO:_master_model_container: 8
2024-09-19 15:56:25,479:INFO:_display_container: 2
2024-09-19 15:56:25,479:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-09-19 15:56:25,479:INFO:create_model() successfully completed......................................
2024-09-19 15:56:25,828:INFO:SubProcess create_model() end ==================================
2024-09-19 15:56:25,828:INFO:Creating metrics dataframe
2024-09-19 15:56:25,847:INFO:Initializing Ada Boost Classifier
2024-09-19 15:56:25,847:INFO:Total runtime is 0.22001989285151163 minutes
2024-09-19 15:56:25,851:INFO:SubProcess create_model() called ==================================
2024-09-19 15:56:25,851:INFO:Initializing create_model()
2024-09-19 15:56:25,851:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC09EE10>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253DC12AD10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:56:25,851:INFO:Checking exceptions
2024-09-19 15:56:25,851:INFO:Importing libraries
2024-09-19 15:56:25,852:INFO:Copying training dataset
2024-09-19 15:56:25,859:INFO:Defining folds
2024-09-19 15:56:25,859:INFO:Declaring metric variables
2024-09-19 15:56:25,875:INFO:Importing untrained model
2024-09-19 15:56:25,876:INFO:Ada Boost Classifier Imported successfully
2024-09-19 15:56:25,888:INFO:Starting cross validation
2024-09-19 15:56:25,890:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:56:26,212:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:56:26,224:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:56:26,232:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:56:26,234:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:56:26,238:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:56:26,239:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:56:26,244:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:56:26,249:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:56:27,007:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:27,007:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:27,007:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:27,017:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:27,017:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:27,017:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:27,017:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:27,027:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:27,028:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:27,028:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:27,028:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:27,028:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:27,028:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:27,037:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:27,037:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:27,037:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:27,037:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:27,048:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:27,048:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:27,060:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:27,062:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:27,063:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:27,074:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:27,078:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:27,350:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:56:27,356:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:56:28,091:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:28,091:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:28,097:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:28,097:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:28,104:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:28,105:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:28,138:INFO:Calculating mean and std
2024-09-19 15:56:28,139:INFO:Creating metrics dataframe
2024-09-19 15:56:28,141:INFO:Uploading results into container
2024-09-19 15:56:28,141:INFO:Uploading model into container now
2024-09-19 15:56:28,141:INFO:_master_model_container: 9
2024-09-19 15:56:28,141:INFO:_display_container: 2
2024-09-19 15:56:28,141:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-09-19 15:56:28,141:INFO:create_model() successfully completed......................................
2024-09-19 15:56:28,487:INFO:SubProcess create_model() end ==================================
2024-09-19 15:56:28,487:INFO:Creating metrics dataframe
2024-09-19 15:56:28,516:INFO:Initializing Gradient Boosting Classifier
2024-09-19 15:56:28,516:INFO:Total runtime is 0.2645081917444865 minutes
2024-09-19 15:56:28,522:INFO:SubProcess create_model() called ==================================
2024-09-19 15:56:28,522:INFO:Initializing create_model()
2024-09-19 15:56:28,522:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC09EE10>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253DC12AD10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:56:28,522:INFO:Checking exceptions
2024-09-19 15:56:28,522:INFO:Importing libraries
2024-09-19 15:56:28,523:INFO:Copying training dataset
2024-09-19 15:56:28,532:INFO:Defining folds
2024-09-19 15:56:28,533:INFO:Declaring metric variables
2024-09-19 15:56:28,541:INFO:Importing untrained model
2024-09-19 15:56:28,543:INFO:Gradient Boosting Classifier Imported successfully
2024-09-19 15:56:28,543:INFO:Starting cross validation
2024-09-19 15:56:28,556:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:56:30,826:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:30,826:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:30,826:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:30,837:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:30,838:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:30,838:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:30,838:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:30,838:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:30,838:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:30,847:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:30,847:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:30,847:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:30,847:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:30,847:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:30,847:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:30,847:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:30,847:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:30,857:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:30,857:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:30,857:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:30,857:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:30,857:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:30,863:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:30,869:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:33,023:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:33,053:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:33,074:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:33,074:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:33,094:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:33,104:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:33,125:INFO:Calculating mean and std
2024-09-19 15:56:33,126:INFO:Creating metrics dataframe
2024-09-19 15:56:33,132:INFO:Uploading results into container
2024-09-19 15:56:33,133:INFO:Uploading model into container now
2024-09-19 15:56:33,134:INFO:_master_model_container: 10
2024-09-19 15:56:33,134:INFO:_display_container: 2
2024-09-19 15:56:33,135:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-09-19 15:56:33,135:INFO:create_model() successfully completed......................................
2024-09-19 15:56:33,437:INFO:SubProcess create_model() end ==================================
2024-09-19 15:56:33,437:INFO:Creating metrics dataframe
2024-09-19 15:56:33,453:INFO:Initializing Linear Discriminant Analysis
2024-09-19 15:56:33,453:INFO:Total runtime is 0.3467909773190816 minutes
2024-09-19 15:56:33,461:INFO:SubProcess create_model() called ==================================
2024-09-19 15:56:33,461:INFO:Initializing create_model()
2024-09-19 15:56:33,461:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC09EE10>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253DC12AD10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:56:33,461:INFO:Checking exceptions
2024-09-19 15:56:33,461:INFO:Importing libraries
2024-09-19 15:56:33,461:INFO:Copying training dataset
2024-09-19 15:56:33,470:INFO:Defining folds
2024-09-19 15:56:33,470:INFO:Declaring metric variables
2024-09-19 15:56:33,474:INFO:Importing untrained model
2024-09-19 15:56:33,477:INFO:Linear Discriminant Analysis Imported successfully
2024-09-19 15:56:33,488:INFO:Starting cross validation
2024-09-19 15:56:33,490:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:56:33,949:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:33,949:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:33,959:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:33,959:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:33,959:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:33,959:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:33,959:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:33,959:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:33,959:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:33,975:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:33,975:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:33,975:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:33,975:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:33,975:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:33,975:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:33,975:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:33,975:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:33,985:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:33,985:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:33,985:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:33,985:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:33,985:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:33,995:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:34,006:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:34,359:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:34,359:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:34,359:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:34,373:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:34,373:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:34,380:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:34,401:INFO:Calculating mean and std
2024-09-19 15:56:34,402:INFO:Creating metrics dataframe
2024-09-19 15:56:34,406:INFO:Uploading results into container
2024-09-19 15:56:34,406:INFO:Uploading model into container now
2024-09-19 15:56:34,406:INFO:_master_model_container: 11
2024-09-19 15:56:34,406:INFO:_display_container: 2
2024-09-19 15:56:34,406:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-09-19 15:56:34,406:INFO:create_model() successfully completed......................................
2024-09-19 15:56:34,781:INFO:SubProcess create_model() end ==================================
2024-09-19 15:56:34,781:INFO:Creating metrics dataframe
2024-09-19 15:56:34,799:INFO:Initializing Extra Trees Classifier
2024-09-19 15:56:34,800:INFO:Total runtime is 0.3692340572675069 minutes
2024-09-19 15:56:34,807:INFO:SubProcess create_model() called ==================================
2024-09-19 15:56:34,808:INFO:Initializing create_model()
2024-09-19 15:56:34,808:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC09EE10>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253DC12AD10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:56:34,808:INFO:Checking exceptions
2024-09-19 15:56:34,808:INFO:Importing libraries
2024-09-19 15:56:34,808:INFO:Copying training dataset
2024-09-19 15:56:34,811:INFO:Defining folds
2024-09-19 15:56:34,811:INFO:Declaring metric variables
2024-09-19 15:56:34,811:INFO:Importing untrained model
2024-09-19 15:56:34,823:INFO:Extra Trees Classifier Imported successfully
2024-09-19 15:56:34,823:INFO:Starting cross validation
2024-09-19 15:56:34,823:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:56:36,860:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:36,860:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:36,868:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:36,868:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:36,868:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:36,878:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:36,894:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:36,896:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:36,896:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:36,947:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:36,957:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:36,968:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:36,968:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:36,975:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:36,987:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:36,988:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:36,989:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:36,989:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:36,989:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:36,989:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:37,000:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:37,001:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:37,001:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:37,010:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:37,784:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:37,806:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:37,825:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:37,825:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:37,845:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:37,855:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:37,886:INFO:Calculating mean and std
2024-09-19 15:56:37,886:INFO:Creating metrics dataframe
2024-09-19 15:56:37,886:INFO:Uploading results into container
2024-09-19 15:56:37,886:INFO:Uploading model into container now
2024-09-19 15:56:37,886:INFO:_master_model_container: 12
2024-09-19 15:56:37,886:INFO:_display_container: 2
2024-09-19 15:56:37,886:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-09-19 15:56:37,886:INFO:create_model() successfully completed......................................
2024-09-19 15:56:38,255:INFO:SubProcess create_model() end ==================================
2024-09-19 15:56:38,255:INFO:Creating metrics dataframe
2024-09-19 15:56:38,255:INFO:Initializing Light Gradient Boosting Machine
2024-09-19 15:56:38,255:INFO:Total runtime is 0.42682137886683147 minutes
2024-09-19 15:56:38,271:INFO:SubProcess create_model() called ==================================
2024-09-19 15:56:38,275:INFO:Initializing create_model()
2024-09-19 15:56:38,275:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC09EE10>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253DC12AD10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:56:38,275:INFO:Checking exceptions
2024-09-19 15:56:38,275:INFO:Importing libraries
2024-09-19 15:56:38,275:INFO:Copying training dataset
2024-09-19 15:56:38,287:INFO:Defining folds
2024-09-19 15:56:38,287:INFO:Declaring metric variables
2024-09-19 15:56:38,291:INFO:Importing untrained model
2024-09-19 15:56:38,291:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-19 15:56:38,303:INFO:Starting cross validation
2024-09-19 15:56:38,305:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:56:39,506:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:39,512:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:39,520:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:39,520:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:39,523:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:39,523:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:39,523:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:39,539:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:39,539:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:39,552:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:39,564:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:39,788:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:39,790:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:39,790:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:39,806:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:39,812:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:39,812:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:39,945:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:39,945:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:39,957:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:39,962:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:39,968:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:39,973:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:40,201:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:40,211:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:40,211:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:40,221:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:40,221:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:40,231:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:40,252:INFO:Calculating mean and std
2024-09-19 15:56:40,252:INFO:Creating metrics dataframe
2024-09-19 15:56:40,252:INFO:Uploading results into container
2024-09-19 15:56:40,252:INFO:Uploading model into container now
2024-09-19 15:56:40,258:INFO:_master_model_container: 13
2024-09-19 15:56:40,258:INFO:_display_container: 2
2024-09-19 15:56:40,258:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-19 15:56:40,259:INFO:create_model() successfully completed......................................
2024-09-19 15:56:40,620:INFO:SubProcess create_model() end ==================================
2024-09-19 15:56:40,620:INFO:Creating metrics dataframe
2024-09-19 15:56:40,671:INFO:Initializing Dummy Classifier
2024-09-19 15:56:40,671:INFO:Total runtime is 0.4670873999595642 minutes
2024-09-19 15:56:40,671:INFO:SubProcess create_model() called ==================================
2024-09-19 15:56:40,682:INFO:Initializing create_model()
2024-09-19 15:56:40,682:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC09EE10>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253DC12AD10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:56:40,683:INFO:Checking exceptions
2024-09-19 15:56:40,683:INFO:Importing libraries
2024-09-19 15:56:40,683:INFO:Copying training dataset
2024-09-19 15:56:40,697:INFO:Defining folds
2024-09-19 15:56:40,698:INFO:Declaring metric variables
2024-09-19 15:56:40,706:INFO:Importing untrained model
2024-09-19 15:56:40,712:INFO:Dummy Classifier Imported successfully
2024-09-19 15:56:40,725:INFO:Starting cross validation
2024-09-19 15:56:40,725:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:56:41,171:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:41,173:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:41,173:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:41,173:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:41,176:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:41,176:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:41,176:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:41,186:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:41,188:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:41,188:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:41,188:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:56:41,189:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:41,190:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:56:41,190:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:41,190:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:56:41,190:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:41,190:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:41,190:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:41,190:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:56:41,196:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:41,196:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:56:41,196:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:41,196:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:41,196:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:41,196:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:41,205:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:56:41,205:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:41,206:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:56:41,210:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:41,211:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:56:41,212:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:41,216:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:41,534:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:41,555:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:41,555:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:41,566:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:56:41,576:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:41,576:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:41,576:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:56:41,586:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:56:41,606:INFO:Calculating mean and std
2024-09-19 15:56:41,606:INFO:Creating metrics dataframe
2024-09-19 15:56:41,606:INFO:Uploading results into container
2024-09-19 15:56:41,606:INFO:Uploading model into container now
2024-09-19 15:56:41,606:INFO:_master_model_container: 14
2024-09-19 15:56:41,606:INFO:_display_container: 2
2024-09-19 15:56:41,606:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-09-19 15:56:41,606:INFO:create_model() successfully completed......................................
2024-09-19 15:56:41,982:INFO:SubProcess create_model() end ==================================
2024-09-19 15:56:41,982:INFO:Creating metrics dataframe
2024-09-19 15:56:42,044:INFO:Initializing create_model()
2024-09-19 15:56:42,045:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC09EE10>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:56:42,045:INFO:Checking exceptions
2024-09-19 15:56:42,048:INFO:Importing libraries
2024-09-19 15:56:42,048:INFO:Copying training dataset
2024-09-19 15:56:42,054:INFO:Defining folds
2024-09-19 15:56:42,054:INFO:Declaring metric variables
2024-09-19 15:56:42,054:INFO:Importing untrained model
2024-09-19 15:56:42,054:INFO:Declaring custom model
2024-09-19 15:56:42,054:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-19 15:56:42,054:INFO:Cross validation set to False
2024-09-19 15:56:42,054:INFO:Fitting Model
2024-09-19 15:56:42,298:INFO:[LightGBM] [Info] Number of positive: 4231, number of negative: 4698
2024-09-19 15:56:42,298:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000777 seconds.
2024-09-19 15:56:42,298:INFO:You can set `force_row_wise=true` to remove the overhead.
2024-09-19 15:56:42,298:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2024-09-19 15:56:42,298:INFO:[LightGBM] [Info] Total Bins 1045
2024-09-19 15:56:42,298:INFO:[LightGBM] [Info] Number of data points in the train set: 8929, number of used features: 48
2024-09-19 15:56:42,298:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.473849 -> initscore=-0.104699
2024-09-19 15:56:42,298:INFO:[LightGBM] [Info] Start training from score -0.104699
2024-09-19 15:56:42,393:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-19 15:56:42,393:INFO:create_model() successfully completed......................................
2024-09-19 15:56:42,734:INFO:Initializing create_model()
2024-09-19 15:56:42,734:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC09EE10>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:56:42,734:INFO:Checking exceptions
2024-09-19 15:56:42,743:INFO:Importing libraries
2024-09-19 15:56:42,743:INFO:Copying training dataset
2024-09-19 15:56:42,749:INFO:Defining folds
2024-09-19 15:56:42,749:INFO:Declaring metric variables
2024-09-19 15:56:42,749:INFO:Importing untrained model
2024-09-19 15:56:42,749:INFO:Declaring custom model
2024-09-19 15:56:42,749:INFO:Random Forest Classifier Imported successfully
2024-09-19 15:56:42,755:INFO:Cross validation set to False
2024-09-19 15:56:42,755:INFO:Fitting Model
2024-09-19 15:56:43,313:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-09-19 15:56:43,313:INFO:create_model() successfully completed......................................
2024-09-19 15:56:43,663:INFO:Initializing create_model()
2024-09-19 15:56:43,663:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC09EE10>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:56:43,663:INFO:Checking exceptions
2024-09-19 15:56:43,674:INFO:Importing libraries
2024-09-19 15:56:43,674:INFO:Copying training dataset
2024-09-19 15:56:43,688:INFO:Defining folds
2024-09-19 15:56:43,688:INFO:Declaring metric variables
2024-09-19 15:56:43,689:INFO:Importing untrained model
2024-09-19 15:56:43,689:INFO:Declaring custom model
2024-09-19 15:56:43,691:INFO:Gradient Boosting Classifier Imported successfully
2024-09-19 15:56:43,695:INFO:Cross validation set to False
2024-09-19 15:56:43,695:INFO:Fitting Model
2024-09-19 15:56:45,395:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-09-19 15:56:45,395:INFO:create_model() successfully completed......................................
2024-09-19 15:56:45,755:INFO:_master_model_container: 14
2024-09-19 15:56:45,755:INFO:_display_container: 2
2024-09-19 15:56:45,758:INFO:[LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)]
2024-09-19 15:56:45,758:INFO:compare_models() successfully completed......................................
2024-09-19 15:56:45,766:INFO:Initializing plot_model()
2024-09-19 15:56:45,767:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC09EE10>, estimator=[LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)], plot=confusion_matrix, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-09-19 15:56:45,768:INFO:Checking exceptions
2024-09-19 15:57:02,140:INFO:PyCaret ClassificationExperiment
2024-09-19 15:57:02,140:INFO:Logging name: clf-default-name
2024-09-19 15:57:02,140:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-19 15:57:02,141:INFO:version 3.3.2
2024-09-19 15:57:02,141:INFO:Initializing setup()
2024-09-19 15:57:02,141:INFO:self.USI: 7d90
2024-09-19 15:57:02,141:INFO:self._variable_keys: {'n_jobs_param', 'data', 'X_train', 'seed', 'X', 'fold_groups_param', 'memory', 'fold_shuffle_param', 'gpu_param', 'X_test', 'idx', 'fix_imbalance', '_available_plots', 'y_train', 'y_test', '_ml_usecase', 'fold_generator', 'logging_param', 'log_plots_param', 'exp_name_log', 'is_multiclass', 'exp_id', 'target_param', 'gpu_n_jobs_param', 'y', 'USI', 'pipeline', 'html_param'}
2024-09-19 15:57:02,141:INFO:Checking environment
2024-09-19 15:57:02,141:INFO:python_version: 3.11.9
2024-09-19 15:57:02,141:INFO:python_build: ('main', 'Apr 19 2024 16:40:41')
2024-09-19 15:57:02,141:INFO:machine: AMD64
2024-09-19 15:57:02,141:INFO:platform: Windows-10-10.0.19045-SP0
2024-09-19 15:57:02,144:INFO:Memory: svmem(total=16969424896, available=4256055296, percent=74.9, used=12713369600, free=4256055296)
2024-09-19 15:57:02,144:INFO:Physical Core: 4
2024-09-19 15:57:02,144:INFO:Logical Core: 8
2024-09-19 15:57:02,144:INFO:Checking libraries
2024-09-19 15:57:02,144:INFO:System:
2024-09-19 15:57:02,144:INFO:    python: 3.11.9 | packaged by Anaconda, Inc. | (main, Apr 19 2024, 16:40:41) [MSC v.1916 64 bit (AMD64)]
2024-09-19 15:57:02,144:INFO:executable: C:\Users\juran\anaconda3\envs\myenv\python.exe
2024-09-19 15:57:02,144:INFO:   machine: Windows-10-10.0.19045-SP0
2024-09-19 15:57:02,144:INFO:PyCaret required dependencies:
2024-09-19 15:57:02,144:INFO:                 pip: 24.2
2024-09-19 15:57:02,144:INFO:          setuptools: 72.1.0
2024-09-19 15:57:02,144:INFO:             pycaret: 3.3.2
2024-09-19 15:57:02,144:INFO:             IPython: 8.26.0
2024-09-19 15:57:02,144:INFO:          ipywidgets: 8.1.5
2024-09-19 15:57:02,144:INFO:                tqdm: 4.66.5
2024-09-19 15:57:02,144:INFO:               numpy: 1.26.4
2024-09-19 15:57:02,144:INFO:              pandas: 1.5.3
2024-09-19 15:57:02,144:INFO:              jinja2: 3.1.4
2024-09-19 15:57:02,144:INFO:               scipy: 1.11.4
2024-09-19 15:57:02,144:INFO:              joblib: 1.3.2
2024-09-19 15:57:02,144:INFO:             sklearn: 1.4.2
2024-09-19 15:57:02,144:INFO:                pyod: 2.0.2
2024-09-19 15:57:02,144:INFO:            imblearn: 0.12.3
2024-09-19 15:57:02,144:INFO:   category_encoders: 2.6.3
2024-09-19 15:57:02,144:INFO:            lightgbm: 4.5.0
2024-09-19 15:57:02,144:INFO:               numba: 0.60.0
2024-09-19 15:57:02,144:INFO:            requests: 2.32.3
2024-09-19 15:57:02,144:INFO:          matplotlib: 3.7.5
2024-09-19 15:57:02,144:INFO:          scikitplot: 0.3.7
2024-09-19 15:57:02,144:INFO:         yellowbrick: 1.5
2024-09-19 15:57:02,144:INFO:              plotly: 5.24.1
2024-09-19 15:57:02,144:INFO:    plotly-resampler: Not installed
2024-09-19 15:57:02,144:INFO:             kaleido: 0.2.1
2024-09-19 15:57:02,144:INFO:           schemdraw: 0.15
2024-09-19 15:57:02,144:INFO:         statsmodels: 0.14.3
2024-09-19 15:57:02,144:INFO:              sktime: 0.26.0
2024-09-19 15:57:02,144:INFO:               tbats: 1.1.3
2024-09-19 15:57:02,144:INFO:            pmdarima: 2.0.4
2024-09-19 15:57:02,144:INFO:              psutil: 6.0.0
2024-09-19 15:57:02,144:INFO:          markupsafe: 2.1.5
2024-09-19 15:57:02,144:INFO:             pickle5: Not installed
2024-09-19 15:57:02,144:INFO:         cloudpickle: 3.0.0
2024-09-19 15:57:02,144:INFO:         deprecation: 2.1.0
2024-09-19 15:57:02,144:INFO:              xxhash: 3.5.0
2024-09-19 15:57:02,144:INFO:           wurlitzer: Not installed
2024-09-19 15:57:02,144:INFO:PyCaret optional dependencies:
2024-09-19 15:57:02,144:INFO:                shap: Not installed
2024-09-19 15:57:02,144:INFO:           interpret: Not installed
2024-09-19 15:57:02,144:INFO:                umap: Not installed
2024-09-19 15:57:02,144:INFO:     ydata_profiling: Not installed
2024-09-19 15:57:02,144:INFO:  explainerdashboard: Not installed
2024-09-19 15:57:02,144:INFO:             autoviz: Not installed
2024-09-19 15:57:02,144:INFO:           fairlearn: Not installed
2024-09-19 15:57:02,144:INFO:          deepchecks: Not installed
2024-09-19 15:57:02,144:INFO:             xgboost: Not installed
2024-09-19 15:57:02,144:INFO:            catboost: Not installed
2024-09-19 15:57:02,144:INFO:              kmodes: Not installed
2024-09-19 15:57:02,144:INFO:             mlxtend: Not installed
2024-09-19 15:57:02,144:INFO:       statsforecast: Not installed
2024-09-19 15:57:02,144:INFO:        tune_sklearn: Not installed
2024-09-19 15:57:02,144:INFO:                 ray: Not installed
2024-09-19 15:57:02,144:INFO:            hyperopt: Not installed
2024-09-19 15:57:02,144:INFO:              optuna: Not installed
2024-09-19 15:57:02,144:INFO:               skopt: Not installed
2024-09-19 15:57:02,144:INFO:              mlflow: Not installed
2024-09-19 15:57:02,144:INFO:              gradio: Not installed
2024-09-19 15:57:02,144:INFO:             fastapi: Not installed
2024-09-19 15:57:02,144:INFO:             uvicorn: Not installed
2024-09-19 15:57:02,144:INFO:              m2cgen: Not installed
2024-09-19 15:57:02,144:INFO:           evidently: Not installed
2024-09-19 15:57:02,144:INFO:               fugue: Not installed
2024-09-19 15:57:02,144:INFO:           streamlit: Not installed
2024-09-19 15:57:02,144:INFO:             prophet: Not installed
2024-09-19 15:57:02,144:INFO:None
2024-09-19 15:57:02,144:INFO:Set up data.
2024-09-19 15:57:02,172:INFO:Set up folding strategy.
2024-09-19 15:57:02,172:INFO:Set up train/test split.
2024-09-19 15:57:02,195:INFO:Set up index.
2024-09-19 15:57:02,196:INFO:Assigning column types.
2024-09-19 15:57:02,200:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-19 15:57:02,234:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-19 15:57:02,234:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 15:57:02,273:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:57:02,273:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:57:02,301:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-19 15:57:02,301:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 15:57:02,332:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:57:02,332:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:57:02,332:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-19 15:57:02,386:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 15:57:02,419:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:57:02,419:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:57:02,488:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 15:57:02,518:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:57:02,518:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:57:02,518:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-19 15:57:02,593:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:57:02,593:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:57:02,697:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:57:02,698:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:57:02,701:INFO:Preparing preprocessing pipeline...
2024-09-19 15:57:02,704:INFO:Set up label encoding.
2024-09-19 15:57:02,704:INFO:Set up simple imputation.
2024-09-19 15:57:02,715:INFO:Set up encoding of ordinal features.
2024-09-19 15:57:02,724:INFO:Set up encoding of categorical features.
2024-09-19 15:57:02,724:INFO:Set up feature normalization.
2024-09-19 15:57:02,969:INFO:Finished creating preprocessing pipeline.
2024-09-19 15:57:03,047:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\juran\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indica...
                                    transformer=OneHotEncoder(cols=['job',
                                                                    'marital',
                                                                    'education',
                                                                    'contact',
                                                                    'month',
                                                                    'poutcome'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-09-19 15:57:03,047:INFO:Creating final display dataframe.
2024-09-19 15:57:03,217:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target           deposit
2                   Target type            Binary
3                Target mapping     no: 0, yes: 1
4           Original data shape       (11162, 17)
5        Transformed data shape       (11162, 49)
6   Transformed train set shape        (8929, 49)
7    Transformed test set shape        (2233, 49)
8              Numeric features                 7
9          Categorical features                 9
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16                    Normalize              True
17             Normalize method            zscore
18               Fold Generator   StratifiedKFold
19                  Fold Number                10
20                     CPU Jobs                -1
21                      Use GPU             False
22               Log Experiment             False
23              Experiment Name  clf-default-name
24                          USI              7d90
2024-09-19 15:57:03,317:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:57:03,317:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:57:03,418:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:57:03,418:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 15:57:03,418:INFO:setup() successfully completed in 1.28s...............
2024-09-19 15:57:03,428:INFO:Initializing compare_models()
2024-09-19 15:57:03,428:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC0B71D0>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Recall, n_select=3, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC0B71D0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Recall', 'n_select': 3, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2024-09-19 15:57:03,428:INFO:Checking exceptions
2024-09-19 15:57:03,439:INFO:Preparing display monitor
2024-09-19 15:57:03,475:INFO:Initializing Logistic Regression
2024-09-19 15:57:03,476:INFO:Total runtime is 1.6478697458902993e-05 minutes
2024-09-19 15:57:03,480:INFO:SubProcess create_model() called ==================================
2024-09-19 15:57:03,481:INFO:Initializing create_model()
2024-09-19 15:57:03,481:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC0B71D0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253DE2F3C90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:57:03,481:INFO:Checking exceptions
2024-09-19 15:57:03,481:INFO:Importing libraries
2024-09-19 15:57:03,481:INFO:Copying training dataset
2024-09-19 15:57:03,489:INFO:Defining folds
2024-09-19 15:57:03,489:INFO:Declaring metric variables
2024-09-19 15:57:03,489:INFO:Importing untrained model
2024-09-19 15:57:03,489:INFO:Logistic Regression Imported successfully
2024-09-19 15:57:03,505:INFO:Starting cross validation
2024-09-19 15:57:03,508:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:57:03,956:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:03,970:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:03,974:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:03,976:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:03,984:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:03,985:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:03,985:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:03,989:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:03,991:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:03,992:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:03,994:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:03,994:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:03,994:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:03,994:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:04,002:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:04,002:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:04,003:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:04,007:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:04,012:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:04,012:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:04,012:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:04,012:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:04,024:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:04,025:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:04,393:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:04,402:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:04,412:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:04,416:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:04,426:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:04,435:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:04,450:INFO:Calculating mean and std
2024-09-19 15:57:04,452:INFO:Creating metrics dataframe
2024-09-19 15:57:04,457:INFO:Uploading results into container
2024-09-19 15:57:04,457:INFO:Uploading model into container now
2024-09-19 15:57:04,457:INFO:_master_model_container: 1
2024-09-19 15:57:04,457:INFO:_display_container: 2
2024-09-19 15:57:04,457:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-19 15:57:04,457:INFO:create_model() successfully completed......................................
2024-09-19 15:57:04,915:INFO:SubProcess create_model() end ==================================
2024-09-19 15:57:04,915:INFO:Creating metrics dataframe
2024-09-19 15:57:04,919:INFO:Initializing K Neighbors Classifier
2024-09-19 15:57:04,919:INFO:Total runtime is 0.024068029721577962 minutes
2024-09-19 15:57:04,919:INFO:SubProcess create_model() called ==================================
2024-09-19 15:57:04,919:INFO:Initializing create_model()
2024-09-19 15:57:04,919:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC0B71D0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253DE2F3C90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:57:04,919:INFO:Checking exceptions
2024-09-19 15:57:04,919:INFO:Importing libraries
2024-09-19 15:57:04,919:INFO:Copying training dataset
2024-09-19 15:57:04,935:INFO:Defining folds
2024-09-19 15:57:04,936:INFO:Declaring metric variables
2024-09-19 15:57:04,939:INFO:Importing untrained model
2024-09-19 15:57:04,944:INFO:K Neighbors Classifier Imported successfully
2024-09-19 15:57:04,952:INFO:Starting cross validation
2024-09-19 15:57:04,958:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:57:05,554:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:05,564:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:05,575:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:05,594:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:05,595:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:05,605:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:05,605:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:05,605:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:05,607:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:05,609:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:05,616:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:05,616:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:05,616:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:05,616:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:05,619:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:05,620:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:05,620:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:05,626:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:05,627:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:05,628:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:05,629:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:05,629:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:05,638:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:05,641:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:06,089:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:06,095:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:06,102:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:06,114:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:06,122:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:06,128:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:06,138:INFO:Calculating mean and std
2024-09-19 15:57:06,140:INFO:Creating metrics dataframe
2024-09-19 15:57:06,147:INFO:Uploading results into container
2024-09-19 15:57:06,149:INFO:Uploading model into container now
2024-09-19 15:57:06,149:INFO:_master_model_container: 2
2024-09-19 15:57:06,150:INFO:_display_container: 2
2024-09-19 15:57:06,150:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-09-19 15:57:06,150:INFO:create_model() successfully completed......................................
2024-09-19 15:57:06,530:INFO:SubProcess create_model() end ==================================
2024-09-19 15:57:06,530:INFO:Creating metrics dataframe
2024-09-19 15:57:06,546:INFO:Initializing Naive Bayes
2024-09-19 15:57:06,546:INFO:Total runtime is 0.051180736223856604 minutes
2024-09-19 15:57:06,557:INFO:SubProcess create_model() called ==================================
2024-09-19 15:57:06,557:INFO:Initializing create_model()
2024-09-19 15:57:06,557:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC0B71D0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253DE2F3C90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:57:06,557:INFO:Checking exceptions
2024-09-19 15:57:06,557:INFO:Importing libraries
2024-09-19 15:57:06,557:INFO:Copying training dataset
2024-09-19 15:57:06,570:INFO:Defining folds
2024-09-19 15:57:06,570:INFO:Declaring metric variables
2024-09-19 15:57:06,573:INFO:Importing untrained model
2024-09-19 15:57:06,588:INFO:Naive Bayes Imported successfully
2024-09-19 15:57:06,588:INFO:Starting cross validation
2024-09-19 15:57:06,604:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:57:07,051:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:07,051:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:07,060:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:07,060:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:07,060:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:07,060:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:07,060:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:07,060:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:07,070:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:07,070:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:07,070:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:07,070:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:07,070:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:07,070:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:07,070:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:07,081:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:07,081:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:07,081:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:07,081:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:07,081:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:07,081:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:07,091:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:07,091:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:07,091:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:07,440:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:07,450:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:07,450:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:07,479:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:07,479:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:07,503:INFO:Calculating mean and std
2024-09-19 15:57:07,504:INFO:Creating metrics dataframe
2024-09-19 15:57:07,504:INFO:Uploading results into container
2024-09-19 15:57:07,504:INFO:Uploading model into container now
2024-09-19 15:57:07,504:INFO:_master_model_container: 3
2024-09-19 15:57:07,504:INFO:_display_container: 2
2024-09-19 15:57:07,504:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-09-19 15:57:07,504:INFO:create_model() successfully completed......................................
2024-09-19 15:57:07,930:INFO:SubProcess create_model() end ==================================
2024-09-19 15:57:07,930:INFO:Creating metrics dataframe
2024-09-19 15:57:07,972:INFO:Initializing Decision Tree Classifier
2024-09-19 15:57:07,972:INFO:Total runtime is 0.07495000759760538 minutes
2024-09-19 15:57:07,978:INFO:SubProcess create_model() called ==================================
2024-09-19 15:57:07,978:INFO:Initializing create_model()
2024-09-19 15:57:07,978:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC0B71D0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253DE2F3C90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:57:07,978:INFO:Checking exceptions
2024-09-19 15:57:07,978:INFO:Importing libraries
2024-09-19 15:57:07,978:INFO:Copying training dataset
2024-09-19 15:57:07,987:INFO:Defining folds
2024-09-19 15:57:07,988:INFO:Declaring metric variables
2024-09-19 15:57:07,990:INFO:Importing untrained model
2024-09-19 15:57:07,990:INFO:Decision Tree Classifier Imported successfully
2024-09-19 15:57:08,005:INFO:Starting cross validation
2024-09-19 15:57:08,005:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:57:08,519:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:08,519:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:08,529:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:08,529:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:08,529:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:08,539:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:08,540:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:08,540:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:08,540:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:08,540:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:08,540:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:08,540:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:08,549:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:08,549:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:08,549:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:08,549:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:08,549:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:08,561:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:08,563:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:08,570:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:08,570:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:08,570:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:08,580:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:08,592:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:08,968:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:08,968:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:08,978:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:08,978:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:08,989:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:08,989:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:09,019:INFO:Calculating mean and std
2024-09-19 15:57:09,019:INFO:Creating metrics dataframe
2024-09-19 15:57:09,019:INFO:Uploading results into container
2024-09-19 15:57:09,019:INFO:Uploading model into container now
2024-09-19 15:57:09,019:INFO:_master_model_container: 4
2024-09-19 15:57:09,019:INFO:_display_container: 2
2024-09-19 15:57:09,019:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-09-19 15:57:09,019:INFO:create_model() successfully completed......................................
2024-09-19 15:57:09,389:INFO:SubProcess create_model() end ==================================
2024-09-19 15:57:09,389:INFO:Creating metrics dataframe
2024-09-19 15:57:09,421:INFO:Initializing SVM - Linear Kernel
2024-09-19 15:57:09,421:INFO:Total runtime is 0.09909604390462239 minutes
2024-09-19 15:57:09,436:INFO:SubProcess create_model() called ==================================
2024-09-19 15:57:09,436:INFO:Initializing create_model()
2024-09-19 15:57:09,436:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC0B71D0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253DE2F3C90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:57:09,436:INFO:Checking exceptions
2024-09-19 15:57:09,439:INFO:Importing libraries
2024-09-19 15:57:09,439:INFO:Copying training dataset
2024-09-19 15:57:09,445:INFO:Defining folds
2024-09-19 15:57:09,445:INFO:Declaring metric variables
2024-09-19 15:57:09,455:INFO:Importing untrained model
2024-09-19 15:57:09,455:INFO:SVM - Linear Kernel Imported successfully
2024-09-19 15:57:09,455:INFO:Starting cross validation
2024-09-19 15:57:09,469:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:57:10,040:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:10,050:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:10,060:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:10,070:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:10,070:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:10,087:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:10,087:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:10,087:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:10,087:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:10,096:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:10,096:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:10,096:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:10,096:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:10,096:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:10,113:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:10,115:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:10,115:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:10,115:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:10,115:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:10,125:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:10,126:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:10,132:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:10,142:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:10,516:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:10,539:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:10,547:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:10,603:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:10,618:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:10,634:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:10,662:INFO:Calculating mean and std
2024-09-19 15:57:10,662:INFO:Creating metrics dataframe
2024-09-19 15:57:10,662:INFO:Uploading results into container
2024-09-19 15:57:10,662:INFO:Uploading model into container now
2024-09-19 15:57:10,662:INFO:_master_model_container: 5
2024-09-19 15:57:10,662:INFO:_display_container: 2
2024-09-19 15:57:10,662:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-09-19 15:57:10,662:INFO:create_model() successfully completed......................................
2024-09-19 15:57:11,102:INFO:SubProcess create_model() end ==================================
2024-09-19 15:57:11,102:INFO:Creating metrics dataframe
2024-09-19 15:57:11,128:INFO:Initializing Ridge Classifier
2024-09-19 15:57:11,128:INFO:Total runtime is 0.1275536338488261 minutes
2024-09-19 15:57:11,136:INFO:SubProcess create_model() called ==================================
2024-09-19 15:57:11,136:INFO:Initializing create_model()
2024-09-19 15:57:11,136:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC0B71D0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253DE2F3C90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:57:11,136:INFO:Checking exceptions
2024-09-19 15:57:11,136:INFO:Importing libraries
2024-09-19 15:57:11,136:INFO:Copying training dataset
2024-09-19 15:57:11,149:INFO:Defining folds
2024-09-19 15:57:11,149:INFO:Declaring metric variables
2024-09-19 15:57:11,154:INFO:Importing untrained model
2024-09-19 15:57:11,162:INFO:Ridge Classifier Imported successfully
2024-09-19 15:57:11,171:INFO:Starting cross validation
2024-09-19 15:57:11,171:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:57:11,622:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:11,622:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:11,622:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:11,632:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:11,632:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:11,632:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:11,632:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:11,632:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:11,632:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:11,632:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:11,643:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:11,643:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:11,643:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:11,643:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:11,643:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:11,643:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:11,643:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:11,643:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:11,653:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:11,653:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:11,653:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:11,653:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:11,663:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:11,673:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:12,014:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:12,024:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:12,036:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:12,046:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:12,055:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:12,056:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:12,077:INFO:Calculating mean and std
2024-09-19 15:57:12,078:INFO:Creating metrics dataframe
2024-09-19 15:57:12,081:INFO:Uploading results into container
2024-09-19 15:57:12,082:INFO:Uploading model into container now
2024-09-19 15:57:12,082:INFO:_master_model_container: 6
2024-09-19 15:57:12,082:INFO:_display_container: 2
2024-09-19 15:57:12,083:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-09-19 15:57:12,083:INFO:create_model() successfully completed......................................
2024-09-19 15:57:12,470:INFO:SubProcess create_model() end ==================================
2024-09-19 15:57:12,470:INFO:Creating metrics dataframe
2024-09-19 15:57:12,491:INFO:Initializing Random Forest Classifier
2024-09-19 15:57:12,492:INFO:Total runtime is 0.1502878228823344 minutes
2024-09-19 15:57:12,499:INFO:SubProcess create_model() called ==================================
2024-09-19 15:57:12,501:INFO:Initializing create_model()
2024-09-19 15:57:12,501:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC0B71D0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253DE2F3C90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:57:12,501:INFO:Checking exceptions
2024-09-19 15:57:12,501:INFO:Importing libraries
2024-09-19 15:57:12,501:INFO:Copying training dataset
2024-09-19 15:57:12,506:INFO:Defining folds
2024-09-19 15:57:12,506:INFO:Declaring metric variables
2024-09-19 15:57:12,519:INFO:Importing untrained model
2024-09-19 15:57:12,519:INFO:Random Forest Classifier Imported successfully
2024-09-19 15:57:12,536:INFO:Starting cross validation
2024-09-19 15:57:12,538:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:57:14,512:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:14,512:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:14,523:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:14,523:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:14,523:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:14,534:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:14,539:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:14,539:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:14,555:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:14,563:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:14,575:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:14,586:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:14,586:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:14,597:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:14,609:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:14,611:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:14,622:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:14,625:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:14,627:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:14,632:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:14,635:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:14,639:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:14,645:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:14,648:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:15,369:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:15,382:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:15,397:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:15,399:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:15,407:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:15,415:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:15,433:INFO:Calculating mean and std
2024-09-19 15:57:15,434:INFO:Creating metrics dataframe
2024-09-19 15:57:15,434:INFO:Uploading results into container
2024-09-19 15:57:15,434:INFO:Uploading model into container now
2024-09-19 15:57:15,434:INFO:_master_model_container: 7
2024-09-19 15:57:15,434:INFO:_display_container: 2
2024-09-19 15:57:15,434:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-09-19 15:57:15,434:INFO:create_model() successfully completed......................................
2024-09-19 15:57:15,865:INFO:SubProcess create_model() end ==================================
2024-09-19 15:57:15,865:INFO:Creating metrics dataframe
2024-09-19 15:57:15,884:INFO:Initializing Quadratic Discriminant Analysis
2024-09-19 15:57:15,884:INFO:Total runtime is 0.2068137288093567 minutes
2024-09-19 15:57:15,903:INFO:SubProcess create_model() called ==================================
2024-09-19 15:57:15,903:INFO:Initializing create_model()
2024-09-19 15:57:15,903:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC0B71D0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253DE2F3C90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:57:15,904:INFO:Checking exceptions
2024-09-19 15:57:15,904:INFO:Importing libraries
2024-09-19 15:57:15,904:INFO:Copying training dataset
2024-09-19 15:57:15,920:INFO:Defining folds
2024-09-19 15:57:15,923:INFO:Declaring metric variables
2024-09-19 15:57:15,938:INFO:Importing untrained model
2024-09-19 15:57:15,943:INFO:Quadratic Discriminant Analysis Imported successfully
2024-09-19 15:57:15,951:INFO:Starting cross validation
2024-09-19 15:57:15,952:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:57:16,293:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:57:16,299:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:57:16,303:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:57:16,304:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:57:16,311:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:57:16,322:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:57:16,335:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:57:16,391:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:16,401:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:16,401:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:16,401:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:16,401:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:16,401:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:16,411:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:16,411:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:16,411:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:16,411:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:16,411:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:16,411:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:16,411:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:16,421:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:16,421:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:16,421:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:16,421:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:16,421:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:16,421:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:16,421:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:16,431:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:16,431:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:16,431:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:16,447:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:16,672:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:57:16,686:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 15:57:16,755:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:16,766:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:16,766:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:16,776:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:16,776:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:16,786:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:16,806:INFO:Calculating mean and std
2024-09-19 15:57:16,806:INFO:Creating metrics dataframe
2024-09-19 15:57:16,806:INFO:Uploading results into container
2024-09-19 15:57:16,806:INFO:Uploading model into container now
2024-09-19 15:57:16,806:INFO:_master_model_container: 8
2024-09-19 15:57:16,806:INFO:_display_container: 2
2024-09-19 15:57:16,806:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-09-19 15:57:16,806:INFO:create_model() successfully completed......................................
2024-09-19 15:57:17,168:INFO:SubProcess create_model() end ==================================
2024-09-19 15:57:17,168:INFO:Creating metrics dataframe
2024-09-19 15:57:17,177:INFO:Initializing Ada Boost Classifier
2024-09-19 15:57:17,177:INFO:Total runtime is 0.2283680518468221 minutes
2024-09-19 15:57:17,180:INFO:SubProcess create_model() called ==================================
2024-09-19 15:57:17,181:INFO:Initializing create_model()
2024-09-19 15:57:17,181:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC0B71D0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253DE2F3C90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:57:17,181:INFO:Checking exceptions
2024-09-19 15:57:17,181:INFO:Importing libraries
2024-09-19 15:57:17,181:INFO:Copying training dataset
2024-09-19 15:57:17,188:INFO:Defining folds
2024-09-19 15:57:17,188:INFO:Declaring metric variables
2024-09-19 15:57:17,188:INFO:Importing untrained model
2024-09-19 15:57:17,188:INFO:Ada Boost Classifier Imported successfully
2024-09-19 15:57:17,202:INFO:Starting cross validation
2024-09-19 15:57:17,202:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:57:17,518:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:57:17,538:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:57:17,538:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:57:17,549:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:57:17,549:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:57:17,559:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:57:17,559:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:57:17,559:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:57:18,292:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:18,302:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:18,302:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:18,312:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:18,312:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:18,322:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:18,322:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:18,322:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:18,335:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:18,335:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:18,335:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:18,335:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:18,345:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:18,345:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:18,345:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:18,345:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:18,345:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:18,355:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:18,355:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:18,364:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:18,370:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:18,371:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:18,371:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:18,375:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:18,558:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:57:18,568:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 15:57:19,323:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:19,333:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:19,343:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:19,343:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:19,363:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:19,373:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:19,394:INFO:Calculating mean and std
2024-09-19 15:57:19,394:INFO:Creating metrics dataframe
2024-09-19 15:57:19,394:INFO:Uploading results into container
2024-09-19 15:57:19,394:INFO:Uploading model into container now
2024-09-19 15:57:19,394:INFO:_master_model_container: 9
2024-09-19 15:57:19,394:INFO:_display_container: 2
2024-09-19 15:57:19,394:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-09-19 15:57:19,394:INFO:create_model() successfully completed......................................
2024-09-19 15:57:19,760:INFO:SubProcess create_model() end ==================================
2024-09-19 15:57:19,760:INFO:Creating metrics dataframe
2024-09-19 15:57:19,807:INFO:Initializing Gradient Boosting Classifier
2024-09-19 15:57:19,809:INFO:Total runtime is 0.27222994963328045 minutes
2024-09-19 15:57:19,815:INFO:SubProcess create_model() called ==================================
2024-09-19 15:57:19,815:INFO:Initializing create_model()
2024-09-19 15:57:19,815:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC0B71D0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253DE2F3C90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:57:19,815:INFO:Checking exceptions
2024-09-19 15:57:19,817:INFO:Importing libraries
2024-09-19 15:57:19,817:INFO:Copying training dataset
2024-09-19 15:57:19,827:INFO:Defining folds
2024-09-19 15:57:19,827:INFO:Declaring metric variables
2024-09-19 15:57:19,832:INFO:Importing untrained model
2024-09-19 15:57:19,835:INFO:Gradient Boosting Classifier Imported successfully
2024-09-19 15:57:19,842:INFO:Starting cross validation
2024-09-19 15:57:19,842:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:57:22,060:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:22,076:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:22,076:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:22,076:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:22,092:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:22,093:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:22,093:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:22,093:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:22,093:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:22,102:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:22,102:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:22,102:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:22,102:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:22,102:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:22,102:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:22,102:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:22,102:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:22,102:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:22,117:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:22,117:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:22,126:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:22,131:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:22,133:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:22,138:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:24,309:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:24,319:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:24,329:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:24,350:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:24,350:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:24,360:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:24,380:INFO:Calculating mean and std
2024-09-19 15:57:24,380:INFO:Creating metrics dataframe
2024-09-19 15:57:24,380:INFO:Uploading results into container
2024-09-19 15:57:24,380:INFO:Uploading model into container now
2024-09-19 15:57:24,380:INFO:_master_model_container: 10
2024-09-19 15:57:24,380:INFO:_display_container: 2
2024-09-19 15:57:24,380:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-09-19 15:57:24,380:INFO:create_model() successfully completed......................................
2024-09-19 15:57:24,734:INFO:SubProcess create_model() end ==================================
2024-09-19 15:57:24,734:INFO:Creating metrics dataframe
2024-09-19 15:57:24,782:INFO:Initializing Linear Discriminant Analysis
2024-09-19 15:57:24,782:INFO:Total runtime is 0.3551127036412557 minutes
2024-09-19 15:57:24,789:INFO:SubProcess create_model() called ==================================
2024-09-19 15:57:24,790:INFO:Initializing create_model()
2024-09-19 15:57:24,790:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC0B71D0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253DE2F3C90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:57:24,790:INFO:Checking exceptions
2024-09-19 15:57:24,790:INFO:Importing libraries
2024-09-19 15:57:24,790:INFO:Copying training dataset
2024-09-19 15:57:24,801:INFO:Defining folds
2024-09-19 15:57:24,801:INFO:Declaring metric variables
2024-09-19 15:57:24,804:INFO:Importing untrained model
2024-09-19 15:57:24,817:INFO:Linear Discriminant Analysis Imported successfully
2024-09-19 15:57:24,822:INFO:Starting cross validation
2024-09-19 15:57:24,822:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:57:25,293:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:25,293:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:25,293:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:25,303:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:25,303:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:25,303:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:25,303:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:25,313:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:25,313:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:25,313:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:25,313:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:25,313:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:25,313:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:25,323:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:25,323:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:25,323:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:25,323:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:25,323:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:25,333:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:25,333:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:25,341:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:25,343:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:25,344:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:25,354:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:25,658:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:25,658:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:25,669:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:25,669:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:25,669:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:25,669:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:25,699:INFO:Calculating mean and std
2024-09-19 15:57:25,699:INFO:Creating metrics dataframe
2024-09-19 15:57:25,699:INFO:Uploading results into container
2024-09-19 15:57:25,699:INFO:Uploading model into container now
2024-09-19 15:57:25,699:INFO:_master_model_container: 11
2024-09-19 15:57:25,699:INFO:_display_container: 2
2024-09-19 15:57:25,699:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-09-19 15:57:25,699:INFO:create_model() successfully completed......................................
2024-09-19 15:57:26,044:INFO:SubProcess create_model() end ==================================
2024-09-19 15:57:26,044:INFO:Creating metrics dataframe
2024-09-19 15:57:26,060:INFO:Initializing Extra Trees Classifier
2024-09-19 15:57:26,060:INFO:Total runtime is 0.3764140009880066 minutes
2024-09-19 15:57:26,068:INFO:SubProcess create_model() called ==================================
2024-09-19 15:57:26,069:INFO:Initializing create_model()
2024-09-19 15:57:26,069:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC0B71D0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253DE2F3C90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:57:26,069:INFO:Checking exceptions
2024-09-19 15:57:26,069:INFO:Importing libraries
2024-09-19 15:57:26,069:INFO:Copying training dataset
2024-09-19 15:57:26,080:INFO:Defining folds
2024-09-19 15:57:26,081:INFO:Declaring metric variables
2024-09-19 15:57:26,085:INFO:Importing untrained model
2024-09-19 15:57:26,085:INFO:Extra Trees Classifier Imported successfully
2024-09-19 15:57:26,085:INFO:Starting cross validation
2024-09-19 15:57:26,102:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:57:28,094:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:28,103:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:28,105:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:28,112:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:28,114:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:28,120:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:28,122:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:28,123:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:28,135:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:28,136:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:28,152:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:28,159:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:28,181:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:28,193:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:28,197:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:28,197:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:28,203:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:28,211:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:28,212:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:28,222:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:28,223:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:28,223:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:28,228:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:28,234:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:29,018:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:29,028:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:29,044:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:29,054:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:29,068:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:29,074:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:29,097:INFO:Calculating mean and std
2024-09-19 15:57:29,097:INFO:Creating metrics dataframe
2024-09-19 15:57:29,097:INFO:Uploading results into container
2024-09-19 15:57:29,097:INFO:Uploading model into container now
2024-09-19 15:57:29,097:INFO:_master_model_container: 12
2024-09-19 15:57:29,097:INFO:_display_container: 2
2024-09-19 15:57:29,097:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-09-19 15:57:29,097:INFO:create_model() successfully completed......................................
2024-09-19 15:57:29,476:INFO:SubProcess create_model() end ==================================
2024-09-19 15:57:29,476:INFO:Creating metrics dataframe
2024-09-19 15:57:29,507:INFO:Initializing Light Gradient Boosting Machine
2024-09-19 15:57:29,507:INFO:Total runtime is 0.43387150367101035 minutes
2024-09-19 15:57:29,523:INFO:SubProcess create_model() called ==================================
2024-09-19 15:57:29,523:INFO:Initializing create_model()
2024-09-19 15:57:29,523:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC0B71D0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253DE2F3C90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:57:29,523:INFO:Checking exceptions
2024-09-19 15:57:29,523:INFO:Importing libraries
2024-09-19 15:57:29,523:INFO:Copying training dataset
2024-09-19 15:57:29,529:INFO:Defining folds
2024-09-19 15:57:29,529:INFO:Declaring metric variables
2024-09-19 15:57:29,535:INFO:Importing untrained model
2024-09-19 15:57:29,538:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-19 15:57:29,545:INFO:Starting cross validation
2024-09-19 15:57:29,547:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:57:30,670:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:30,680:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:30,685:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:30,685:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:30,691:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:30,691:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:30,691:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:30,701:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:30,701:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:30,701:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:30,711:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:30,728:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:30,926:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:30,943:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:30,943:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:30,953:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:30,953:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:30,957:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:31,072:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:31,086:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:31,092:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:31,100:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:31,104:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:31,121:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:31,338:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:31,348:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:31,348:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:31,358:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:31,358:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:31,368:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:31,388:INFO:Calculating mean and std
2024-09-19 15:57:31,389:INFO:Creating metrics dataframe
2024-09-19 15:57:31,392:INFO:Uploading results into container
2024-09-19 15:57:31,392:INFO:Uploading model into container now
2024-09-19 15:57:31,392:INFO:_master_model_container: 13
2024-09-19 15:57:31,394:INFO:_display_container: 2
2024-09-19 15:57:31,395:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-19 15:57:31,395:INFO:create_model() successfully completed......................................
2024-09-19 15:57:31,835:INFO:SubProcess create_model() end ==================================
2024-09-19 15:57:31,835:INFO:Creating metrics dataframe
2024-09-19 15:57:31,835:INFO:Initializing Dummy Classifier
2024-09-19 15:57:31,835:INFO:Total runtime is 0.4726663152376811 minutes
2024-09-19 15:57:31,855:INFO:SubProcess create_model() called ==================================
2024-09-19 15:57:31,855:INFO:Initializing create_model()
2024-09-19 15:57:31,855:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC0B71D0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253DE2F3C90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:57:31,855:INFO:Checking exceptions
2024-09-19 15:57:31,855:INFO:Importing libraries
2024-09-19 15:57:31,855:INFO:Copying training dataset
2024-09-19 15:57:31,868:INFO:Defining folds
2024-09-19 15:57:31,869:INFO:Declaring metric variables
2024-09-19 15:57:31,874:INFO:Importing untrained model
2024-09-19 15:57:31,877:INFO:Dummy Classifier Imported successfully
2024-09-19 15:57:31,884:INFO:Starting cross validation
2024-09-19 15:57:31,887:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 15:57:32,345:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:32,346:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:32,347:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:32,355:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:32,355:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:32,355:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:32,355:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:32,355:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:32,355:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:32,363:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:57:32,363:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:57:32,363:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:32,363:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:32,363:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:57:32,367:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:32,367:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:32,368:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:32,369:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:32,369:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:32,373:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:57:32,373:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:32,374:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:57:32,375:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:57:32,376:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:32,376:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:32,377:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:32,379:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:32,380:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:32,382:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:57:32,382:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:57:32,387:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:32,388:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:32,745:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:32,755:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:32,755:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:32,765:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:57:32,765:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:32,765:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:32,765:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 15:57:32,775:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 15:57:32,795:INFO:Calculating mean and std
2024-09-19 15:57:32,795:INFO:Creating metrics dataframe
2024-09-19 15:57:32,801:INFO:Uploading results into container
2024-09-19 15:57:32,801:INFO:Uploading model into container now
2024-09-19 15:57:32,801:INFO:_master_model_container: 14
2024-09-19 15:57:32,801:INFO:_display_container: 2
2024-09-19 15:57:32,801:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-09-19 15:57:32,801:INFO:create_model() successfully completed......................................
2024-09-19 15:57:33,200:INFO:SubProcess create_model() end ==================================
2024-09-19 15:57:33,200:INFO:Creating metrics dataframe
2024-09-19 15:57:33,255:INFO:Initializing create_model()
2024-09-19 15:57:33,262:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC0B71D0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:57:33,262:INFO:Checking exceptions
2024-09-19 15:57:33,264:INFO:Importing libraries
2024-09-19 15:57:33,265:INFO:Copying training dataset
2024-09-19 15:57:33,270:INFO:Defining folds
2024-09-19 15:57:33,270:INFO:Declaring metric variables
2024-09-19 15:57:33,270:INFO:Importing untrained model
2024-09-19 15:57:33,270:INFO:Declaring custom model
2024-09-19 15:57:33,270:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-19 15:57:33,270:INFO:Cross validation set to False
2024-09-19 15:57:33,270:INFO:Fitting Model
2024-09-19 15:57:33,541:INFO:[LightGBM] [Info] Number of positive: 4231, number of negative: 4698
2024-09-19 15:57:33,541:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000788 seconds.
2024-09-19 15:57:33,541:INFO:You can set `force_row_wise=true` to remove the overhead.
2024-09-19 15:57:33,541:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2024-09-19 15:57:33,541:INFO:[LightGBM] [Info] Total Bins 1045
2024-09-19 15:57:33,541:INFO:[LightGBM] [Info] Number of data points in the train set: 8929, number of used features: 48
2024-09-19 15:57:33,541:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.473849 -> initscore=-0.104699
2024-09-19 15:57:33,541:INFO:[LightGBM] [Info] Start training from score -0.104699
2024-09-19 15:57:33,637:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-19 15:57:33,637:INFO:create_model() successfully completed......................................
2024-09-19 15:57:34,101:INFO:Initializing create_model()
2024-09-19 15:57:34,101:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC0B71D0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:57:34,101:INFO:Checking exceptions
2024-09-19 15:57:34,108:INFO:Importing libraries
2024-09-19 15:57:34,109:INFO:Copying training dataset
2024-09-19 15:57:34,120:INFO:Defining folds
2024-09-19 15:57:34,120:INFO:Declaring metric variables
2024-09-19 15:57:34,121:INFO:Importing untrained model
2024-09-19 15:57:34,121:INFO:Declaring custom model
2024-09-19 15:57:34,122:INFO:Random Forest Classifier Imported successfully
2024-09-19 15:57:34,126:INFO:Cross validation set to False
2024-09-19 15:57:34,126:INFO:Fitting Model
2024-09-19 15:57:34,877:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-09-19 15:57:34,877:INFO:create_model() successfully completed......................................
2024-09-19 15:57:35,262:INFO:Initializing create_model()
2024-09-19 15:57:35,262:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC0B71D0>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 15:57:35,262:INFO:Checking exceptions
2024-09-19 15:57:35,262:INFO:Importing libraries
2024-09-19 15:57:35,271:INFO:Copying training dataset
2024-09-19 15:57:35,275:INFO:Defining folds
2024-09-19 15:57:35,275:INFO:Declaring metric variables
2024-09-19 15:57:35,275:INFO:Importing untrained model
2024-09-19 15:57:35,275:INFO:Declaring custom model
2024-09-19 15:57:35,275:INFO:Gradient Boosting Classifier Imported successfully
2024-09-19 15:57:35,275:INFO:Cross validation set to False
2024-09-19 15:57:35,275:INFO:Fitting Model
2024-09-19 15:57:37,429:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-09-19 15:57:37,429:INFO:create_model() successfully completed......................................
2024-09-19 15:57:37,878:INFO:_master_model_container: 14
2024-09-19 15:57:37,879:INFO:_display_container: 2
2024-09-19 15:57:37,882:INFO:[LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)]
2024-09-19 15:57:37,883:INFO:compare_models() successfully completed......................................
2024-09-19 15:57:37,895:INFO:Initializing plot_model()
2024-09-19 15:57:37,895:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253DC09EE10>, estimator=[LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)], plot=confusion_matrix, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-09-19 15:57:37,895:INFO:Checking exceptions
2024-09-19 16:06:52,581:INFO:PyCaret ClassificationExperiment
2024-09-19 16:06:52,581:INFO:Logging name: clf-default-name
2024-09-19 16:06:52,581:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-19 16:06:52,581:INFO:version 3.3.2
2024-09-19 16:06:52,581:INFO:Initializing setup()
2024-09-19 16:06:52,581:INFO:self.USI: 0ae9
2024-09-19 16:06:52,581:INFO:self._variable_keys: {'n_jobs_param', 'data', 'X_train', 'seed', 'X', 'fold_groups_param', 'memory', 'fold_shuffle_param', 'gpu_param', 'X_test', 'idx', 'fix_imbalance', '_available_plots', 'y_train', 'y_test', '_ml_usecase', 'fold_generator', 'logging_param', 'log_plots_param', 'exp_name_log', 'is_multiclass', 'exp_id', 'target_param', 'gpu_n_jobs_param', 'y', 'USI', 'pipeline', 'html_param'}
2024-09-19 16:06:52,581:INFO:Checking environment
2024-09-19 16:06:52,581:INFO:python_version: 3.11.9
2024-09-19 16:06:52,581:INFO:python_build: ('main', 'Apr 19 2024 16:40:41')
2024-09-19 16:06:52,581:INFO:machine: AMD64
2024-09-19 16:06:52,581:INFO:platform: Windows-10-10.0.19045-SP0
2024-09-19 16:06:52,586:INFO:Memory: svmem(total=16969424896, available=5391970304, percent=68.2, used=11577454592, free=5391970304)
2024-09-19 16:06:52,587:INFO:Physical Core: 4
2024-09-19 16:06:52,587:INFO:Logical Core: 8
2024-09-19 16:06:52,587:INFO:Checking libraries
2024-09-19 16:06:52,587:INFO:System:
2024-09-19 16:06:52,587:INFO:    python: 3.11.9 | packaged by Anaconda, Inc. | (main, Apr 19 2024, 16:40:41) [MSC v.1916 64 bit (AMD64)]
2024-09-19 16:06:52,587:INFO:executable: C:\Users\juran\anaconda3\envs\myenv\python.exe
2024-09-19 16:06:52,587:INFO:   machine: Windows-10-10.0.19045-SP0
2024-09-19 16:06:52,587:INFO:PyCaret required dependencies:
2024-09-19 16:06:52,587:INFO:                 pip: 24.2
2024-09-19 16:06:52,588:INFO:          setuptools: 72.1.0
2024-09-19 16:06:52,588:INFO:             pycaret: 3.3.2
2024-09-19 16:06:52,588:INFO:             IPython: 8.26.0
2024-09-19 16:06:52,588:INFO:          ipywidgets: 8.1.5
2024-09-19 16:06:52,588:INFO:                tqdm: 4.66.5
2024-09-19 16:06:52,588:INFO:               numpy: 1.26.4
2024-09-19 16:06:52,588:INFO:              pandas: 1.5.3
2024-09-19 16:06:52,588:INFO:              jinja2: 3.1.4
2024-09-19 16:06:52,588:INFO:               scipy: 1.11.4
2024-09-19 16:06:52,588:INFO:              joblib: 1.3.2
2024-09-19 16:06:52,588:INFO:             sklearn: 1.4.2
2024-09-19 16:06:52,588:INFO:                pyod: 2.0.2
2024-09-19 16:06:52,588:INFO:            imblearn: 0.12.3
2024-09-19 16:06:52,588:INFO:   category_encoders: 2.6.3
2024-09-19 16:06:52,588:INFO:            lightgbm: 4.5.0
2024-09-19 16:06:52,588:INFO:               numba: 0.60.0
2024-09-19 16:06:52,588:INFO:            requests: 2.32.3
2024-09-19 16:06:52,588:INFO:          matplotlib: 3.7.5
2024-09-19 16:06:52,588:INFO:          scikitplot: 0.3.7
2024-09-19 16:06:52,588:INFO:         yellowbrick: 1.5
2024-09-19 16:06:52,588:INFO:              plotly: 5.24.1
2024-09-19 16:06:52,588:INFO:    plotly-resampler: Not installed
2024-09-19 16:06:52,588:INFO:             kaleido: 0.2.1
2024-09-19 16:06:52,588:INFO:           schemdraw: 0.15
2024-09-19 16:06:52,589:INFO:         statsmodels: 0.14.3
2024-09-19 16:06:52,589:INFO:              sktime: 0.26.0
2024-09-19 16:06:52,589:INFO:               tbats: 1.1.3
2024-09-19 16:06:52,589:INFO:            pmdarima: 2.0.4
2024-09-19 16:06:52,589:INFO:              psutil: 6.0.0
2024-09-19 16:06:52,589:INFO:          markupsafe: 2.1.5
2024-09-19 16:06:52,589:INFO:             pickle5: Not installed
2024-09-19 16:06:52,589:INFO:         cloudpickle: 3.0.0
2024-09-19 16:06:52,589:INFO:         deprecation: 2.1.0
2024-09-19 16:06:52,589:INFO:              xxhash: 3.5.0
2024-09-19 16:06:52,589:INFO:           wurlitzer: Not installed
2024-09-19 16:06:52,589:INFO:PyCaret optional dependencies:
2024-09-19 16:06:52,589:INFO:                shap: Not installed
2024-09-19 16:06:52,589:INFO:           interpret: Not installed
2024-09-19 16:06:52,589:INFO:                umap: Not installed
2024-09-19 16:06:52,589:INFO:     ydata_profiling: Not installed
2024-09-19 16:06:52,589:INFO:  explainerdashboard: Not installed
2024-09-19 16:06:52,589:INFO:             autoviz: Not installed
2024-09-19 16:06:52,589:INFO:           fairlearn: Not installed
2024-09-19 16:06:52,589:INFO:          deepchecks: Not installed
2024-09-19 16:06:52,589:INFO:             xgboost: Not installed
2024-09-19 16:06:52,589:INFO:            catboost: Not installed
2024-09-19 16:06:52,589:INFO:              kmodes: Not installed
2024-09-19 16:06:52,589:INFO:             mlxtend: Not installed
2024-09-19 16:06:52,589:INFO:       statsforecast: Not installed
2024-09-19 16:06:52,589:INFO:        tune_sklearn: Not installed
2024-09-19 16:06:52,589:INFO:                 ray: Not installed
2024-09-19 16:06:52,589:INFO:            hyperopt: Not installed
2024-09-19 16:06:52,590:INFO:              optuna: Not installed
2024-09-19 16:06:52,590:INFO:               skopt: Not installed
2024-09-19 16:06:52,590:INFO:              mlflow: Not installed
2024-09-19 16:06:52,590:INFO:              gradio: Not installed
2024-09-19 16:06:52,590:INFO:             fastapi: Not installed
2024-09-19 16:06:52,590:INFO:             uvicorn: Not installed
2024-09-19 16:06:52,590:INFO:              m2cgen: Not installed
2024-09-19 16:06:52,590:INFO:           evidently: Not installed
2024-09-19 16:06:52,590:INFO:               fugue: Not installed
2024-09-19 16:06:52,590:INFO:           streamlit: Not installed
2024-09-19 16:06:52,590:INFO:             prophet: Not installed
2024-09-19 16:06:52,590:INFO:None
2024-09-19 16:06:52,590:INFO:Set up data.
2024-09-19 16:06:52,604:INFO:Set up folding strategy.
2024-09-19 16:06:52,604:INFO:Set up train/test split.
2024-09-19 16:06:52,627:INFO:Set up index.
2024-09-19 16:06:52,628:INFO:Assigning column types.
2024-09-19 16:06:52,631:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-19 16:06:52,684:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-19 16:06:52,684:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 16:06:52,719:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 16:06:52,719:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 16:06:52,766:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-19 16:06:52,766:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 16:06:52,797:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 16:06:52,797:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 16:06:52,797:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-19 16:06:52,840:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 16:06:52,891:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 16:06:52,891:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 16:06:52,965:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-19 16:06:52,980:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 16:06:52,980:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 16:06:52,980:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-19 16:06:53,064:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 16:06:53,064:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 16:06:53,173:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 16:06:53,173:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 16:06:53,173:INFO:Preparing preprocessing pipeline...
2024-09-19 16:06:53,173:INFO:Set up label encoding.
2024-09-19 16:06:53,173:INFO:Set up simple imputation.
2024-09-19 16:06:53,189:INFO:Set up encoding of ordinal features.
2024-09-19 16:06:53,189:INFO:Set up encoding of categorical features.
2024-09-19 16:06:53,189:INFO:Set up feature normalization.
2024-09-19 16:06:53,454:INFO:Finished creating preprocessing pipeline.
2024-09-19 16:06:53,532:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\juran\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'campaign', 'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True...
                                    transformer=OneHotEncoder(cols=['job',
                                                                    'marital',
                                                                    'education',
                                                                    'contact',
                                                                    'month',
                                                                    'poutcome'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-09-19 16:06:53,532:INFO:Creating final display dataframe.
2024-09-19 16:06:54,271:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target           deposit
2                   Target type            Binary
3                Target mapping     no: 0, yes: 1
4           Original data shape       (11162, 16)
5        Transformed data shape       (11162, 48)
6   Transformed train set shape        (8929, 48)
7    Transformed test set shape        (2233, 48)
8              Numeric features                 5
9          Categorical features                10
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16                    Normalize              True
17             Normalize method            zscore
18               Fold Generator   StratifiedKFold
19                  Fold Number                10
20                     CPU Jobs                -1
21                      Use GPU             False
22               Log Experiment             False
23              Experiment Name  clf-default-name
24                          USI              0ae9
2024-09-19 16:06:54,358:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 16:06:54,358:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 16:06:54,436:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 16:06:54,436:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-19 16:06:54,436:INFO:setup() successfully completed in 1.86s...............
2024-09-19 16:09:08,619:INFO:Initializing get_config()
2024-09-19 16:09:08,619:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, variable=X_transformed)
2024-09-19 16:09:08,791:INFO:Variable: X returned as             age  job_management  job_housemaid  job_self-employed  job_student  ...  previous  poutcome_unknown  poutcome_failure  poutcome_success  poutcome_other
6270   0.060709        1.840575      -0.159308          -0.194663    -0.180920  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
10963 -0.191067       -0.543309       6.277158          -0.194663    -0.180920  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
9909   0.144635       -0.543309      -0.159308           5.137078    -0.180920  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
2143  -1.366022       -0.543309      -0.159308          -0.194663     5.527317  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
4869   2.662397       -0.543309      -0.159308          -0.194663    -0.180920  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
...         ...             ...            ...                ...          ...  ...       ...               ...               ...               ...             ...
6546  -0.107141       -0.543309      -0.159308          -0.194663    -0.180920  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
242    0.396411       -0.543309      -0.159308          -0.194663    -0.180920  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
6928  -0.274992       -0.543309      -0.159308          -0.194663    -0.180920  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
142   -0.274992       -0.543309      -0.159308          -0.194663    -0.180920  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
4632  -0.610694       -0.543309      -0.159308          -0.194663    -0.180920  ...  0.081272         -1.721894         -0.355133         -0.322038        4.540909

[11162 rows x 47 columns]
2024-09-19 16:09:08,791:INFO:get_config() successfully completed......................................
2024-09-19 16:09:14,344:INFO:Initializing compare_models()
2024-09-19 16:09:14,344:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Recall, n_select=3, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Recall', 'n_select': 3, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2024-09-19 16:09:14,344:INFO:Checking exceptions
2024-09-19 16:09:14,350:INFO:Preparing display monitor
2024-09-19 16:09:14,382:INFO:Initializing Logistic Regression
2024-09-19 16:09:14,382:INFO:Total runtime is 6.2068303426106775e-06 minutes
2024-09-19 16:09:14,384:INFO:SubProcess create_model() called ==================================
2024-09-19 16:09:14,384:INFO:Initializing create_model()
2024-09-19 16:09:14,384:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253E148A310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:09:14,384:INFO:Checking exceptions
2024-09-19 16:09:14,384:INFO:Importing libraries
2024-09-19 16:09:14,384:INFO:Copying training dataset
2024-09-19 16:09:14,395:INFO:Defining folds
2024-09-19 16:09:14,395:INFO:Declaring metric variables
2024-09-19 16:09:14,398:INFO:Importing untrained model
2024-09-19 16:09:14,402:INFO:Logistic Regression Imported successfully
2024-09-19 16:09:14,409:INFO:Starting cross validation
2024-09-19 16:09:14,412:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 16:09:18,723:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:18,727:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:18,727:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:18,737:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:18,737:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:18,737:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:18,747:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:18,747:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:18,753:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:18,753:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:18,758:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:18,758:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:18,758:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:18,758:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:18,768:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:18,768:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:18,768:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:18,778:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:18,785:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:18,788:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:18,788:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:18,798:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:18,809:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:18,815:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:19,100:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:19,100:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:19,100:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:19,100:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:19,110:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:19,110:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:19,131:INFO:Calculating mean and std
2024-09-19 16:09:19,132:INFO:Creating metrics dataframe
2024-09-19 16:09:19,136:INFO:Uploading results into container
2024-09-19 16:09:19,136:INFO:Uploading model into container now
2024-09-19 16:09:19,137:INFO:_master_model_container: 1
2024-09-19 16:09:19,137:INFO:_display_container: 2
2024-09-19 16:09:19,137:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-19 16:09:19,137:INFO:create_model() successfully completed......................................
2024-09-19 16:09:19,628:INFO:SubProcess create_model() end ==================================
2024-09-19 16:09:19,628:INFO:Creating metrics dataframe
2024-09-19 16:09:19,628:INFO:Initializing K Neighbors Classifier
2024-09-19 16:09:19,628:INFO:Total runtime is 0.08743405342102051 minutes
2024-09-19 16:09:19,644:INFO:SubProcess create_model() called ==================================
2024-09-19 16:09:19,644:INFO:Initializing create_model()
2024-09-19 16:09:19,644:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253E148A310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:09:19,644:INFO:Checking exceptions
2024-09-19 16:09:19,644:INFO:Importing libraries
2024-09-19 16:09:19,644:INFO:Copying training dataset
2024-09-19 16:09:19,658:INFO:Defining folds
2024-09-19 16:09:19,658:INFO:Declaring metric variables
2024-09-19 16:09:19,664:INFO:Importing untrained model
2024-09-19 16:09:19,667:INFO:K Neighbors Classifier Imported successfully
2024-09-19 16:09:19,678:INFO:Starting cross validation
2024-09-19 16:09:19,678:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 16:09:20,316:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:20,328:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:20,332:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:20,332:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:20,336:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:20,339:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:20,342:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:20,342:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:20,342:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:20,346:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:20,347:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:20,349:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:20,352:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:20,352:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:20,352:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:20,352:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:20,352:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:20,357:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:20,362:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:20,363:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:20,363:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:20,364:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:20,370:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:20,370:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:20,697:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:20,697:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:20,706:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:20,706:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:20,706:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:20,706:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:20,726:INFO:Calculating mean and std
2024-09-19 16:09:20,726:INFO:Creating metrics dataframe
2024-09-19 16:09:20,726:INFO:Uploading results into container
2024-09-19 16:09:20,726:INFO:Uploading model into container now
2024-09-19 16:09:20,726:INFO:_master_model_container: 2
2024-09-19 16:09:20,726:INFO:_display_container: 2
2024-09-19 16:09:20,726:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-09-19 16:09:20,726:INFO:create_model() successfully completed......................................
2024-09-19 16:09:21,148:INFO:SubProcess create_model() end ==================================
2024-09-19 16:09:21,148:INFO:Creating metrics dataframe
2024-09-19 16:09:21,164:INFO:Initializing Naive Bayes
2024-09-19 16:09:21,164:INFO:Total runtime is 0.11302705605824788 minutes
2024-09-19 16:09:21,179:INFO:SubProcess create_model() called ==================================
2024-09-19 16:09:21,179:INFO:Initializing create_model()
2024-09-19 16:09:21,179:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253E148A310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:09:21,179:INFO:Checking exceptions
2024-09-19 16:09:21,179:INFO:Importing libraries
2024-09-19 16:09:21,179:INFO:Copying training dataset
2024-09-19 16:09:21,193:INFO:Defining folds
2024-09-19 16:09:21,193:INFO:Declaring metric variables
2024-09-19 16:09:21,198:INFO:Importing untrained model
2024-09-19 16:09:21,200:INFO:Naive Bayes Imported successfully
2024-09-19 16:09:21,213:INFO:Starting cross validation
2024-09-19 16:09:21,213:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 16:09:21,610:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:21,620:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:21,620:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:21,630:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:21,630:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:21,630:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:21,640:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:21,640:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:21,640:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:21,640:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:21,650:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:21,653:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:21,653:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:21,653:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:21,653:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:21,653:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:21,663:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:21,663:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:21,663:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:21,663:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:21,674:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:21,675:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:21,877:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:21,887:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:21,887:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:21,887:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:21,897:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:21,897:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:21,918:INFO:Calculating mean and std
2024-09-19 16:09:21,918:INFO:Creating metrics dataframe
2024-09-19 16:09:21,918:INFO:Uploading results into container
2024-09-19 16:09:21,918:INFO:Uploading model into container now
2024-09-19 16:09:21,918:INFO:_master_model_container: 3
2024-09-19 16:09:21,918:INFO:_display_container: 2
2024-09-19 16:09:21,918:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-09-19 16:09:21,918:INFO:create_model() successfully completed......................................
2024-09-19 16:09:22,291:INFO:SubProcess create_model() end ==================================
2024-09-19 16:09:22,291:INFO:Creating metrics dataframe
2024-09-19 16:09:22,307:INFO:Initializing Decision Tree Classifier
2024-09-19 16:09:22,307:INFO:Total runtime is 0.1320777138074239 minutes
2024-09-19 16:09:22,322:INFO:SubProcess create_model() called ==================================
2024-09-19 16:09:22,322:INFO:Initializing create_model()
2024-09-19 16:09:22,322:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253E148A310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:09:22,322:INFO:Checking exceptions
2024-09-19 16:09:22,322:INFO:Importing libraries
2024-09-19 16:09:22,322:INFO:Copying training dataset
2024-09-19 16:09:22,333:INFO:Defining folds
2024-09-19 16:09:22,333:INFO:Declaring metric variables
2024-09-19 16:09:22,333:INFO:Importing untrained model
2024-09-19 16:09:22,343:INFO:Decision Tree Classifier Imported successfully
2024-09-19 16:09:22,345:INFO:Starting cross validation
2024-09-19 16:09:22,345:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 16:09:22,864:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:22,864:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:22,874:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:22,875:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:22,875:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:22,875:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:22,875:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:22,885:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:22,885:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:22,885:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:22,885:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:22,885:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:22,892:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:22,895:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:22,895:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:22,895:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:22,895:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:22,895:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:22,895:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:22,905:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:22,909:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:22,912:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:22,917:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:22,920:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:23,357:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:23,360:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:23,360:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:23,370:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:23,370:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:23,380:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:23,401:INFO:Calculating mean and std
2024-09-19 16:09:23,401:INFO:Creating metrics dataframe
2024-09-19 16:09:23,401:INFO:Uploading results into container
2024-09-19 16:09:23,401:INFO:Uploading model into container now
2024-09-19 16:09:23,401:INFO:_master_model_container: 4
2024-09-19 16:09:23,401:INFO:_display_container: 2
2024-09-19 16:09:23,401:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-09-19 16:09:23,401:INFO:create_model() successfully completed......................................
2024-09-19 16:09:23,788:INFO:SubProcess create_model() end ==================================
2024-09-19 16:09:23,788:INFO:Creating metrics dataframe
2024-09-19 16:09:23,803:INFO:Initializing SVM - Linear Kernel
2024-09-19 16:09:23,803:INFO:Total runtime is 0.15701928138732907 minutes
2024-09-19 16:09:23,803:INFO:SubProcess create_model() called ==================================
2024-09-19 16:09:23,803:INFO:Initializing create_model()
2024-09-19 16:09:23,803:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253E148A310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:09:23,803:INFO:Checking exceptions
2024-09-19 16:09:23,803:INFO:Importing libraries
2024-09-19 16:09:23,803:INFO:Copying training dataset
2024-09-19 16:09:23,803:INFO:Defining folds
2024-09-19 16:09:23,819:INFO:Declaring metric variables
2024-09-19 16:09:23,819:INFO:Importing untrained model
2024-09-19 16:09:23,826:INFO:SVM - Linear Kernel Imported successfully
2024-09-19 16:09:23,832:INFO:Starting cross validation
2024-09-19 16:09:23,832:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 16:09:24,418:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:24,425:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:24,433:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:24,442:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:24,443:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:24,443:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:24,458:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:24,458:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:24,474:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:24,475:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:24,484:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:24,484:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:24,497:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:24,497:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:24,510:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:24,515:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:24,515:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:24,525:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:24,529:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:24,530:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:24,536:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:24,536:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:24,539:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:24,546:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:24,949:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:24,960:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:24,970:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:24,980:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:24,990:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:24,990:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:25,010:INFO:Calculating mean and std
2024-09-19 16:09:25,010:INFO:Creating metrics dataframe
2024-09-19 16:09:25,010:INFO:Uploading results into container
2024-09-19 16:09:25,010:INFO:Uploading model into container now
2024-09-19 16:09:25,010:INFO:_master_model_container: 5
2024-09-19 16:09:25,010:INFO:_display_container: 2
2024-09-19 16:09:25,010:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-09-19 16:09:25,010:INFO:create_model() successfully completed......................................
2024-09-19 16:09:25,440:INFO:SubProcess create_model() end ==================================
2024-09-19 16:09:25,440:INFO:Creating metrics dataframe
2024-09-19 16:09:25,472:INFO:Initializing Ridge Classifier
2024-09-19 16:09:25,472:INFO:Total runtime is 0.1848257541656494 minutes
2024-09-19 16:09:25,487:INFO:SubProcess create_model() called ==================================
2024-09-19 16:09:25,487:INFO:Initializing create_model()
2024-09-19 16:09:25,487:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253E148A310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:09:25,487:INFO:Checking exceptions
2024-09-19 16:09:25,487:INFO:Importing libraries
2024-09-19 16:09:25,487:INFO:Copying training dataset
2024-09-19 16:09:25,500:INFO:Defining folds
2024-09-19 16:09:25,500:INFO:Declaring metric variables
2024-09-19 16:09:25,502:INFO:Importing untrained model
2024-09-19 16:09:25,509:INFO:Ridge Classifier Imported successfully
2024-09-19 16:09:25,513:INFO:Starting cross validation
2024-09-19 16:09:25,513:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 16:09:25,975:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:25,975:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:25,980:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:25,980:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:25,980:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:25,980:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:25,980:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:25,980:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:25,980:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:25,980:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:25,992:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:25,992:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:25,992:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:25,992:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:25,992:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:25,992:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:25,992:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:25,992:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:26,000:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:26,000:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:26,000:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:26,008:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:26,008:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:26,008:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:26,361:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:26,381:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:26,381:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:26,392:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:26,393:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:26,402:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:26,423:INFO:Calculating mean and std
2024-09-19 16:09:26,423:INFO:Creating metrics dataframe
2024-09-19 16:09:26,423:INFO:Uploading results into container
2024-09-19 16:09:26,423:INFO:Uploading model into container now
2024-09-19 16:09:26,423:INFO:_master_model_container: 6
2024-09-19 16:09:26,423:INFO:_display_container: 2
2024-09-19 16:09:26,423:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-09-19 16:09:26,423:INFO:create_model() successfully completed......................................
2024-09-19 16:09:26,821:INFO:SubProcess create_model() end ==================================
2024-09-19 16:09:26,821:INFO:Creating metrics dataframe
2024-09-19 16:09:26,824:INFO:Initializing Random Forest Classifier
2024-09-19 16:09:26,824:INFO:Total runtime is 0.20737076600392657 minutes
2024-09-19 16:09:26,824:INFO:SubProcess create_model() called ==================================
2024-09-19 16:09:26,824:INFO:Initializing create_model()
2024-09-19 16:09:26,824:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253E148A310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:09:26,824:INFO:Checking exceptions
2024-09-19 16:09:26,824:INFO:Importing libraries
2024-09-19 16:09:26,824:INFO:Copying training dataset
2024-09-19 16:09:26,845:INFO:Defining folds
2024-09-19 16:09:26,845:INFO:Declaring metric variables
2024-09-19 16:09:26,861:INFO:Importing untrained model
2024-09-19 16:09:26,870:INFO:Random Forest Classifier Imported successfully
2024-09-19 16:09:26,883:INFO:Starting cross validation
2024-09-19 16:09:26,883:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 16:09:28,860:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:28,870:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:28,872:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:28,873:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:28,876:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:28,880:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:28,885:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:28,889:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:28,900:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:28,900:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:28,901:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:28,906:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:28,909:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:28,911:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:28,924:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:28,926:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:28,931:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:28,933:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:28,937:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:28,941:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:28,949:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:28,998:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:29,002:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:29,011:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:29,788:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:29,790:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:29,795:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:29,800:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:29,803:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:29,813:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:29,856:INFO:Calculating mean and std
2024-09-19 16:09:29,858:INFO:Creating metrics dataframe
2024-09-19 16:09:29,858:INFO:Uploading results into container
2024-09-19 16:09:29,858:INFO:Uploading model into container now
2024-09-19 16:09:29,858:INFO:_master_model_container: 7
2024-09-19 16:09:29,858:INFO:_display_container: 2
2024-09-19 16:09:29,858:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-09-19 16:09:29,858:INFO:create_model() successfully completed......................................
2024-09-19 16:09:30,270:INFO:SubProcess create_model() end ==================================
2024-09-19 16:09:30,270:INFO:Creating metrics dataframe
2024-09-19 16:09:30,285:INFO:Initializing Quadratic Discriminant Analysis
2024-09-19 16:09:30,285:INFO:Total runtime is 0.2650500893592834 minutes
2024-09-19 16:09:30,285:INFO:SubProcess create_model() called ==================================
2024-09-19 16:09:30,285:INFO:Initializing create_model()
2024-09-19 16:09:30,285:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253E148A310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:09:30,285:INFO:Checking exceptions
2024-09-19 16:09:30,285:INFO:Importing libraries
2024-09-19 16:09:30,285:INFO:Copying training dataset
2024-09-19 16:09:30,301:INFO:Defining folds
2024-09-19 16:09:30,301:INFO:Declaring metric variables
2024-09-19 16:09:30,301:INFO:Importing untrained model
2024-09-19 16:09:30,311:INFO:Quadratic Discriminant Analysis Imported successfully
2024-09-19 16:09:30,316:INFO:Starting cross validation
2024-09-19 16:09:30,320:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 16:09:30,691:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 16:09:30,696:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 16:09:30,700:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 16:09:30,700:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 16:09:30,709:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 16:09:30,715:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 16:09:30,717:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 16:09:30,725:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 16:09:30,791:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:30,799:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:30,799:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:30,799:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:30,809:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:30,809:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:30,809:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:30,809:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:30,809:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:30,809:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:30,809:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:30,820:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:30,820:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:30,820:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:30,824:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:30,825:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:30,825:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:30,825:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:30,825:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:30,830:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:30,830:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:30,830:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:30,830:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:30,846:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:31,143:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 16:09:31,149:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 16:09:31,272:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:31,272:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:31,282:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:31,282:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:31,292:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:31,292:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:31,313:INFO:Calculating mean and std
2024-09-19 16:09:31,313:INFO:Creating metrics dataframe
2024-09-19 16:09:31,313:INFO:Uploading results into container
2024-09-19 16:09:31,313:INFO:Uploading model into container now
2024-09-19 16:09:31,313:INFO:_master_model_container: 8
2024-09-19 16:09:31,313:INFO:_display_container: 2
2024-09-19 16:09:31,313:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-09-19 16:09:31,313:INFO:create_model() successfully completed......................................
2024-09-19 16:09:31,727:INFO:SubProcess create_model() end ==================================
2024-09-19 16:09:31,727:INFO:Creating metrics dataframe
2024-09-19 16:09:31,738:INFO:Initializing Ada Boost Classifier
2024-09-19 16:09:31,738:INFO:Total runtime is 0.28926031589508056 minutes
2024-09-19 16:09:31,741:INFO:SubProcess create_model() called ==================================
2024-09-19 16:09:31,741:INFO:Initializing create_model()
2024-09-19 16:09:31,741:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253E148A310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:09:31,742:INFO:Checking exceptions
2024-09-19 16:09:31,742:INFO:Importing libraries
2024-09-19 16:09:31,742:INFO:Copying training dataset
2024-09-19 16:09:31,748:INFO:Defining folds
2024-09-19 16:09:31,748:INFO:Declaring metric variables
2024-09-19 16:09:31,752:INFO:Importing untrained model
2024-09-19 16:09:31,756:INFO:Ada Boost Classifier Imported successfully
2024-09-19 16:09:31,765:INFO:Starting cross validation
2024-09-19 16:09:31,765:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 16:09:32,111:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 16:09:32,119:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 16:09:32,122:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 16:09:32,125:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 16:09:32,130:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 16:09:32,141:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 16:09:32,143:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 16:09:32,150:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 16:09:32,830:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:32,830:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:32,830:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:32,841:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:32,850:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:32,850:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:32,850:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:32,858:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:32,858:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:32,860:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:32,860:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:32,860:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:32,860:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:32,860:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:32,870:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:32,870:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:32,870:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:32,881:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:32,882:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:32,884:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:32,884:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:32,891:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:32,891:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:33,117:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 16:09:33,159:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 16:09:33,829:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:33,839:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:33,850:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:33,850:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:33,860:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:33,870:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:33,900:INFO:Calculating mean and std
2024-09-19 16:09:33,900:INFO:Creating metrics dataframe
2024-09-19 16:09:33,900:INFO:Uploading results into container
2024-09-19 16:09:33,900:INFO:Uploading model into container now
2024-09-19 16:09:33,900:INFO:_master_model_container: 9
2024-09-19 16:09:33,900:INFO:_display_container: 2
2024-09-19 16:09:33,900:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-09-19 16:09:33,900:INFO:create_model() successfully completed......................................
2024-09-19 16:09:34,341:INFO:SubProcess create_model() end ==================================
2024-09-19 16:09:34,341:INFO:Creating metrics dataframe
2024-09-19 16:09:34,375:INFO:Initializing Gradient Boosting Classifier
2024-09-19 16:09:34,375:INFO:Total runtime is 0.33320785363515215 minutes
2024-09-19 16:09:34,375:INFO:SubProcess create_model() called ==================================
2024-09-19 16:09:34,375:INFO:Initializing create_model()
2024-09-19 16:09:34,375:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253E148A310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:09:34,375:INFO:Checking exceptions
2024-09-19 16:09:34,375:INFO:Importing libraries
2024-09-19 16:09:34,375:INFO:Copying training dataset
2024-09-19 16:09:34,400:INFO:Defining folds
2024-09-19 16:09:34,401:INFO:Declaring metric variables
2024-09-19 16:09:34,401:INFO:Importing untrained model
2024-09-19 16:09:34,408:INFO:Gradient Boosting Classifier Imported successfully
2024-09-19 16:09:34,413:INFO:Starting cross validation
2024-09-19 16:09:34,413:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 16:09:36,441:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:36,441:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:36,451:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:36,458:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:36,458:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:36,462:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:36,462:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:36,462:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:36,462:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:36,462:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:36,472:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:36,475:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:36,475:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:36,475:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:36,482:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:36,482:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:36,493:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:36,495:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:36,502:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:36,504:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:36,505:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:36,513:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:36,513:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:38,298:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:38,320:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:38,344:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:38,362:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:38,362:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:38,372:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:38,392:INFO:Calculating mean and std
2024-09-19 16:09:38,393:INFO:Creating metrics dataframe
2024-09-19 16:09:38,393:INFO:Uploading results into container
2024-09-19 16:09:38,393:INFO:Uploading model into container now
2024-09-19 16:09:38,393:INFO:_master_model_container: 10
2024-09-19 16:09:38,393:INFO:_display_container: 2
2024-09-19 16:09:38,393:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-09-19 16:09:38,393:INFO:create_model() successfully completed......................................
2024-09-19 16:09:38,786:INFO:SubProcess create_model() end ==================================
2024-09-19 16:09:38,786:INFO:Creating metrics dataframe
2024-09-19 16:09:38,802:INFO:Initializing Linear Discriminant Analysis
2024-09-19 16:09:38,802:INFO:Total runtime is 0.40699774424235025 minutes
2024-09-19 16:09:38,802:INFO:SubProcess create_model() called ==================================
2024-09-19 16:09:38,807:INFO:Initializing create_model()
2024-09-19 16:09:38,807:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253E148A310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:09:38,807:INFO:Checking exceptions
2024-09-19 16:09:38,807:INFO:Importing libraries
2024-09-19 16:09:38,807:INFO:Copying training dataset
2024-09-19 16:09:38,818:INFO:Defining folds
2024-09-19 16:09:38,818:INFO:Declaring metric variables
2024-09-19 16:09:38,818:INFO:Importing untrained model
2024-09-19 16:09:38,827:INFO:Linear Discriminant Analysis Imported successfully
2024-09-19 16:09:38,828:INFO:Starting cross validation
2024-09-19 16:09:38,828:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 16:09:39,315:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:39,325:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:39,325:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:39,335:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:39,341:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:39,341:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:39,341:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:39,345:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:39,345:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:39,345:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:39,355:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:39,355:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:39,357:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:39,357:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:39,365:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:39,366:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:39,366:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:39,366:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:39,366:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:39,366:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:39,376:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:39,376:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:39,376:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:39,376:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:39,706:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:39,721:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:39,727:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:39,747:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:39,757:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:39,757:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:39,778:INFO:Calculating mean and std
2024-09-19 16:09:39,778:INFO:Creating metrics dataframe
2024-09-19 16:09:39,778:INFO:Uploading results into container
2024-09-19 16:09:39,778:INFO:Uploading model into container now
2024-09-19 16:09:39,778:INFO:_master_model_container: 11
2024-09-19 16:09:39,778:INFO:_display_container: 2
2024-09-19 16:09:39,778:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-09-19 16:09:39,778:INFO:create_model() successfully completed......................................
2024-09-19 16:09:40,152:INFO:SubProcess create_model() end ==================================
2024-09-19 16:09:40,153:INFO:Creating metrics dataframe
2024-09-19 16:09:40,172:INFO:Initializing Extra Trees Classifier
2024-09-19 16:09:40,172:INFO:Total runtime is 0.42983823219935097 minutes
2024-09-19 16:09:40,188:INFO:SubProcess create_model() called ==================================
2024-09-19 16:09:40,188:INFO:Initializing create_model()
2024-09-19 16:09:40,188:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253E148A310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:09:40,188:INFO:Checking exceptions
2024-09-19 16:09:40,188:INFO:Importing libraries
2024-09-19 16:09:40,188:INFO:Copying training dataset
2024-09-19 16:09:40,203:INFO:Defining folds
2024-09-19 16:09:40,203:INFO:Declaring metric variables
2024-09-19 16:09:40,209:INFO:Importing untrained model
2024-09-19 16:09:40,211:INFO:Extra Trees Classifier Imported successfully
2024-09-19 16:09:40,211:INFO:Starting cross validation
2024-09-19 16:09:40,223:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 16:09:42,404:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:42,404:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:42,408:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:42,413:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:42,413:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:42,413:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:42,413:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:42,424:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:42,424:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:42,424:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:42,424:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:42,457:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:42,507:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:42,508:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:42,519:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:42,519:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:42,530:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:42,531:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:42,548:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:42,556:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:42,559:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:42,559:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:42,569:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:43,408:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:43,412:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:43,433:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:43,433:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:43,443:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:43,463:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:43,484:INFO:Calculating mean and std
2024-09-19 16:09:43,484:INFO:Creating metrics dataframe
2024-09-19 16:09:43,487:INFO:Uploading results into container
2024-09-19 16:09:43,487:INFO:Uploading model into container now
2024-09-19 16:09:43,490:INFO:_master_model_container: 12
2024-09-19 16:09:43,490:INFO:_display_container: 2
2024-09-19 16:09:43,491:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-09-19 16:09:43,492:INFO:create_model() successfully completed......................................
2024-09-19 16:09:43,908:INFO:SubProcess create_model() end ==================================
2024-09-19 16:09:43,908:INFO:Creating metrics dataframe
2024-09-19 16:09:43,924:INFO:Initializing Light Gradient Boosting Machine
2024-09-19 16:09:43,924:INFO:Total runtime is 0.49236970742543534 minutes
2024-09-19 16:09:43,937:INFO:SubProcess create_model() called ==================================
2024-09-19 16:09:43,938:INFO:Initializing create_model()
2024-09-19 16:09:43,938:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253E148A310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:09:43,938:INFO:Checking exceptions
2024-09-19 16:09:43,938:INFO:Importing libraries
2024-09-19 16:09:43,938:INFO:Copying training dataset
2024-09-19 16:09:43,948:INFO:Defining folds
2024-09-19 16:09:43,948:INFO:Declaring metric variables
2024-09-19 16:09:43,958:INFO:Importing untrained model
2024-09-19 16:09:43,959:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-19 16:09:43,963:INFO:Starting cross validation
2024-09-19 16:09:43,970:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 16:09:45,123:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:45,133:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:45,133:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:45,143:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:45,143:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:45,153:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:45,159:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:45,164:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:45,164:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:45,177:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:45,187:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:45,228:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:45,242:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:45,248:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:45,309:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:45,329:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:45,342:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:45,392:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:45,402:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:45,411:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:45,534:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:45,547:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:45,557:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:45,780:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:45,790:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:45,800:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:45,810:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:45,820:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:45,831:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:45,851:INFO:Calculating mean and std
2024-09-19 16:09:45,851:INFO:Creating metrics dataframe
2024-09-19 16:09:45,851:INFO:Uploading results into container
2024-09-19 16:09:45,851:INFO:Uploading model into container now
2024-09-19 16:09:45,858:INFO:_master_model_container: 13
2024-09-19 16:09:45,858:INFO:_display_container: 2
2024-09-19 16:09:45,858:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-19 16:09:45,858:INFO:create_model() successfully completed......................................
2024-09-19 16:09:46,357:INFO:SubProcess create_model() end ==================================
2024-09-19 16:09:46,357:INFO:Creating metrics dataframe
2024-09-19 16:09:46,400:INFO:Initializing Dummy Classifier
2024-09-19 16:09:46,401:INFO:Total runtime is 0.5336402297019958 minutes
2024-09-19 16:09:46,410:INFO:SubProcess create_model() called ==================================
2024-09-19 16:09:46,411:INFO:Initializing create_model()
2024-09-19 16:09:46,411:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253E148A310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:09:46,411:INFO:Checking exceptions
2024-09-19 16:09:46,412:INFO:Importing libraries
2024-09-19 16:09:46,412:INFO:Copying training dataset
2024-09-19 16:09:46,427:INFO:Defining folds
2024-09-19 16:09:46,427:INFO:Declaring metric variables
2024-09-19 16:09:46,429:INFO:Importing untrained model
2024-09-19 16:09:46,436:INFO:Dummy Classifier Imported successfully
2024-09-19 16:09:46,446:INFO:Starting cross validation
2024-09-19 16:09:46,446:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 16:09:46,914:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:46,914:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:46,914:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:46,914:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:46,930:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:46,930:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:46,930:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:46,930:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:46,930:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:46,930:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:46,930:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:46,930:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 16:09:46,940:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:46,940:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:46,940:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 16:09:46,940:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 16:09:46,940:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 16:09:46,940:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:46,940:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:46,940:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:46,940:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:46,940:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 16:09:46,940:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:46,940:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:46,940:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 16:09:46,940:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:46,940:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:46,940:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 16:09:46,940:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:46,956:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 16:09:46,957:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:46,962:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:47,271:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:47,281:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:47,281:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 16:09:47,291:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:47,291:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:47,302:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:47,302:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 16:09:47,312:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:09:47,332:INFO:Calculating mean and std
2024-09-19 16:09:47,332:INFO:Creating metrics dataframe
2024-09-19 16:09:47,332:INFO:Uploading results into container
2024-09-19 16:09:47,332:INFO:Uploading model into container now
2024-09-19 16:09:47,332:INFO:_master_model_container: 14
2024-09-19 16:09:47,332:INFO:_display_container: 2
2024-09-19 16:09:47,332:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-09-19 16:09:47,332:INFO:create_model() successfully completed......................................
2024-09-19 16:09:47,812:INFO:SubProcess create_model() end ==================================
2024-09-19 16:09:47,812:INFO:Creating metrics dataframe
2024-09-19 16:09:47,868:INFO:Initializing create_model()
2024-09-19 16:09:47,868:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:09:47,869:INFO:Checking exceptions
2024-09-19 16:09:47,872:INFO:Importing libraries
2024-09-19 16:09:47,872:INFO:Copying training dataset
2024-09-19 16:09:47,882:INFO:Defining folds
2024-09-19 16:09:47,882:INFO:Declaring metric variables
2024-09-19 16:09:47,882:INFO:Importing untrained model
2024-09-19 16:09:47,882:INFO:Declaring custom model
2024-09-19 16:09:47,883:INFO:Gradient Boosting Classifier Imported successfully
2024-09-19 16:09:47,885:INFO:Cross validation set to False
2024-09-19 16:09:47,885:INFO:Fitting Model
2024-09-19 16:09:49,497:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-09-19 16:09:49,497:INFO:create_model() successfully completed......................................
2024-09-19 16:09:49,915:INFO:Initializing create_model()
2024-09-19 16:09:49,915:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:09:49,915:INFO:Checking exceptions
2024-09-19 16:09:49,917:INFO:Importing libraries
2024-09-19 16:09:49,917:INFO:Copying training dataset
2024-09-19 16:09:49,922:INFO:Defining folds
2024-09-19 16:09:49,923:INFO:Declaring metric variables
2024-09-19 16:09:49,923:INFO:Importing untrained model
2024-09-19 16:09:49,923:INFO:Declaring custom model
2024-09-19 16:09:49,923:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-19 16:09:49,925:INFO:Cross validation set to False
2024-09-19 16:09:49,926:INFO:Fitting Model
2024-09-19 16:09:50,178:INFO:[LightGBM] [Info] Number of positive: 4231, number of negative: 4698
2024-09-19 16:09:50,178:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000746 seconds.
2024-09-19 16:09:50,178:INFO:You can set `force_row_wise=true` to remove the overhead.
2024-09-19 16:09:50,178:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2024-09-19 16:09:50,178:INFO:[LightGBM] [Info] Total Bins 538
2024-09-19 16:09:50,178:INFO:[LightGBM] [Info] Number of data points in the train set: 8929, number of used features: 47
2024-09-19 16:09:50,189:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.473849 -> initscore=-0.104699
2024-09-19 16:09:50,190:INFO:[LightGBM] [Info] Start training from score -0.104699
2024-09-19 16:09:50,265:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-19 16:09:50,265:INFO:create_model() successfully completed......................................
2024-09-19 16:09:50,710:INFO:Initializing create_model()
2024-09-19 16:09:50,710:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:09:50,710:INFO:Checking exceptions
2024-09-19 16:09:50,712:INFO:Importing libraries
2024-09-19 16:09:50,713:INFO:Copying training dataset
2024-09-19 16:09:50,724:INFO:Defining folds
2024-09-19 16:09:50,724:INFO:Declaring metric variables
2024-09-19 16:09:50,725:INFO:Importing untrained model
2024-09-19 16:09:50,725:INFO:Declaring custom model
2024-09-19 16:09:50,726:INFO:Random Forest Classifier Imported successfully
2024-09-19 16:09:50,729:INFO:Cross validation set to False
2024-09-19 16:09:50,729:INFO:Fitting Model
2024-09-19 16:09:51,415:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-09-19 16:09:51,415:INFO:create_model() successfully completed......................................
2024-09-19 16:09:51,938:INFO:_master_model_container: 14
2024-09-19 16:09:51,938:INFO:_display_container: 2
2024-09-19 16:09:51,939:INFO:[GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)]
2024-09-19 16:09:51,939:INFO:compare_models() successfully completed......................................
2024-09-19 16:10:35,543:INFO:Initializing plot_model()
2024-09-19 16:10:35,543:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=[GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)], plot=confusion_matrix, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-09-19 16:10:35,543:INFO:Checking exceptions
2024-09-19 16:13:55,921:INFO:Initializing compare_models()
2024-09-19 16:13:55,921:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Recall, n_select=3, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Recall', 'n_select': 3, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2024-09-19 16:13:55,922:INFO:Checking exceptions
2024-09-19 16:13:55,926:INFO:Preparing display monitor
2024-09-19 16:13:55,951:INFO:Initializing Logistic Regression
2024-09-19 16:13:55,952:INFO:Total runtime is 8.408228556315104e-06 minutes
2024-09-19 16:13:55,956:INFO:SubProcess create_model() called ==================================
2024-09-19 16:13:55,958:INFO:Initializing create_model()
2024-09-19 16:13:55,958:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253E0E07250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:13:55,958:INFO:Checking exceptions
2024-09-19 16:13:55,958:INFO:Importing libraries
2024-09-19 16:13:55,958:INFO:Copying training dataset
2024-09-19 16:13:55,964:INFO:Defining folds
2024-09-19 16:13:55,964:INFO:Declaring metric variables
2024-09-19 16:13:55,968:INFO:Importing untrained model
2024-09-19 16:13:55,968:INFO:Logistic Regression Imported successfully
2024-09-19 16:13:55,982:INFO:Starting cross validation
2024-09-19 16:13:55,984:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 16:13:56,397:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:56,407:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:56,407:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:56,407:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:56,407:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:56,407:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:56,407:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:56,407:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:56,407:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:56,422:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:56,422:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:56,422:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:56,422:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:56,422:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:56,422:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:56,422:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:56,422:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:56,422:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:56,422:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:56,422:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:56,422:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:56,422:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:56,443:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:56,451:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:56,678:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:56,681:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:56,693:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:56,693:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:56,698:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:56,703:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:56,722:INFO:Calculating mean and std
2024-09-19 16:13:56,723:INFO:Creating metrics dataframe
2024-09-19 16:13:56,726:INFO:Uploading results into container
2024-09-19 16:13:56,727:INFO:Uploading model into container now
2024-09-19 16:13:56,727:INFO:_master_model_container: 15
2024-09-19 16:13:56,727:INFO:_display_container: 3
2024-09-19 16:13:56,729:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-19 16:13:56,729:INFO:create_model() successfully completed......................................
2024-09-19 16:13:57,125:INFO:SubProcess create_model() end ==================================
2024-09-19 16:13:57,125:INFO:Creating metrics dataframe
2024-09-19 16:13:57,141:INFO:Initializing K Neighbors Classifier
2024-09-19 16:13:57,141:INFO:Total runtime is 0.019818596045176187 minutes
2024-09-19 16:13:57,141:INFO:SubProcess create_model() called ==================================
2024-09-19 16:13:57,141:INFO:Initializing create_model()
2024-09-19 16:13:57,141:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253E0E07250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:13:57,141:INFO:Checking exceptions
2024-09-19 16:13:57,141:INFO:Importing libraries
2024-09-19 16:13:57,141:INFO:Copying training dataset
2024-09-19 16:13:57,154:INFO:Defining folds
2024-09-19 16:13:57,154:INFO:Declaring metric variables
2024-09-19 16:13:57,154:INFO:Importing untrained model
2024-09-19 16:13:57,163:INFO:K Neighbors Classifier Imported successfully
2024-09-19 16:13:57,163:INFO:Starting cross validation
2024-09-19 16:13:57,163:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 16:13:57,740:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:57,750:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:57,751:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:57,755:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:57,759:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:57,762:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:57,763:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:57,764:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:57,765:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:57,768:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:57,769:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:57,770:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:57,771:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:57,772:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:57,773:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:57,775:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:57,779:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:57,779:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:57,783:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:57,783:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:57,787:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:57,788:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:57,791:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:57,796:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:58,091:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:58,101:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:58,101:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:58,101:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:58,111:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:58,111:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:58,132:INFO:Calculating mean and std
2024-09-19 16:13:58,132:INFO:Creating metrics dataframe
2024-09-19 16:13:58,132:INFO:Uploading results into container
2024-09-19 16:13:58,132:INFO:Uploading model into container now
2024-09-19 16:13:58,132:INFO:_master_model_container: 16
2024-09-19 16:13:58,132:INFO:_display_container: 3
2024-09-19 16:13:58,132:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-09-19 16:13:58,132:INFO:create_model() successfully completed......................................
2024-09-19 16:13:58,454:INFO:SubProcess create_model() end ==================================
2024-09-19 16:13:58,454:INFO:Creating metrics dataframe
2024-09-19 16:13:58,461:INFO:Initializing Naive Bayes
2024-09-19 16:13:58,461:INFO:Total runtime is 0.04182990392049153 minutes
2024-09-19 16:13:58,464:INFO:SubProcess create_model() called ==================================
2024-09-19 16:13:58,464:INFO:Initializing create_model()
2024-09-19 16:13:58,465:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253E0E07250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:13:58,465:INFO:Checking exceptions
2024-09-19 16:13:58,465:INFO:Importing libraries
2024-09-19 16:13:58,465:INFO:Copying training dataset
2024-09-19 16:13:58,469:INFO:Defining folds
2024-09-19 16:13:58,475:INFO:Declaring metric variables
2024-09-19 16:13:58,490:INFO:Importing untrained model
2024-09-19 16:13:58,502:INFO:Naive Bayes Imported successfully
2024-09-19 16:13:58,513:INFO:Starting cross validation
2024-09-19 16:13:58,513:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 16:13:58,916:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:58,916:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:58,926:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:58,928:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:58,929:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:58,931:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:58,931:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:58,935:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:58,935:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:58,937:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:58,938:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:58,938:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:58,939:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:58,942:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:58,942:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:58,945:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:58,947:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:58,948:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:58,948:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:58,952:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:58,952:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:58,955:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:58,958:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:58,959:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:59,257:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:59,268:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:59,268:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:59,275:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:59,278:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:59,289:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:13:59,309:INFO:Calculating mean and std
2024-09-19 16:13:59,310:INFO:Creating metrics dataframe
2024-09-19 16:13:59,314:INFO:Uploading results into container
2024-09-19 16:13:59,316:INFO:Uploading model into container now
2024-09-19 16:13:59,316:INFO:_master_model_container: 17
2024-09-19 16:13:59,316:INFO:_display_container: 3
2024-09-19 16:13:59,317:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-09-19 16:13:59,317:INFO:create_model() successfully completed......................................
2024-09-19 16:13:59,683:INFO:SubProcess create_model() end ==================================
2024-09-19 16:13:59,683:INFO:Creating metrics dataframe
2024-09-19 16:13:59,691:INFO:Initializing Decision Tree Classifier
2024-09-19 16:13:59,691:INFO:Total runtime is 0.06232875188191731 minutes
2024-09-19 16:13:59,694:INFO:SubProcess create_model() called ==================================
2024-09-19 16:13:59,694:INFO:Initializing create_model()
2024-09-19 16:13:59,694:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253E0E07250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:13:59,694:INFO:Checking exceptions
2024-09-19 16:13:59,694:INFO:Importing libraries
2024-09-19 16:13:59,695:INFO:Copying training dataset
2024-09-19 16:13:59,699:INFO:Defining folds
2024-09-19 16:13:59,699:INFO:Declaring metric variables
2024-09-19 16:13:59,702:INFO:Importing untrained model
2024-09-19 16:13:59,705:INFO:Decision Tree Classifier Imported successfully
2024-09-19 16:13:59,712:INFO:Starting cross validation
2024-09-19 16:13:59,713:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 16:14:00,224:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:00,226:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:00,227:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:00,230:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:00,235:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:00,235:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:00,235:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:00,235:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:00,242:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:00,242:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:00,244:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:00,245:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:00,246:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:00,246:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:00,248:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:00,250:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:00,252:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:00,252:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:00,255:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:00,255:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:00,262:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:00,263:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:00,265:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:00,266:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:00,514:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:00,525:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:00,529:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:00,531:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:00,535:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:00,545:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:00,556:INFO:Calculating mean and std
2024-09-19 16:14:00,557:INFO:Creating metrics dataframe
2024-09-19 16:14:00,559:INFO:Uploading results into container
2024-09-19 16:14:00,559:INFO:Uploading model into container now
2024-09-19 16:14:00,560:INFO:_master_model_container: 18
2024-09-19 16:14:00,560:INFO:_display_container: 3
2024-09-19 16:14:00,560:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-09-19 16:14:00,560:INFO:create_model() successfully completed......................................
2024-09-19 16:14:00,906:INFO:SubProcess create_model() end ==================================
2024-09-19 16:14:00,906:INFO:Creating metrics dataframe
2024-09-19 16:14:00,908:INFO:Initializing SVM - Linear Kernel
2024-09-19 16:14:00,908:INFO:Total runtime is 0.08260640700658162 minutes
2024-09-19 16:14:00,908:INFO:SubProcess create_model() called ==================================
2024-09-19 16:14:00,908:INFO:Initializing create_model()
2024-09-19 16:14:00,908:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253E0E07250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:14:00,908:INFO:Checking exceptions
2024-09-19 16:14:00,908:INFO:Importing libraries
2024-09-19 16:14:00,908:INFO:Copying training dataset
2024-09-19 16:14:00,908:INFO:Defining folds
2024-09-19 16:14:00,908:INFO:Declaring metric variables
2024-09-19 16:14:00,925:INFO:Importing untrained model
2024-09-19 16:14:00,928:INFO:SVM - Linear Kernel Imported successfully
2024-09-19 16:14:00,932:INFO:Starting cross validation
2024-09-19 16:14:00,932:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 16:14:01,475:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:01,480:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:01,480:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:01,492:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:01,497:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:01,503:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:01,509:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:01,520:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:01,530:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:01,532:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:01,538:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:01,542:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:01,548:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:01,553:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:01,553:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:01,558:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:01,560:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:01,560:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:01,570:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:01,575:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:01,575:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:01,581:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:01,581:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:01,592:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:01,859:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:01,866:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:01,872:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:01,884:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:01,890:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:01,892:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:01,910:INFO:Calculating mean and std
2024-09-19 16:14:01,911:INFO:Creating metrics dataframe
2024-09-19 16:14:01,911:INFO:Uploading results into container
2024-09-19 16:14:01,911:INFO:Uploading model into container now
2024-09-19 16:14:01,911:INFO:_master_model_container: 19
2024-09-19 16:14:01,911:INFO:_display_container: 3
2024-09-19 16:14:01,911:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-09-19 16:14:01,911:INFO:create_model() successfully completed......................................
2024-09-19 16:14:02,225:INFO:SubProcess create_model() end ==================================
2024-09-19 16:14:02,225:INFO:Creating metrics dataframe
2024-09-19 16:14:02,242:INFO:Initializing Ridge Classifier
2024-09-19 16:14:02,242:INFO:Total runtime is 0.10483736594518026 minutes
2024-09-19 16:14:02,242:INFO:SubProcess create_model() called ==================================
2024-09-19 16:14:02,242:INFO:Initializing create_model()
2024-09-19 16:14:02,242:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253E0E07250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:14:02,242:INFO:Checking exceptions
2024-09-19 16:14:02,242:INFO:Importing libraries
2024-09-19 16:14:02,242:INFO:Copying training dataset
2024-09-19 16:14:02,242:INFO:Defining folds
2024-09-19 16:14:02,242:INFO:Declaring metric variables
2024-09-19 16:14:02,242:INFO:Importing untrained model
2024-09-19 16:14:02,258:INFO:Ridge Classifier Imported successfully
2024-09-19 16:14:02,264:INFO:Starting cross validation
2024-09-19 16:14:02,264:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 16:14:02,675:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:02,675:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:02,675:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:02,680:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:02,684:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:02,684:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:02,688:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:02,688:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:02,688:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:02,688:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:02,688:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:02,693:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:02,696:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:02,698:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:02,698:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:02,698:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:02,699:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:02,700:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:02,703:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:02,704:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:02,708:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:02,711:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:02,714:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:02,726:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:02,977:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:02,983:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:02,984:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:02,989:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:02,989:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:02,992:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:03,006:INFO:Calculating mean and std
2024-09-19 16:14:03,006:INFO:Creating metrics dataframe
2024-09-19 16:14:03,010:INFO:Uploading results into container
2024-09-19 16:14:03,010:INFO:Uploading model into container now
2024-09-19 16:14:03,011:INFO:_master_model_container: 20
2024-09-19 16:14:03,011:INFO:_display_container: 3
2024-09-19 16:14:03,011:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-09-19 16:14:03,011:INFO:create_model() successfully completed......................................
2024-09-19 16:14:03,314:INFO:SubProcess create_model() end ==================================
2024-09-19 16:14:03,314:INFO:Creating metrics dataframe
2024-09-19 16:14:03,327:INFO:Initializing Random Forest Classifier
2024-09-19 16:14:03,327:INFO:Total runtime is 0.12293155988057454 minutes
2024-09-19 16:14:03,331:INFO:SubProcess create_model() called ==================================
2024-09-19 16:14:03,332:INFO:Initializing create_model()
2024-09-19 16:14:03,332:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253E0E07250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:14:03,332:INFO:Checking exceptions
2024-09-19 16:14:03,332:INFO:Importing libraries
2024-09-19 16:14:03,332:INFO:Copying training dataset
2024-09-19 16:14:03,332:INFO:Defining folds
2024-09-19 16:14:03,332:INFO:Declaring metric variables
2024-09-19 16:14:03,341:INFO:Importing untrained model
2024-09-19 16:14:03,344:INFO:Random Forest Classifier Imported successfully
2024-09-19 16:14:03,349:INFO:Starting cross validation
2024-09-19 16:14:03,349:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 16:14:05,207:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:05,207:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:05,216:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:05,216:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:05,216:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:05,227:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:05,234:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:05,234:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:05,240:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:05,242:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:05,243:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:05,258:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:05,280:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:05,292:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:05,293:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:05,294:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:05,299:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:05,304:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:05,304:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:05,308:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:05,312:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:05,335:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:05,345:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:05,345:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:05,951:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:05,951:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:05,962:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:05,962:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:05,962:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:05,972:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:05,992:INFO:Calculating mean and std
2024-09-19 16:14:05,992:INFO:Creating metrics dataframe
2024-09-19 16:14:05,992:INFO:Uploading results into container
2024-09-19 16:14:05,992:INFO:Uploading model into container now
2024-09-19 16:14:05,992:INFO:_master_model_container: 21
2024-09-19 16:14:05,992:INFO:_display_container: 3
2024-09-19 16:14:05,992:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-09-19 16:14:05,992:INFO:create_model() successfully completed......................................
2024-09-19 16:14:06,293:INFO:SubProcess create_model() end ==================================
2024-09-19 16:14:06,293:INFO:Creating metrics dataframe
2024-09-19 16:14:06,301:INFO:Initializing Quadratic Discriminant Analysis
2024-09-19 16:14:06,301:INFO:Total runtime is 0.17249752283096315 minutes
2024-09-19 16:14:06,303:INFO:SubProcess create_model() called ==================================
2024-09-19 16:14:06,304:INFO:Initializing create_model()
2024-09-19 16:14:06,304:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253E0E07250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:14:06,304:INFO:Checking exceptions
2024-09-19 16:14:06,304:INFO:Importing libraries
2024-09-19 16:14:06,304:INFO:Copying training dataset
2024-09-19 16:14:06,310:INFO:Defining folds
2024-09-19 16:14:06,310:INFO:Declaring metric variables
2024-09-19 16:14:06,313:INFO:Importing untrained model
2024-09-19 16:14:06,314:INFO:Quadratic Discriminant Analysis Imported successfully
2024-09-19 16:14:06,314:INFO:Starting cross validation
2024-09-19 16:14:06,324:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 16:14:06,615:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 16:14:06,625:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 16:14:06,635:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 16:14:06,645:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 16:14:06,656:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 16:14:06,656:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 16:14:06,666:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 16:14:06,676:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 16:14:06,717:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:06,724:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:06,730:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:06,733:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:06,739:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:06,739:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:06,742:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:06,743:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:06,750:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:06,751:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:06,752:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:06,753:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:06,759:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:06,759:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:06,759:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:06,759:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:06,759:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:06,759:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:06,769:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:06,776:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:06,776:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:06,776:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:06,784:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:06,784:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:06,936:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 16:14:06,967:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-19 16:14:06,987:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:06,997:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:06,997:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:07,018:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:07,028:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:07,028:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:07,048:INFO:Calculating mean and std
2024-09-19 16:14:07,048:INFO:Creating metrics dataframe
2024-09-19 16:14:07,048:INFO:Uploading results into container
2024-09-19 16:14:07,048:INFO:Uploading model into container now
2024-09-19 16:14:07,048:INFO:_master_model_container: 22
2024-09-19 16:14:07,048:INFO:_display_container: 3
2024-09-19 16:14:07,048:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-09-19 16:14:07,048:INFO:create_model() successfully completed......................................
2024-09-19 16:14:07,337:INFO:SubProcess create_model() end ==================================
2024-09-19 16:14:07,337:INFO:Creating metrics dataframe
2024-09-19 16:14:07,352:INFO:Initializing Ada Boost Classifier
2024-09-19 16:14:07,352:INFO:Total runtime is 0.19001362323760987 minutes
2024-09-19 16:14:07,352:INFO:SubProcess create_model() called ==================================
2024-09-19 16:14:07,352:INFO:Initializing create_model()
2024-09-19 16:14:07,352:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253E0E07250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:14:07,352:INFO:Checking exceptions
2024-09-19 16:14:07,352:INFO:Importing libraries
2024-09-19 16:14:07,352:INFO:Copying training dataset
2024-09-19 16:14:07,352:INFO:Defining folds
2024-09-19 16:14:07,352:INFO:Declaring metric variables
2024-09-19 16:14:07,368:INFO:Importing untrained model
2024-09-19 16:14:07,368:INFO:Ada Boost Classifier Imported successfully
2024-09-19 16:14:07,376:INFO:Starting cross validation
2024-09-19 16:14:07,378:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 16:14:07,661:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 16:14:07,681:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 16:14:07,681:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 16:14:07,681:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 16:14:07,681:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 16:14:07,702:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 16:14:07,702:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 16:14:07,712:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 16:14:08,341:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:08,347:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:08,347:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:08,358:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:08,359:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:08,360:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:08,362:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:08,363:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:08,367:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:08,367:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:08,367:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:08,367:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:08,367:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:08,377:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:08,377:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:08,377:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:08,377:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:08,388:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:08,388:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:08,403:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:08,403:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:08,408:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:08,408:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:08,418:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:08,571:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 16:14:08,571:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-19 16:14:08,993:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:08,993:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:09,004:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:09,006:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:09,007:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:09,007:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:09,023:INFO:Calculating mean and std
2024-09-19 16:14:09,023:INFO:Creating metrics dataframe
2024-09-19 16:14:09,023:INFO:Uploading results into container
2024-09-19 16:14:09,023:INFO:Uploading model into container now
2024-09-19 16:14:09,023:INFO:_master_model_container: 23
2024-09-19 16:14:09,023:INFO:_display_container: 3
2024-09-19 16:14:09,023:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-09-19 16:14:09,023:INFO:create_model() successfully completed......................................
2024-09-19 16:14:09,324:INFO:SubProcess create_model() end ==================================
2024-09-19 16:14:09,324:INFO:Creating metrics dataframe
2024-09-19 16:14:09,346:INFO:Initializing Gradient Boosting Classifier
2024-09-19 16:14:09,346:INFO:Total runtime is 0.22323981126149495 minutes
2024-09-19 16:14:09,346:INFO:SubProcess create_model() called ==================================
2024-09-19 16:14:09,346:INFO:Initializing create_model()
2024-09-19 16:14:09,346:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253E0E07250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:14:09,346:INFO:Checking exceptions
2024-09-19 16:14:09,346:INFO:Importing libraries
2024-09-19 16:14:09,346:INFO:Copying training dataset
2024-09-19 16:14:09,346:INFO:Defining folds
2024-09-19 16:14:09,346:INFO:Declaring metric variables
2024-09-19 16:14:09,358:INFO:Importing untrained model
2024-09-19 16:14:09,361:INFO:Gradient Boosting Classifier Imported successfully
2024-09-19 16:14:09,369:INFO:Starting cross validation
2024-09-19 16:14:09,370:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 16:14:11,163:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:11,173:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:11,184:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:11,194:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:11,204:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:11,207:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:11,207:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:11,207:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:11,207:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:11,217:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:11,224:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:11,224:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:11,227:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:11,232:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:11,232:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:11,232:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:11,232:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:11,243:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:11,245:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:11,249:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:11,253:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:11,256:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:11,262:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:11,265:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:12,357:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:12,361:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:12,361:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:12,375:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:12,381:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:12,381:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:12,401:INFO:Calculating mean and std
2024-09-19 16:14:12,401:INFO:Creating metrics dataframe
2024-09-19 16:14:12,401:INFO:Uploading results into container
2024-09-19 16:14:12,401:INFO:Uploading model into container now
2024-09-19 16:14:12,401:INFO:_master_model_container: 24
2024-09-19 16:14:12,401:INFO:_display_container: 3
2024-09-19 16:14:12,401:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-09-19 16:14:12,401:INFO:create_model() successfully completed......................................
2024-09-19 16:14:12,740:INFO:SubProcess create_model() end ==================================
2024-09-19 16:14:12,740:INFO:Creating metrics dataframe
2024-09-19 16:14:12,758:INFO:Initializing Linear Discriminant Analysis
2024-09-19 16:14:12,758:INFO:Total runtime is 0.28010533650716146 minutes
2024-09-19 16:14:12,758:INFO:SubProcess create_model() called ==================================
2024-09-19 16:14:12,758:INFO:Initializing create_model()
2024-09-19 16:14:12,758:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253E0E07250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:14:12,758:INFO:Checking exceptions
2024-09-19 16:14:12,758:INFO:Importing libraries
2024-09-19 16:14:12,758:INFO:Copying training dataset
2024-09-19 16:14:12,758:INFO:Defining folds
2024-09-19 16:14:12,758:INFO:Declaring metric variables
2024-09-19 16:14:12,774:INFO:Importing untrained model
2024-09-19 16:14:12,777:INFO:Linear Discriminant Analysis Imported successfully
2024-09-19 16:14:12,781:INFO:Starting cross validation
2024-09-19 16:14:12,781:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 16:14:13,256:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:13,261:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:13,264:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:13,264:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:13,264:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:13,264:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:13,272:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:13,272:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:13,274:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:13,274:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:13,277:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:13,278:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:13,280:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:13,282:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:13,282:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:13,282:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:13,282:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:13,282:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:13,288:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:13,288:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:13,292:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:13,294:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:13,296:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:13,300:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:13,541:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:13,545:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:13,545:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:13,545:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:13,545:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:13,555:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:13,566:INFO:Calculating mean and std
2024-09-19 16:14:13,566:INFO:Creating metrics dataframe
2024-09-19 16:14:13,566:INFO:Uploading results into container
2024-09-19 16:14:13,566:INFO:Uploading model into container now
2024-09-19 16:14:13,566:INFO:_master_model_container: 25
2024-09-19 16:14:13,566:INFO:_display_container: 3
2024-09-19 16:14:13,566:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-09-19 16:14:13,566:INFO:create_model() successfully completed......................................
2024-09-19 16:14:13,886:INFO:SubProcess create_model() end ==================================
2024-09-19 16:14:13,886:INFO:Creating metrics dataframe
2024-09-19 16:14:13,901:INFO:Initializing Extra Trees Classifier
2024-09-19 16:14:13,901:INFO:Total runtime is 0.299165948232015 minutes
2024-09-19 16:14:13,901:INFO:SubProcess create_model() called ==================================
2024-09-19 16:14:13,901:INFO:Initializing create_model()
2024-09-19 16:14:13,901:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253E0E07250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:14:13,901:INFO:Checking exceptions
2024-09-19 16:14:13,901:INFO:Importing libraries
2024-09-19 16:14:13,901:INFO:Copying training dataset
2024-09-19 16:14:13,917:INFO:Defining folds
2024-09-19 16:14:13,917:INFO:Declaring metric variables
2024-09-19 16:14:13,917:INFO:Importing untrained model
2024-09-19 16:14:13,917:INFO:Extra Trees Classifier Imported successfully
2024-09-19 16:14:13,928:INFO:Starting cross validation
2024-09-19 16:14:13,930:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 16:14:15,865:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:15,867:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:15,869:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:15,876:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:15,877:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:15,887:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:15,888:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:15,892:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:15,900:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:15,970:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:15,982:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:15,987:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:15,990:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:15,991:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:15,996:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:15,996:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:15,996:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:16,000:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:16,000:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:16,007:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:16,007:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:16,011:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:16,011:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:16,673:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:16,674:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:16,679:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:16,679:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:16,679:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:16,679:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:16,700:INFO:Calculating mean and std
2024-09-19 16:14:16,701:INFO:Creating metrics dataframe
2024-09-19 16:14:16,703:INFO:Uploading results into container
2024-09-19 16:14:16,704:INFO:Uploading model into container now
2024-09-19 16:14:16,704:INFO:_master_model_container: 26
2024-09-19 16:14:16,705:INFO:_display_container: 3
2024-09-19 16:14:16,706:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-09-19 16:14:16,706:INFO:create_model() successfully completed......................................
2024-09-19 16:14:17,004:INFO:SubProcess create_model() end ==================================
2024-09-19 16:14:17,004:INFO:Creating metrics dataframe
2024-09-19 16:14:17,020:INFO:Initializing Light Gradient Boosting Machine
2024-09-19 16:14:17,020:INFO:Total runtime is 0.35113619168599447 minutes
2024-09-19 16:14:17,020:INFO:SubProcess create_model() called ==================================
2024-09-19 16:14:17,020:INFO:Initializing create_model()
2024-09-19 16:14:17,020:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253E0E07250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:14:17,020:INFO:Checking exceptions
2024-09-19 16:14:17,020:INFO:Importing libraries
2024-09-19 16:14:17,020:INFO:Copying training dataset
2024-09-19 16:14:17,020:INFO:Defining folds
2024-09-19 16:14:17,020:INFO:Declaring metric variables
2024-09-19 16:14:17,035:INFO:Importing untrained model
2024-09-19 16:14:17,040:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-19 16:14:17,045:INFO:Starting cross validation
2024-09-19 16:14:17,047:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 16:14:18,007:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:18,007:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:18,017:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:18,017:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:18,024:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:18,027:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:18,027:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:18,027:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:18,027:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:18,037:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:18,041:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:18,048:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:18,157:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:18,160:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:18,170:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:18,174:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:18,180:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:18,191:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:18,293:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:18,303:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:18,313:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:18,364:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:18,367:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:18,377:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:18,583:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:18,593:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:18,603:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:18,603:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:18,614:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:18,614:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:18,634:INFO:Calculating mean and std
2024-09-19 16:14:18,634:INFO:Creating metrics dataframe
2024-09-19 16:14:18,634:INFO:Uploading results into container
2024-09-19 16:14:18,634:INFO:Uploading model into container now
2024-09-19 16:14:18,634:INFO:_master_model_container: 27
2024-09-19 16:14:18,634:INFO:_display_container: 3
2024-09-19 16:14:18,634:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-19 16:14:18,634:INFO:create_model() successfully completed......................................
2024-09-19 16:14:18,991:INFO:SubProcess create_model() end ==================================
2024-09-19 16:14:18,991:INFO:Creating metrics dataframe
2024-09-19 16:14:19,008:INFO:Initializing Dummy Classifier
2024-09-19 16:14:19,008:INFO:Total runtime is 0.3842725396156311 minutes
2024-09-19 16:14:19,008:INFO:SubProcess create_model() called ==================================
2024-09-19 16:14:19,008:INFO:Initializing create_model()
2024-09-19 16:14:19,008:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000253E0E07250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:14:19,008:INFO:Checking exceptions
2024-09-19 16:14:19,008:INFO:Importing libraries
2024-09-19 16:14:19,008:INFO:Copying training dataset
2024-09-19 16:14:19,026:INFO:Defining folds
2024-09-19 16:14:19,026:INFO:Declaring metric variables
2024-09-19 16:14:19,029:INFO:Importing untrained model
2024-09-19 16:14:19,031:INFO:Dummy Classifier Imported successfully
2024-09-19 16:14:19,032:INFO:Starting cross validation
2024-09-19 16:14:19,040:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-19 16:14:19,424:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:19,430:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:19,441:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 16:14:19,441:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:19,441:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:19,441:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:19,441:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:19,450:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:19,450:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:19,457:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:19,457:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:19,457:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:19,460:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:19,460:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 16:14:19,460:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 16:14:19,460:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:19,460:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 16:14:19,460:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 16:14:19,460:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:19,460:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:19,460:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:19,470:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:19,470:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:19,474:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 16:14:19,474:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 16:14:19,474:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:19,474:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:19,481:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:19,485:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 16:14:19,490:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:19,731:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:19,731:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:19,731:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:19,731:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 16:14:19,742:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:19,744:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:19,747:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-19 16:14:19,747:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-19 16:14:19,762:INFO:Calculating mean and std
2024-09-19 16:14:19,762:INFO:Creating metrics dataframe
2024-09-19 16:14:19,762:INFO:Uploading results into container
2024-09-19 16:14:19,762:INFO:Uploading model into container now
2024-09-19 16:14:19,762:INFO:_master_model_container: 28
2024-09-19 16:14:19,762:INFO:_display_container: 3
2024-09-19 16:14:19,762:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-09-19 16:14:19,762:INFO:create_model() successfully completed......................................
2024-09-19 16:14:20,066:INFO:SubProcess create_model() end ==================================
2024-09-19 16:14:20,066:INFO:Creating metrics dataframe
2024-09-19 16:14:20,082:INFO:Initializing create_model()
2024-09-19 16:14:20,082:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:14:20,082:INFO:Checking exceptions
2024-09-19 16:14:20,082:INFO:Importing libraries
2024-09-19 16:14:20,082:INFO:Copying training dataset
2024-09-19 16:14:20,091:INFO:Defining folds
2024-09-19 16:14:20,091:INFO:Declaring metric variables
2024-09-19 16:14:20,091:INFO:Importing untrained model
2024-09-19 16:14:20,091:INFO:Declaring custom model
2024-09-19 16:14:20,092:INFO:Gradient Boosting Classifier Imported successfully
2024-09-19 16:14:20,093:INFO:Cross validation set to False
2024-09-19 16:14:20,093:INFO:Fitting Model
2024-09-19 16:14:21,176:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-09-19 16:14:21,176:INFO:create_model() successfully completed......................................
2024-09-19 16:14:21,490:INFO:Initializing create_model()
2024-09-19 16:14:21,490:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:14:21,490:INFO:Checking exceptions
2024-09-19 16:14:21,490:INFO:Importing libraries
2024-09-19 16:14:21,490:INFO:Copying training dataset
2024-09-19 16:14:21,490:INFO:Defining folds
2024-09-19 16:14:21,490:INFO:Declaring metric variables
2024-09-19 16:14:21,490:INFO:Importing untrained model
2024-09-19 16:14:21,490:INFO:Declaring custom model
2024-09-19 16:14:21,490:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-19 16:14:21,490:INFO:Cross validation set to False
2024-09-19 16:14:21,490:INFO:Fitting Model
2024-09-19 16:14:21,671:INFO:[LightGBM] [Info] Number of positive: 4231, number of negative: 4698
2024-09-19 16:14:21,671:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000649 seconds.
2024-09-19 16:14:21,671:INFO:You can set `force_row_wise=true` to remove the overhead.
2024-09-19 16:14:21,671:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2024-09-19 16:14:21,671:INFO:[LightGBM] [Info] Total Bins 538
2024-09-19 16:14:21,671:INFO:[LightGBM] [Info] Number of data points in the train set: 8929, number of used features: 47
2024-09-19 16:14:21,671:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.473849 -> initscore=-0.104699
2024-09-19 16:14:21,671:INFO:[LightGBM] [Info] Start training from score -0.104699
2024-09-19 16:14:21,740:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-19 16:14:21,740:INFO:create_model() successfully completed......................................
2024-09-19 16:14:22,088:INFO:Initializing create_model()
2024-09-19 16:14:22,089:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-19 16:14:22,089:INFO:Checking exceptions
2024-09-19 16:14:22,090:INFO:Importing libraries
2024-09-19 16:14:22,090:INFO:Copying training dataset
2024-09-19 16:14:22,090:INFO:Defining folds
2024-09-19 16:14:22,090:INFO:Declaring metric variables
2024-09-19 16:14:22,090:INFO:Importing untrained model
2024-09-19 16:14:22,090:INFO:Declaring custom model
2024-09-19 16:14:22,090:INFO:Random Forest Classifier Imported successfully
2024-09-19 16:14:22,090:INFO:Cross validation set to False
2024-09-19 16:14:22,090:INFO:Fitting Model
2024-09-19 16:14:22,494:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-09-19 16:14:22,494:INFO:create_model() successfully completed......................................
2024-09-19 16:14:22,810:INFO:_master_model_container: 28
2024-09-19 16:14:22,810:INFO:_display_container: 3
2024-09-19 16:14:22,810:INFO:[GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)]
2024-09-19 16:14:22,810:INFO:compare_models() successfully completed......................................
2024-09-19 16:17:24,353:INFO:Initializing get_config()
2024-09-19 16:17:24,354:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, variable=X_train_transformed)
2024-09-19 16:17:24,412:INFO:Variable: X_train returned as             age  job_management  job_housemaid  job_self-employed  job_student  ...  previous  poutcome_unknown  poutcome_failure  poutcome_success  poutcome_other
6270   0.060709        1.840575      -0.159308          -0.194663    -0.180920  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
10963 -0.191067       -0.543309       6.277158          -0.194663    -0.180920  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
9909   0.144635       -0.543309      -0.159308           5.137078    -0.180920  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
2143  -1.366022       -0.543309      -0.159308          -0.194663     5.527317  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
4869   2.662397       -0.543309      -0.159308          -0.194663    -0.180920  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
...         ...             ...            ...                ...          ...  ...       ...               ...               ...               ...             ...
3011   1.403516        1.840575      -0.159308          -0.194663    -0.180920  ...  0.964632         -1.721894         -0.355133          3.105226       -0.220220
10609 -1.282097       -0.543309      -0.159308          -0.194663     5.527317  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
7504  -0.694619       -0.543309      -0.159308          -0.194663    -0.180920  ...  0.964632         -1.721894         -0.355133         -0.322038        4.540909
8795   0.648187       -0.543309      -0.159308          -0.194663    -0.180920  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
9250   0.480336        1.840575      -0.159308          -0.194663    -0.180920  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220

[8929 rows x 47 columns]
2024-09-19 16:17:24,412:INFO:get_config() successfully completed......................................
2024-09-19 16:17:24,412:INFO:Initializing get_config()
2024-09-19 16:17:24,412:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, variable=X_test_transformed)
2024-09-19 16:17:24,459:INFO:Variable: X_test returned as            age  job_management  job_housemaid  job_self-employed  job_student  ...  previous  poutcome_unknown  poutcome_failure  poutcome_success  poutcome_other
8368 -1.198172       -0.543309      -0.159308          -0.194663     -0.18092  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
9300  1.571366       -0.543309      -0.159308          -0.194663     -0.18092  ...  0.964632         -1.721894         -0.355133         -0.322038        4.540909
5254  1.739217        1.840575      -0.159308          -0.194663     -0.18092  ...  0.964632         -1.721894         -0.355133         -0.322038        4.540909
1581  1.823143       -0.543309      -0.159308          -0.194663     -0.18092  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
9123 -0.778545       -0.543309      -0.159308          -0.194663     -0.18092  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
...        ...             ...            ...                ...          ...  ...       ...               ...               ...               ...             ...
6546 -0.107141       -0.543309      -0.159308          -0.194663     -0.18092  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
242   0.396411       -0.543309      -0.159308          -0.194663     -0.18092  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
6928 -0.274992       -0.543309      -0.159308          -0.194663     -0.18092  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
142  -0.274992       -0.543309      -0.159308          -0.194663     -0.18092  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
4632 -0.610694       -0.543309      -0.159308          -0.194663     -0.18092  ...  0.081272         -1.721894         -0.355133         -0.322038        4.540909

[2233 rows x 47 columns]
2024-09-19 16:17:24,459:INFO:get_config() successfully completed......................................
2024-09-19 16:17:24,459:INFO:Initializing get_config()
2024-09-19 16:17:24,459:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, variable=X_test)
2024-09-19 16:17:24,459:INFO:Variable: 'X_test' used to return the transformed values in PyCaret 2.x. From PyCaret 3.x, this will return the raw values. If you need the transformed values, call get_config with 'X_test_transformed' instead.
2024-09-19 16:17:24,475:INFO:Variable:  returned as       age          job   marital  education default  balance housing loan    contact  day month  campaign pdays  previous poutcome
8368   27     services    single  secondary      no     2457     yes   no    unknown   29   may         4    no         0  unknown
9300   60      retired   married  secondary      no     2060      no   no   cellular   26   mar         1   yes         3    other
5254   62   management   married  secondary      no     1128      no   no   cellular    2   sep         1   yes         3    other
1581   63      retired   married    unknown      no     2193      no   no  telephone   21   apr         4    no         0  unknown
9123   32   technician   married  secondary      no      901     yes   no    unknown   21   may         3    no         0  unknown
...   ...          ...       ...        ...     ...      ...     ...  ...        ...  ...   ...       ...   ...       ...      ...
6546   40     services   married  secondary      no        0     yes  yes   cellular    2   feb         2    no         0  unknown
242    46       admin.    single  secondary      no      849     yes   no    unknown    5   jun         2    no         0  unknown
6928   38  blue-collar    single    primary      no        0     yes   no   cellular    7   may         2    no         0  unknown
142    38       admin.  divorced  secondary      no      198     yes   no    unknown   26   may         2    no         0  unknown
4632   34   technician   married   tertiary      no     1539     yes   no   cellular   15   jun         1   yes         1    other

[2233 rows x 15 columns]
2024-09-19 16:17:24,475:INFO:get_config() successfully completed......................................
2024-09-19 16:17:24,475:INFO:Initializing get_config()
2024-09-19 16:17:24,475:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, variable=y_test)
2024-09-19 16:17:24,475:INFO:Variable: 'y_test' used to return the transformed values in PyCaret 2.x. From PyCaret 3.x, this will return the raw values. If you need the transformed values, call get_config with 'y_test_transformed' instead.
2024-09-19 16:17:24,475:INFO:Variable:  returned as 8368     no
9300     no
5254    yes
1581    yes
9123     no
       ... 
6546     no
242     yes
6928     no
142     yes
4632    yes
Name: deposit, Length: 2233, dtype: category
Categories (2, object): ['no', 'yes']
2024-09-19 16:17:24,475:INFO:get_config() successfully completed......................................
2024-09-19 16:17:31,039:INFO:Initializing get_config()
2024-09-19 16:17:31,039:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, variable=X_train_transformed)
2024-09-19 16:17:31,092:INFO:Variable: X_train returned as             age  job_management  job_housemaid  job_self-employed  job_student  ...  previous  poutcome_unknown  poutcome_failure  poutcome_success  poutcome_other
6270   0.060709        1.840575      -0.159308          -0.194663    -0.180920  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
10963 -0.191067       -0.543309       6.277158          -0.194663    -0.180920  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
9909   0.144635       -0.543309      -0.159308           5.137078    -0.180920  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
2143  -1.366022       -0.543309      -0.159308          -0.194663     5.527317  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
4869   2.662397       -0.543309      -0.159308          -0.194663    -0.180920  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
...         ...             ...            ...                ...          ...  ...       ...               ...               ...               ...             ...
3011   1.403516        1.840575      -0.159308          -0.194663    -0.180920  ...  0.964632         -1.721894         -0.355133          3.105226       -0.220220
10609 -1.282097       -0.543309      -0.159308          -0.194663     5.527317  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
7504  -0.694619       -0.543309      -0.159308          -0.194663    -0.180920  ...  0.964632         -1.721894         -0.355133         -0.322038        4.540909
8795   0.648187       -0.543309      -0.159308          -0.194663    -0.180920  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
9250   0.480336        1.840575      -0.159308          -0.194663    -0.180920  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220

[8929 rows x 47 columns]
2024-09-19 16:17:31,092:INFO:get_config() successfully completed......................................
2024-09-19 16:17:31,093:INFO:Initializing get_config()
2024-09-19 16:17:31,093:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, variable=y_train)
2024-09-19 16:17:31,093:INFO:Variable: 'y_train' used to return the transformed values in PyCaret 2.x. From PyCaret 3.x, this will return the raw values. If you need the transformed values, call get_config with 'y_train_transformed' instead.
2024-09-19 16:17:31,095:INFO:Variable:  returned as 6270      no
10963     no
9909      no
2143     yes
4869     yes
        ... 
3011     yes
10609     no
7504      no
8795      no
9250      no
Name: deposit, Length: 8929, dtype: category
Categories (2, object): ['no', 'yes']
2024-09-19 16:17:31,095:INFO:get_config() successfully completed......................................
2024-09-19 16:17:31,095:INFO:Initializing get_config()
2024-09-19 16:17:31,095:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, variable=X_test_transformed)
2024-09-19 16:17:31,141:INFO:Variable: X_test returned as            age  job_management  job_housemaid  job_self-employed  job_student  ...  previous  poutcome_unknown  poutcome_failure  poutcome_success  poutcome_other
8368 -1.198172       -0.543309      -0.159308          -0.194663     -0.18092  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
9300  1.571366       -0.543309      -0.159308          -0.194663     -0.18092  ...  0.964632         -1.721894         -0.355133         -0.322038        4.540909
5254  1.739217        1.840575      -0.159308          -0.194663     -0.18092  ...  0.964632         -1.721894         -0.355133         -0.322038        4.540909
1581  1.823143       -0.543309      -0.159308          -0.194663     -0.18092  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
9123 -0.778545       -0.543309      -0.159308          -0.194663     -0.18092  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
...        ...             ...            ...                ...          ...  ...       ...               ...               ...               ...             ...
6546 -0.107141       -0.543309      -0.159308          -0.194663     -0.18092  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
242   0.396411       -0.543309      -0.159308          -0.194663     -0.18092  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
6928 -0.274992       -0.543309      -0.159308          -0.194663     -0.18092  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
142  -0.274992       -0.543309      -0.159308          -0.194663     -0.18092  ... -0.360408          0.580756         -0.355133         -0.322038       -0.220220
4632 -0.610694       -0.543309      -0.159308          -0.194663     -0.18092  ...  0.081272         -1.721894         -0.355133         -0.322038        4.540909

[2233 rows x 47 columns]
2024-09-19 16:17:31,141:INFO:get_config() successfully completed......................................
2024-09-19 16:17:31,142:INFO:Initializing get_config()
2024-09-19 16:17:31,142:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, variable=y_test)
2024-09-19 16:17:31,142:INFO:Variable: 'y_test' used to return the transformed values in PyCaret 2.x. From PyCaret 3.x, this will return the raw values. If you need the transformed values, call get_config with 'y_test_transformed' instead.
2024-09-19 16:17:31,144:INFO:Variable:  returned as 8368     no
9300     no
5254    yes
1581    yes
9123     no
       ... 
6546     no
242     yes
6928     no
142     yes
4632    yes
Name: deposit, Length: 2233, dtype: category
Categories (2, object): ['no', 'yes']
2024-09-19 16:17:31,144:INFO:get_config() successfully completed......................................
2024-09-19 16:18:49,986:INFO:Initializing plot_model()
2024-09-19 16:18:49,986:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=[GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)], plot=confusion_matrix, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-09-19 16:18:49,986:INFO:Checking exceptions
2024-09-19 16:18:50,249:INFO:Initializing plot_model()
2024-09-19 16:18:50,249:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=[GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)], plot=confusion_matrix, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-09-19 16:18:50,249:INFO:Checking exceptions
2024-09-19 16:20:31,651:INFO:Initializing plot_model()
2024-09-19 16:20:31,651:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=VotingClassifier(estimators=[('GBC',
                              GradientBoostingClassifier(ccp_alpha=0.0,
                                                         criterion='friedman_mse',
                                                         init=None,
                                                         learning_rate=0.1,
                                                         loss='log_loss',
                                                         max_depth=3,
                                                         max_features=None,
                                                         max_leaf_nodes=None,
                                                         min_impurity_decrease=0.0,
                                                         min_samples_leaf=1,
                                                         min_samples_split=2,
                                                         min_weight_fraction_leaf=0.0,
                                                         n_estimators=100,
                                                         n_iter_no_change=None,
                                                         random_state=123,
                                                         subs...
                                                     max_depth=None,
                                                     max_features='sqrt',
                                                     max_leaf_nodes=None,
                                                     max_samples=None,
                                                     min_impurity_decrease=0.0,
                                                     min_samples_leaf=1,
                                                     min_samples_split=2,
                                                     min_weight_fraction_leaf=0.0,
                                                     monotonic_cst=None,
                                                     n_estimators=100,
                                                     n_jobs=-1, oob_score=False,
                                                     random_state=123,
                                                     verbose=0,
                                                     warm_start=False))],
                 flatten_transform=True, n_jobs=None, verbose=False,
                 voting='soft', weights=None), plot=auc, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-09-19 16:20:31,651:INFO:Checking exceptions
2024-09-19 16:20:31,655:INFO:Preloading libraries
2024-09-19 16:20:31,818:INFO:Copying training dataset
2024-09-19 16:20:31,818:INFO:Plot type: auc
2024-09-19 16:20:31,917:INFO:Fitting Model
2024-09-19 16:20:31,924:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but GradientBoostingClassifier was fitted with feature names
2024-09-19 16:20:31,924:WARNING:  warnings.warn(
2024-09-19 16:20:31,924:INFO:Scoring test/hold-out set
2024-09-19 16:22:50,749:INFO:Initializing get_config()
2024-09-19 16:22:50,749:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, variable=y_test)
2024-09-19 16:22:50,749:INFO:Variable: 'y_test' used to return the transformed values in PyCaret 2.x. From PyCaret 3.x, this will return the raw values. If you need the transformed values, call get_config with 'y_test_transformed' instead.
2024-09-19 16:22:50,754:INFO:Variable:  returned as 8368     no
9300     no
5254    yes
1581    yes
9123     no
       ... 
6546     no
242     yes
6928     no
142     yes
4632    yes
Name: deposit, Length: 2233, dtype: category
Categories (2, object): ['no', 'yes']
2024-09-19 16:22:50,754:INFO:get_config() successfully completed......................................
2024-09-19 16:25:34,371:INFO:Initializing get_config()
2024-09-19 16:25:34,371:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, variable=y_test)
2024-09-19 16:25:34,371:INFO:Variable: 'y_test' used to return the transformed values in PyCaret 2.x. From PyCaret 3.x, this will return the raw values. If you need the transformed values, call get_config with 'y_test_transformed' instead.
2024-09-19 16:25:34,375:INFO:Variable:  returned as 8368     no
9300     no
5254    yes
1581    yes
9123     no
       ... 
6546     no
242     yes
6928     no
142     yes
4632    yes
Name: deposit, Length: 2233, dtype: category
Categories (2, object): ['no', 'yes']
2024-09-19 16:25:34,375:INFO:get_config() successfully completed......................................
2024-09-19 16:28:56,170:INFO:Initializing get_config()
2024-09-19 16:28:56,170:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, variable=y_test)
2024-09-19 16:28:56,171:INFO:Variable: 'y_test' used to return the transformed values in PyCaret 2.x. From PyCaret 3.x, this will return the raw values. If you need the transformed values, call get_config with 'y_test_transformed' instead.
2024-09-19 16:28:56,174:INFO:Variable:  returned as 8368     no
9300     no
5254    yes
1581    yes
9123     no
       ... 
6546     no
242     yes
6928     no
142     yes
4632    yes
Name: deposit, Length: 2233, dtype: category
Categories (2, object): ['no', 'yes']
2024-09-19 16:28:56,174:INFO:get_config() successfully completed......................................
2024-09-19 16:28:59,578:INFO:Initializing get_config()
2024-09-19 16:28:59,578:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, variable=y_test)
2024-09-19 16:28:59,578:INFO:Variable: 'y_test' used to return the transformed values in PyCaret 2.x. From PyCaret 3.x, this will return the raw values. If you need the transformed values, call get_config with 'y_test_transformed' instead.
2024-09-19 16:28:59,583:INFO:Variable:  returned as 8368     no
9300     no
5254    yes
1581    yes
9123     no
       ... 
6546     no
242     yes
6928     no
142     yes
4632    yes
Name: deposit, Length: 2233, dtype: category
Categories (2, object): ['no', 'yes']
2024-09-19 16:28:59,583:INFO:get_config() successfully completed......................................
2024-09-19 16:29:44,078:INFO:Initializing plot_model()
2024-09-19 16:29:44,082:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=VotingClassifier(estimators=[('GBC',
                              GradientBoostingClassifier(ccp_alpha=0.0,
                                                         criterion='friedman_mse',
                                                         init=None,
                                                         learning_rate=0.1,
                                                         loss='log_loss',
                                                         max_depth=3,
                                                         max_features=None,
                                                         max_leaf_nodes=None,
                                                         min_impurity_decrease=0.0,
                                                         min_samples_leaf=1,
                                                         min_samples_split=2,
                                                         min_weight_fraction_leaf=0.0,
                                                         n_estimators=100,
                                                         n_iter_no_change=None,
                                                         random_state=123,
                                                         subs...
                                                     max_depth=None,
                                                     max_features='sqrt',
                                                     max_leaf_nodes=None,
                                                     max_samples=None,
                                                     min_impurity_decrease=0.0,
                                                     min_samples_leaf=1,
                                                     min_samples_split=2,
                                                     min_weight_fraction_leaf=0.0,
                                                     monotonic_cst=None,
                                                     n_estimators=100,
                                                     n_jobs=-1, oob_score=False,
                                                     random_state=123,
                                                     verbose=0,
                                                     warm_start=False))],
                 flatten_transform=True, n_jobs=None, verbose=False,
                 voting='soft', weights=None), plot=auc, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-09-19 16:29:44,082:INFO:Checking exceptions
2024-09-19 16:29:44,088:INFO:Preloading libraries
2024-09-19 16:29:44,236:INFO:Copying training dataset
2024-09-19 16:29:44,236:INFO:Plot type: auc
2024-09-19 16:29:44,340:INFO:Fitting Model
2024-09-19 16:29:44,340:WARNING:C:\Users\juran\anaconda3\envs\myenv\Lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but GradientBoostingClassifier was fitted with feature names
2024-09-19 16:29:44,340:WARNING:  warnings.warn(
2024-09-19 16:29:44,340:INFO:Scoring test/hold-out set
2024-09-19 16:31:34,655:INFO:Initializing plot_model()
2024-09-19 16:31:34,655:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000253E29D7750>, estimator=[GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)], plot=auc, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-09-19 16:31:34,655:INFO:Checking exceptions
